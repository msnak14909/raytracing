
raytracing：     檔案格式 elf64-x86-64


Disassembly of section .init:

0000000000400978 <_init>:
  400978:	48 83 ec 08          	sub    $0x8,%rsp
  40097c:	48 8b 05 75 76 20 00 	mov    0x207675(%rip),%rax        # 607ff8 <_DYNAMIC+0x1f0>
  400983:	48 85 c0             	test   %rax,%rax
  400986:	74 05                	je     40098d <_init+0x15>
  400988:	e8 d3 00 00 00       	callq  400a60 <__gmon_start__@plt>
  40098d:	48 83 c4 08          	add    $0x8,%rsp
  400991:	c3                   	retq   

Disassembly of section .plt:

00000000004009a0 <free@plt-0x10>:
  4009a0:	ff 35 62 76 20 00    	pushq  0x207662(%rip)        # 608008 <_GLOBAL_OFFSET_TABLE_+0x8>
  4009a6:	ff 25 64 76 20 00    	jmpq   *0x207664(%rip)        # 608010 <_GLOBAL_OFFSET_TABLE_+0x10>
  4009ac:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004009b0 <free@plt>:
  4009b0:	ff 25 62 76 20 00    	jmpq   *0x207662(%rip)        # 608018 <_GLOBAL_OFFSET_TABLE_+0x18>
  4009b6:	68 00 00 00 00       	pushq  $0x0
  4009bb:	e9 e0 ff ff ff       	jmpq   4009a0 <_init+0x28>

00000000004009c0 <pthread_create@plt>:
  4009c0:	ff 25 5a 76 20 00    	jmpq   *0x20765a(%rip)        # 608020 <_GLOBAL_OFFSET_TABLE_+0x20>
  4009c6:	68 01 00 00 00       	pushq  $0x1
  4009cb:	e9 d0 ff ff ff       	jmpq   4009a0 <_init+0x28>

00000000004009d0 <puts@plt>:
  4009d0:	ff 25 52 76 20 00    	jmpq   *0x207652(%rip)        # 608028 <_GLOBAL_OFFSET_TABLE_+0x28>
  4009d6:	68 02 00 00 00       	pushq  $0x2
  4009db:	e9 c0 ff ff ff       	jmpq   4009a0 <_init+0x28>

00000000004009e0 <clock_gettime@plt>:
  4009e0:	ff 25 4a 76 20 00    	jmpq   *0x20764a(%rip)        # 608030 <_GLOBAL_OFFSET_TABLE_+0x30>
  4009e6:	68 03 00 00 00       	pushq  $0x3
  4009eb:	e9 b0 ff ff ff       	jmpq   4009a0 <_init+0x28>

00000000004009f0 <fclose@plt>:
  4009f0:	ff 25 42 76 20 00    	jmpq   *0x207642(%rip)        # 608038 <_GLOBAL_OFFSET_TABLE_+0x38>
  4009f6:	68 04 00 00 00       	pushq  $0x4
  4009fb:	e9 a0 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400a00 <__stack_chk_fail@plt>:
  400a00:	ff 25 3a 76 20 00    	jmpq   *0x20763a(%rip)        # 608040 <_GLOBAL_OFFSET_TABLE_+0x40>
  400a06:	68 05 00 00 00       	pushq  $0x5
  400a0b:	e9 90 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400a10 <printf@plt>:
  400a10:	ff 25 32 76 20 00    	jmpq   *0x207632(%rip)        # 608048 <_GLOBAL_OFFSET_TABLE_+0x48>
  400a16:	68 06 00 00 00       	pushq  $0x6
  400a1b:	e9 80 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400a20 <pow@plt>:
  400a20:	ff 25 2a 76 20 00    	jmpq   *0x20762a(%rip)        # 608050 <_GLOBAL_OFFSET_TABLE_+0x50>
  400a26:	68 07 00 00 00       	pushq  $0x7
  400a2b:	e9 70 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400a30 <__libc_start_main@plt>:
  400a30:	ff 25 22 76 20 00    	jmpq   *0x207622(%rip)        # 608058 <_GLOBAL_OFFSET_TABLE_+0x58>
  400a36:	68 08 00 00 00       	pushq  $0x8
  400a3b:	e9 60 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400a40 <calloc@plt>:
  400a40:	ff 25 1a 76 20 00    	jmpq   *0x20761a(%rip)        # 608060 <_GLOBAL_OFFSET_TABLE_+0x60>
  400a46:	68 09 00 00 00       	pushq  $0x9
  400a4b:	e9 50 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400a50 <fprintf@plt>:
  400a50:	ff 25 12 76 20 00    	jmpq   *0x207612(%rip)        # 608068 <_GLOBAL_OFFSET_TABLE_+0x68>
  400a56:	68 0a 00 00 00       	pushq  $0xa
  400a5b:	e9 40 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400a60 <__gmon_start__@plt>:
  400a60:	ff 25 0a 76 20 00    	jmpq   *0x20760a(%rip)        # 608070 <_GLOBAL_OFFSET_TABLE_+0x70>
  400a66:	68 0b 00 00 00       	pushq  $0xb
  400a6b:	e9 30 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400a70 <pthread_mutex_unlock@plt>:
  400a70:	ff 25 02 76 20 00    	jmpq   *0x207602(%rip)        # 608078 <_GLOBAL_OFFSET_TABLE_+0x78>
  400a76:	68 0c 00 00 00       	pushq  $0xc
  400a7b:	e9 20 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400a80 <pthread_exit@plt>:
  400a80:	ff 25 fa 75 20 00    	jmpq   *0x2075fa(%rip)        # 608080 <_GLOBAL_OFFSET_TABLE_+0x80>
  400a86:	68 0d 00 00 00       	pushq  $0xd
  400a8b:	e9 10 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400a90 <malloc@plt>:
  400a90:	ff 25 f2 75 20 00    	jmpq   *0x2075f2(%rip)        # 608088 <_GLOBAL_OFFSET_TABLE_+0x88>
  400a96:	68 0e 00 00 00       	pushq  $0xe
  400a9b:	e9 00 ff ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400aa0 <fopen@plt>:
  400aa0:	ff 25 ea 75 20 00    	jmpq   *0x2075ea(%rip)        # 608090 <_GLOBAL_OFFSET_TABLE_+0x90>
  400aa6:	68 0f 00 00 00       	pushq  $0xf
  400aab:	e9 f0 fe ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400ab0 <pthread_join@plt>:
  400ab0:	ff 25 e2 75 20 00    	jmpq   *0x2075e2(%rip)        # 608098 <_GLOBAL_OFFSET_TABLE_+0x98>
  400ab6:	68 10 00 00 00       	pushq  $0x10
  400abb:	e9 e0 fe ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400ac0 <exit@plt>:
  400ac0:	ff 25 da 75 20 00    	jmpq   *0x2075da(%rip)        # 6080a0 <_GLOBAL_OFFSET_TABLE_+0xa0>
  400ac6:	68 11 00 00 00       	pushq  $0x11
  400acb:	e9 d0 fe ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400ad0 <fwrite@plt>:
  400ad0:	ff 25 d2 75 20 00    	jmpq   *0x2075d2(%rip)        # 6080a8 <_GLOBAL_OFFSET_TABLE_+0xa8>
  400ad6:	68 12 00 00 00       	pushq  $0x12
  400adb:	e9 c0 fe ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400ae0 <sqrt@plt>:
  400ae0:	ff 25 ca 75 20 00    	jmpq   *0x2075ca(%rip)        # 6080b0 <_GLOBAL_OFFSET_TABLE_+0xb0>
  400ae6:	68 13 00 00 00       	pushq  $0x13
  400aeb:	e9 b0 fe ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400af0 <pthread_mutex_init@plt>:
  400af0:	ff 25 c2 75 20 00    	jmpq   *0x2075c2(%rip)        # 6080b8 <_GLOBAL_OFFSET_TABLE_+0xb8>
  400af6:	68 14 00 00 00       	pushq  $0x14
  400afb:	e9 a0 fe ff ff       	jmpq   4009a0 <_init+0x28>

0000000000400b00 <pthread_mutex_lock@plt>:
  400b00:	ff 25 ba 75 20 00    	jmpq   *0x2075ba(%rip)        # 6080c0 <_GLOBAL_OFFSET_TABLE_+0xc0>
  400b06:	68 15 00 00 00       	pushq  $0x15
  400b0b:	e9 90 fe ff ff       	jmpq   4009a0 <_init+0x28>

Disassembly of section .text:

0000000000400b10 <_start>:
  400b10:	31 ed                	xor    %ebp,%ebp
  400b12:	49 89 d1             	mov    %rdx,%r9
  400b15:	5e                   	pop    %rsi
  400b16:	48 89 e2             	mov    %rsp,%rdx
  400b19:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  400b1d:	50                   	push   %rax
  400b1e:	54                   	push   %rsp
  400b1f:	49 c7 c0 c0 69 40 00 	mov    $0x4069c0,%r8
  400b26:	48 c7 c1 50 69 40 00 	mov    $0x406950,%rcx
  400b2d:	48 c7 c7 34 67 40 00 	mov    $0x406734,%rdi
  400b34:	e8 f7 fe ff ff       	callq  400a30 <__libc_start_main@plt>
  400b39:	f4                   	hlt    
  400b3a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400b40 <deregister_tm_clones>:
  400b40:	b8 df 80 60 00       	mov    $0x6080df,%eax
  400b45:	55                   	push   %rbp
  400b46:	48 2d d8 80 60 00    	sub    $0x6080d8,%rax
  400b4c:	48 83 f8 0e          	cmp    $0xe,%rax
  400b50:	48 89 e5             	mov    %rsp,%rbp
  400b53:	76 1b                	jbe    400b70 <deregister_tm_clones+0x30>
  400b55:	b8 00 00 00 00       	mov    $0x0,%eax
  400b5a:	48 85 c0             	test   %rax,%rax
  400b5d:	74 11                	je     400b70 <deregister_tm_clones+0x30>
  400b5f:	5d                   	pop    %rbp
  400b60:	bf d8 80 60 00       	mov    $0x6080d8,%edi
  400b65:	ff e0                	jmpq   *%rax
  400b67:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  400b6e:	00 00 
  400b70:	5d                   	pop    %rbp
  400b71:	c3                   	retq   
  400b72:	0f 1f 40 00          	nopl   0x0(%rax)
  400b76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400b7d:	00 00 00 

0000000000400b80 <register_tm_clones>:
  400b80:	be d8 80 60 00       	mov    $0x6080d8,%esi
  400b85:	55                   	push   %rbp
  400b86:	48 81 ee d8 80 60 00 	sub    $0x6080d8,%rsi
  400b8d:	48 c1 fe 03          	sar    $0x3,%rsi
  400b91:	48 89 e5             	mov    %rsp,%rbp
  400b94:	48 89 f0             	mov    %rsi,%rax
  400b97:	48 c1 e8 3f          	shr    $0x3f,%rax
  400b9b:	48 01 c6             	add    %rax,%rsi
  400b9e:	48 d1 fe             	sar    %rsi
  400ba1:	74 15                	je     400bb8 <register_tm_clones+0x38>
  400ba3:	b8 00 00 00 00       	mov    $0x0,%eax
  400ba8:	48 85 c0             	test   %rax,%rax
  400bab:	74 0b                	je     400bb8 <register_tm_clones+0x38>
  400bad:	5d                   	pop    %rbp
  400bae:	bf d8 80 60 00       	mov    $0x6080d8,%edi
  400bb3:	ff e0                	jmpq   *%rax
  400bb5:	0f 1f 00             	nopl   (%rax)
  400bb8:	5d                   	pop    %rbp
  400bb9:	c3                   	retq   
  400bba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400bc0 <__do_global_dtors_aux>:
  400bc0:	80 3d 19 75 20 00 00 	cmpb   $0x0,0x207519(%rip)        # 6080e0 <completed.7568>
  400bc7:	75 11                	jne    400bda <__do_global_dtors_aux+0x1a>
  400bc9:	55                   	push   %rbp
  400bca:	48 89 e5             	mov    %rsp,%rbp
  400bcd:	e8 6e ff ff ff       	callq  400b40 <deregister_tm_clones>
  400bd2:	5d                   	pop    %rbp
  400bd3:	c6 05 06 75 20 00 01 	movb   $0x1,0x207506(%rip)        # 6080e0 <completed.7568>
  400bda:	f3 c3                	repz retq 
  400bdc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400be0 <frame_dummy>:
  400be0:	bf 00 7e 60 00       	mov    $0x607e00,%edi
  400be5:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  400be9:	75 05                	jne    400bf0 <frame_dummy+0x10>
  400beb:	eb 93                	jmp    400b80 <register_tm_clones>
  400bed:	0f 1f 00             	nopl   (%rax)
  400bf0:	b8 00 00 00 00       	mov    $0x0,%eax
  400bf5:	48 85 c0             	test   %rax,%rax
  400bf8:	74 f1                	je     400beb <frame_dummy+0xb>
  400bfa:	55                   	push   %rbp
  400bfb:	48 89 e5             	mov    %rsp,%rbp
  400bfe:	ff d0                	callq  *%rax
  400c00:	5d                   	pop    %rbp
  400c01:	e9 7a ff ff ff       	jmpq   400b80 <register_tm_clones>

0000000000400c06 <append_light>:
        } \
        *list = NULL; \
    }

// *INDENT-OFF*
FUNC_BEGIN(light)
  400c06:	55                   	push   %rbp
  400c07:	48 89 e5             	mov    %rsp,%rbp
  400c0a:	48 83 ec 20          	sub    $0x20,%rsp
  400c0e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400c12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  400c16:	bf 40 00 00 00       	mov    $0x40,%edi
  400c1b:	e8 70 fe ff ff       	callq  400a90 <malloc@plt>
  400c20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
COPY_POINT3(newNode->element.position, X->position);
  400c24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c28:	f2 0f 10 40 18       	movsd  0x18(%rax),%xmm0
  400c2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c31:	f2 0f 11 40 18       	movsd  %xmm0,0x18(%rax)
  400c36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c3a:	f2 0f 10 40 20       	movsd  0x20(%rax),%xmm0
  400c3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c43:	f2 0f 11 40 20       	movsd  %xmm0,0x20(%rax)
  400c48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c4c:	f2 0f 10 40 28       	movsd  0x28(%rax),%xmm0
  400c51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c55:	f2 0f 11 40 28       	movsd  %xmm0,0x28(%rax)
COPY_COLOR(newNode->element.light_color, X->light_color);
  400c5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c5e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  400c62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c66:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  400c6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c6e:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
  400c73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c77:	f2 0f 11 40 08       	movsd  %xmm0,0x8(%rax)
  400c7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c80:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
  400c85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c89:	f2 0f 11 40 10       	movsd  %xmm0,0x10(%rax)
newNode->element.intensity = X->intensity;
  400c8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400c92:	f2 0f 10 40 30       	movsd  0x30(%rax),%xmm0
  400c97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c9b:	f2 0f 11 40 30       	movsd  %xmm0,0x30(%rax)
FUNC_END(light)
  400ca0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400ca4:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
  400cab:	00 
  400cac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400cb0:	48 8b 00             	mov    (%rax),%rax
  400cb3:	48 85 c0             	test   %rax,%rax
  400cb6:	75 0d                	jne    400cc5 <append_light+0xbf>
  400cb8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400cbc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  400cc0:	48 89 10             	mov    %rdx,(%rax)
  400cc3:	eb 32                	jmp    400cf7 <append_light+0xf1>
  400cc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400cc9:	48 8b 00             	mov    (%rax),%rax
  400ccc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400cd0:	eb 0c                	jmp    400cde <append_light+0xd8>
  400cd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400cd6:	48 8b 40 38          	mov    0x38(%rax),%rax
  400cda:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400cde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400ce2:	48 8b 40 38          	mov    0x38(%rax),%rax
  400ce6:	48 85 c0             	test   %rax,%rax
  400ce9:	75 e7                	jne    400cd2 <append_light+0xcc>
  400ceb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400cef:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  400cf3:	48 89 50 38          	mov    %rdx,0x38(%rax)
  400cf7:	90                   	nop
  400cf8:	c9                   	leaveq 
  400cf9:	c3                   	retq   

0000000000400cfa <delete_light_list>:
  400cfa:	55                   	push   %rbp
  400cfb:	48 89 e5             	mov    %rsp,%rbp
  400cfe:	48 83 ec 20          	sub    $0x20,%rsp
  400d02:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400d06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d0a:	48 8b 00             	mov    (%rax),%rax
  400d0d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400d11:	eb 20                	jmp    400d33 <delete_light_list+0x39>
  400d13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d17:	48 8b 40 38          	mov    0x38(%rax),%rax
  400d1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  400d1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400d23:	48 89 c7             	mov    %rax,%rdi
  400d26:	e8 85 fc ff ff       	callq  4009b0 <free@plt>
  400d2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400d2f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400d33:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  400d38:	75 d9                	jne    400d13 <delete_light_list+0x19>
  400d3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d3e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  400d45:	90                   	nop
  400d46:	c9                   	leaveq 
  400d47:	c3                   	retq   

0000000000400d48 <append_rectangular>:

FUNC_BEGIN(rectangular)
  400d48:	55                   	push   %rbp
  400d49:	48 89 e5             	mov    %rsp,%rbp
  400d4c:	48 83 ec 30          	sub    $0x30,%rsp
  400d50:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  400d54:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  400d58:	bf c8 00 00 00       	mov    $0xc8,%edi
  400d5d:	e8 2e fd ff ff       	callq  400a90 <malloc@plt>
  400d62:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
COPY_OBJECT_FILL(newNode->element.rectangular_fill, X->rectangular_fill);
  400d66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400d6a:	f2 0f 10 40 78       	movsd  0x78(%rax),%xmm0
  400d6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400d73:	f2 0f 11 40 78       	movsd  %xmm0,0x78(%rax)
  400d78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400d7c:	f2 0f 10 80 80 00 00 	movsd  0x80(%rax),%xmm0
  400d83:	00 
  400d84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400d88:	f2 0f 11 80 80 00 00 	movsd  %xmm0,0x80(%rax)
  400d8f:	00 
  400d90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400d94:	f2 0f 10 80 88 00 00 	movsd  0x88(%rax),%xmm0
  400d9b:	00 
  400d9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400da0:	f2 0f 11 80 88 00 00 	movsd  %xmm0,0x88(%rax)
  400da7:	00 
  400da8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400dac:	f2 0f 10 80 90 00 00 	movsd  0x90(%rax),%xmm0
  400db3:	00 
  400db4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400db8:	f2 0f 11 80 90 00 00 	movsd  %xmm0,0x90(%rax)
  400dbf:	00 
  400dc0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400dc4:	f2 0f 10 80 98 00 00 	movsd  0x98(%rax),%xmm0
  400dcb:	00 
  400dcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400dd0:	f2 0f 11 80 98 00 00 	movsd  %xmm0,0x98(%rax)
  400dd7:	00 
  400dd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400ddc:	f2 0f 10 80 a8 00 00 	movsd  0xa8(%rax),%xmm0
  400de3:	00 
  400de4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400de8:	f2 0f 11 80 a8 00 00 	movsd  %xmm0,0xa8(%rax)
  400def:	00 
  400df0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400df4:	f2 0f 10 80 b8 00 00 	movsd  0xb8(%rax),%xmm0
  400dfb:	00 
  400dfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e00:	f2 0f 11 80 b8 00 00 	movsd  %xmm0,0xb8(%rax)
  400e07:	00 
  400e08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400e0c:	f2 0f 10 80 a0 00 00 	movsd  0xa0(%rax),%xmm0
  400e13:	00 
  400e14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e18:	f2 0f 11 80 a0 00 00 	movsd  %xmm0,0xa0(%rax)
  400e1f:	00 
  400e20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400e24:	f2 0f 10 80 b0 00 00 	movsd  0xb0(%rax),%xmm0
  400e2b:	00 
  400e2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e30:	f2 0f 11 80 b0 00 00 	movsd  %xmm0,0xb0(%rax)
  400e37:	00 
for (int i = 0; i < 4; i++)
  400e38:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  400e3f:	e9 fe 00 00 00       	jmpq   400f42 <append_rectangular+0x1fa>
{
    COPY_POINT3(newNode->element.vertices[i], X->vertices[i]);
  400e44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  400e48:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400e4b:	48 63 d0             	movslq %eax,%rdx
  400e4e:	48 89 d0             	mov    %rdx,%rax
  400e51:	48 01 c0             	add    %rax,%rax
  400e54:	48 01 d0             	add    %rdx,%rax
  400e57:	48 c1 e0 03          	shl    $0x3,%rax
  400e5b:	48 01 c8             	add    %rcx,%rax
  400e5e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  400e62:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  400e66:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400e69:	48 63 d0             	movslq %eax,%rdx
  400e6c:	48 89 d0             	mov    %rdx,%rax
  400e6f:	48 01 c0             	add    %rax,%rax
  400e72:	48 01 d0             	add    %rdx,%rax
  400e75:	48 c1 e0 03          	shl    $0x3,%rax
  400e79:	48 01 c8             	add    %rcx,%rax
  400e7c:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  400e80:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  400e84:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400e87:	48 63 d0             	movslq %eax,%rdx
  400e8a:	48 89 d0             	mov    %rdx,%rax
  400e8d:	48 01 c0             	add    %rax,%rax
  400e90:	48 01 d0             	add    %rdx,%rax
  400e93:	48 c1 e0 03          	shl    $0x3,%rax
  400e97:	48 01 c8             	add    %rcx,%rax
  400e9a:	48 83 c0 08          	add    $0x8,%rax
  400e9e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  400ea2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  400ea6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400ea9:	48 63 d0             	movslq %eax,%rdx
  400eac:	48 89 d0             	mov    %rdx,%rax
  400eaf:	48 01 c0             	add    %rax,%rax
  400eb2:	48 01 d0             	add    %rdx,%rax
  400eb5:	48 c1 e0 03          	shl    $0x3,%rax
  400eb9:	48 01 c8             	add    %rcx,%rax
  400ebc:	48 83 c0 08          	add    $0x8,%rax
  400ec0:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  400ec4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  400ec8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400ecb:	48 63 d0             	movslq %eax,%rdx
  400ece:	48 89 d0             	mov    %rdx,%rax
  400ed1:	48 01 c0             	add    %rax,%rax
  400ed4:	48 01 d0             	add    %rdx,%rax
  400ed7:	48 c1 e0 03          	shl    $0x3,%rax
  400edb:	48 01 c8             	add    %rcx,%rax
  400ede:	48 83 c0 10          	add    $0x10,%rax
  400ee2:	f2 0f 10 00          	movsd  (%rax),%xmm0
  400ee6:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  400eea:	8b 45 ec             	mov    -0x14(%rbp),%eax
  400eed:	48 63 d0             	movslq %eax,%rdx
  400ef0:	48 89 d0             	mov    %rdx,%rax
  400ef3:	48 01 c0             	add    %rax,%rax
  400ef6:	48 01 d0             	add    %rdx,%rax
  400ef9:	48 c1 e0 03          	shl    $0x3,%rax
  400efd:	48 01 c8             	add    %rcx,%rax
  400f00:	48 83 c0 10          	add    $0x10,%rax
  400f04:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    COPY_POINT3(newNode->element.normal, X->normal);
  400f08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400f0c:	f2 0f 10 40 60       	movsd  0x60(%rax),%xmm0
  400f11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f15:	f2 0f 11 40 60       	movsd  %xmm0,0x60(%rax)
  400f1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400f1e:	f2 0f 10 40 68       	movsd  0x68(%rax),%xmm0
  400f23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f27:	f2 0f 11 40 68       	movsd  %xmm0,0x68(%rax)
  400f2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  400f30:	f2 0f 10 40 70       	movsd  0x70(%rax),%xmm0
  400f35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f39:	f2 0f 11 40 70       	movsd  %xmm0,0x70(%rax)
newNode->element.intensity = X->intensity;
FUNC_END(light)

FUNC_BEGIN(rectangular)
COPY_OBJECT_FILL(newNode->element.rectangular_fill, X->rectangular_fill);
for (int i = 0; i < 4; i++)
  400f3e:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  400f42:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
  400f46:	0f 8e f8 fe ff ff    	jle    400e44 <append_rectangular+0xfc>
{
    COPY_POINT3(newNode->element.vertices[i], X->vertices[i]);
    COPY_POINT3(newNode->element.normal, X->normal);
}
FUNC_END(rectangular)
  400f4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f50:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  400f57:	00 00 00 00 
  400f5b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400f5f:	48 8b 00             	mov    (%rax),%rax
  400f62:	48 85 c0             	test   %rax,%rax
  400f65:	75 0d                	jne    400f74 <append_rectangular+0x22c>
  400f67:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400f6b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  400f6f:	48 89 10             	mov    %rdx,(%rax)
  400f72:	eb 3b                	jmp    400faf <append_rectangular+0x267>
  400f74:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  400f78:	48 8b 00             	mov    (%rax),%rax
  400f7b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400f7f:	eb 0f                	jmp    400f90 <append_rectangular+0x248>
  400f81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400f85:	48 8b 80 c0 00 00 00 	mov    0xc0(%rax),%rax
  400f8c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400f90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400f94:	48 8b 80 c0 00 00 00 	mov    0xc0(%rax),%rax
  400f9b:	48 85 c0             	test   %rax,%rax
  400f9e:	75 e1                	jne    400f81 <append_rectangular+0x239>
  400fa0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400fa4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  400fa8:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
  400faf:	90                   	nop
  400fb0:	c9                   	leaveq 
  400fb1:	c3                   	retq   

0000000000400fb2 <delete_rectangular_list>:
  400fb2:	55                   	push   %rbp
  400fb3:	48 89 e5             	mov    %rsp,%rbp
  400fb6:	48 83 ec 20          	sub    $0x20,%rsp
  400fba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400fbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400fc2:	48 8b 00             	mov    (%rax),%rax
  400fc5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400fc9:	eb 23                	jmp    400fee <delete_rectangular_list+0x3c>
  400fcb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400fcf:	48 8b 80 c0 00 00 00 	mov    0xc0(%rax),%rax
  400fd6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  400fda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400fde:	48 89 c7             	mov    %rax,%rdi
  400fe1:	e8 ca f9 ff ff       	callq  4009b0 <free@plt>
  400fe6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400fea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  400fee:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  400ff3:	75 d6                	jne    400fcb <delete_rectangular_list+0x19>
  400ff5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400ff9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  401000:	90                   	nop
  401001:	c9                   	leaveq 
  401002:	c3                   	retq   

0000000000401003 <append_sphere>:

FUNC_BEGIN(sphere)
  401003:	55                   	push   %rbp
  401004:	48 89 e5             	mov    %rsp,%rbp
  401007:	48 83 ec 20          	sub    $0x20,%rsp
  40100b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40100f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  401013:	bf 70 00 00 00       	mov    $0x70,%edi
  401018:	e8 73 fa ff ff       	callq  400a90 <malloc@plt>
  40101d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
COPY_OBJECT_FILL(newNode->element.sphere_fill, X->sphere_fill);
  401021:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401025:	f2 0f 10 40 20       	movsd  0x20(%rax),%xmm0
  40102a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40102e:	f2 0f 11 40 20       	movsd  %xmm0,0x20(%rax)
  401033:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401037:	f2 0f 10 40 28       	movsd  0x28(%rax),%xmm0
  40103c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401040:	f2 0f 11 40 28       	movsd  %xmm0,0x28(%rax)
  401045:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401049:	f2 0f 10 40 30       	movsd  0x30(%rax),%xmm0
  40104e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401052:	f2 0f 11 40 30       	movsd  %xmm0,0x30(%rax)
  401057:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40105b:	f2 0f 10 40 38       	movsd  0x38(%rax),%xmm0
  401060:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401064:	f2 0f 11 40 38       	movsd  %xmm0,0x38(%rax)
  401069:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40106d:	f2 0f 10 40 40       	movsd  0x40(%rax),%xmm0
  401072:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401076:	f2 0f 11 40 40       	movsd  %xmm0,0x40(%rax)
  40107b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40107f:	f2 0f 10 40 50       	movsd  0x50(%rax),%xmm0
  401084:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401088:	f2 0f 11 40 50       	movsd  %xmm0,0x50(%rax)
  40108d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401091:	f2 0f 10 40 60       	movsd  0x60(%rax),%xmm0
  401096:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40109a:	f2 0f 11 40 60       	movsd  %xmm0,0x60(%rax)
  40109f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4010a3:	f2 0f 10 40 48       	movsd  0x48(%rax),%xmm0
  4010a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010ac:	f2 0f 11 40 48       	movsd  %xmm0,0x48(%rax)
  4010b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4010b5:	f2 0f 10 40 58       	movsd  0x58(%rax),%xmm0
  4010ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010be:	f2 0f 11 40 58       	movsd  %xmm0,0x58(%rax)
newNode->element.radius = X->radius;
  4010c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4010c7:	f2 0f 10 40 18       	movsd  0x18(%rax),%xmm0
  4010cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010d0:	f2 0f 11 40 18       	movsd  %xmm0,0x18(%rax)
COPY_POINT3(newNode->element.center, X->center);
  4010d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4010d9:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4010dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010e1:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  4010e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4010e9:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
  4010ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010f2:	f2 0f 11 40 08       	movsd  %xmm0,0x8(%rax)
  4010f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4010fb:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
  401100:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401104:	f2 0f 11 40 10       	movsd  %xmm0,0x10(%rax)
FUNC_END(sphere)
  401109:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40110d:	48 c7 40 68 00 00 00 	movq   $0x0,0x68(%rax)
  401114:	00 
  401115:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401119:	48 8b 00             	mov    (%rax),%rax
  40111c:	48 85 c0             	test   %rax,%rax
  40111f:	75 0d                	jne    40112e <append_sphere+0x12b>
  401121:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401125:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  401129:	48 89 10             	mov    %rdx,(%rax)
  40112c:	eb 32                	jmp    401160 <append_sphere+0x15d>
  40112e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401132:	48 8b 00             	mov    (%rax),%rax
  401135:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  401139:	eb 0c                	jmp    401147 <append_sphere+0x144>
  40113b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40113f:	48 8b 40 68          	mov    0x68(%rax),%rax
  401143:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  401147:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40114b:	48 8b 40 68          	mov    0x68(%rax),%rax
  40114f:	48 85 c0             	test   %rax,%rax
  401152:	75 e7                	jne    40113b <append_sphere+0x138>
  401154:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401158:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40115c:	48 89 50 68          	mov    %rdx,0x68(%rax)
  401160:	90                   	nop
  401161:	c9                   	leaveq 
  401162:	c3                   	retq   

0000000000401163 <delete_sphere_list>:
  401163:	55                   	push   %rbp
  401164:	48 89 e5             	mov    %rsp,%rbp
  401167:	48 83 ec 20          	sub    $0x20,%rsp
  40116b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40116f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401173:	48 8b 00             	mov    (%rax),%rax
  401176:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40117a:	eb 20                	jmp    40119c <delete_sphere_list+0x39>
  40117c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401180:	48 8b 40 68          	mov    0x68(%rax),%rax
  401184:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  401188:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40118c:	48 89 c7             	mov    %rax,%rdi
  40118f:	e8 1c f8 ff ff       	callq  4009b0 <free@plt>
  401194:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401198:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  40119c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  4011a1:	75 d9                	jne    40117c <delete_sphere_list+0x19>
  4011a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4011a7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4011ae:	90                   	nop
  4011af:	c9                   	leaveq 
  4011b0:	c3                   	retq   

00000000004011b1 <raySphereIntersection>:
 */
static int raySphereIntersection(const point3 ray_e,
                                 const point3 ray_d,
                                 const sphere *sph,
                                 intersection *ip, double *t1)
{
  4011b1:	55                   	push   %rbp
  4011b2:	48 89 e5             	mov    %rsp,%rbp
  4011b5:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
  4011bc:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  4011c3:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
  4011ca:	48 89 95 e8 fe ff ff 	mov    %rdx,-0x118(%rbp)
  4011d1:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
  4011d8:	4c 89 85 d8 fe ff ff 	mov    %r8,-0x128(%rbp)
  4011df:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4011e6:	00 00 
  4011e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4011ec:	31 c0                	xor    %eax,%eax
    //idea: S = (U.T)+-sqrt((U.T)^2 -T^2 + r^2)
    //U: ray_d, T = Pc - L = sph->center - ray_e
    point3 l;
    subtract_vector(sph->center, ray_e, l); // T = Pc - L
  4011ee:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  4011f5:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  4011fc:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  401203:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  401207:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40120b:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  40120f:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  401216:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40121a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40121e:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401222:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401226:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40122a:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  40122e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  401232:	48 83 c0 08          	add    $0x8,%rax
  401236:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  40123d:	48 83 c2 08          	add    $0x8,%rdx
  401241:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  401245:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  401249:	48 83 c2 08          	add    $0x8,%rdx
  40124d:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  401251:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401255:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  401259:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40125d:	48 83 c0 10          	add    $0x10,%rax
  401261:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  401268:	48 83 c2 10          	add    $0x10,%rdx
  40126c:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  401270:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  401274:	48 83 c2 10          	add    $0x10,%rdx
  401278:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  40127c:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401280:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  401284:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  401288:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  40128f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  401296:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  40129d:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4012a4:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4012a8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4012af:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4012b3:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  4012b7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4012be:	48 83 c0 08          	add    $0x8,%rax
  4012c2:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4012c6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4012cd:	48 83 c0 08          	add    $0x8,%rax
  4012d1:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4012d5:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4012d9:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  4012dd:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4012e4:	48 83 c0 10          	add    $0x10,%rax
  4012e8:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4012ec:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4012f3:	48 83 c0 10          	add    $0x10,%rax
  4012f7:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4012fb:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4012ff:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    double s = dot_product(l, ray_d); // U(ray_d) . T
  401303:	f2 0f 11 85 20 ff ff 	movsd  %xmm0,-0xe0(%rbp)
  40130a:	ff 
  40130b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40130f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  401316:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40131a:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  401321:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  401328:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40132c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  401333:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401337:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  40133b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  401342:	48 83 c0 08          	add    $0x8,%rax
  401346:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40134a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  401351:	48 83 c0 08          	add    $0x8,%rax
  401355:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401359:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  40135d:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  401361:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  401368:	48 83 c0 10          	add    $0x10,%rax
  40136c:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401370:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  401377:	48 83 c0 10          	add    $0x10,%rax
  40137b:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40137f:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  401383:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    double l2 = dot_product(l, l); // T^2
  401387:	f2 0f 11 85 30 ff ff 	movsd  %xmm0,-0xd0(%rbp)
  40138e:	ff 
    double r2 = sph->radius * sph->radius; // r^2
  40138f:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  401396:	f2 0f 10 48 18       	movsd  0x18(%rax),%xmm1
  40139b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  4013a2:	f2 0f 10 40 18       	movsd  0x18(%rax),%xmm0
  4013a7:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  4013ab:	f2 0f 11 85 38 ff ff 	movsd  %xmm0,-0xc8(%rbp)
  4013b2:	ff 
    
    if (s < 0 && l2 > r2)
  4013b3:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4013b7:	66 0f 2e 85 20 ff ff 	ucomisd -0xe0(%rbp),%xmm0
  4013be:	ff 
  4013bf:	76 1c                	jbe    4013dd <raySphereIntersection+0x22c>
  4013c1:	f2 0f 10 85 30 ff ff 	movsd  -0xd0(%rbp),%xmm0
  4013c8:	ff 
  4013c9:	66 0f 2e 85 38 ff ff 	ucomisd -0xc8(%rbp),%xmm0
  4013d0:	ff 
  4013d1:	76 0a                	jbe    4013dd <raySphereIntersection+0x22c>
        return 0;
  4013d3:	b8 00 00 00 00       	mov    $0x0,%eax
  4013d8:	e9 69 04 00 00       	jmpq   401846 <raySphereIntersection+0x695>
    float m2 = l2 - s * s; // T^2 - (U.T)^2
  4013dd:	f2 0f 10 85 20 ff ff 	movsd  -0xe0(%rbp),%xmm0
  4013e4:	ff 
  4013e5:	f2 0f 59 85 20 ff ff 	mulsd  -0xe0(%rbp),%xmm0
  4013ec:	ff 
  4013ed:	f2 0f 10 8d 30 ff ff 	movsd  -0xd0(%rbp),%xmm1
  4013f4:	ff 
  4013f5:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
  4013f9:	66 0f 28 c1          	movapd %xmm1,%xmm0
  4013fd:	f2 0f 5a d8          	cvtsd2ss %xmm0,%xmm3
  401401:	f3 0f 11 9d 08 ff ff 	movss  %xmm3,-0xf8(%rbp)
  401408:	ff 
    if (m2 > r2)  // no root
  401409:	f3 0f 5a 85 08 ff ff 	cvtss2sd -0xf8(%rbp),%xmm0
  401410:	ff 
  401411:	66 0f 2e 85 38 ff ff 	ucomisd -0xc8(%rbp),%xmm0
  401418:	ff 
  401419:	76 0a                	jbe    401425 <raySphereIntersection+0x274>
        return 0;
  40141b:	b8 00 00 00 00       	mov    $0x0,%eax
  401420:	e9 21 04 00 00       	jmpq   401846 <raySphereIntersection+0x695>
    float q = sqrt(r2 - m2); // sqrt(r^2 - (T^2 - (U.T)))
  401425:	f3 0f 5a 85 08 ff ff 	cvtss2sd -0xf8(%rbp),%xmm0
  40142c:	ff 
  40142d:	f2 0f 10 8d 38 ff ff 	movsd  -0xc8(%rbp),%xmm1
  401434:	ff 
  401435:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
  401439:	66 0f 28 c1          	movapd %xmm1,%xmm0
  40143d:	e8 9e f6 ff ff       	callq  400ae0 <sqrt@plt>
  401442:	f2 0f 5a e0          	cvtsd2ss %xmm0,%xmm4
  401446:	f3 0f 11 a5 0c ff ff 	movss  %xmm4,-0xf4(%rbp)
  40144d:	ff 
    *t1 = (l2 > r2) ? (s - q) : (s + q); // S = (U.T) +- sqrt(...)
  40144e:	f2 0f 10 85 30 ff ff 	movsd  -0xd0(%rbp),%xmm0
  401455:	ff 
  401456:	66 0f 2e 85 38 ff ff 	ucomisd -0xc8(%rbp),%xmm0
  40145d:	ff 
  40145e:	76 1a                	jbe    40147a <raySphereIntersection+0x2c9>
  401460:	f3 0f 5a 85 0c ff ff 	cvtss2sd -0xf4(%rbp),%xmm0
  401467:	ff 
  401468:	f2 0f 10 8d 20 ff ff 	movsd  -0xe0(%rbp),%xmm1
  40146f:	ff 
  401470:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
  401474:	66 0f 28 c1          	movapd %xmm1,%xmm0
  401478:	eb 10                	jmp    40148a <raySphereIntersection+0x2d9>
  40147a:	f3 0f 5a 85 0c ff ff 	cvtss2sd -0xf4(%rbp),%xmm0
  401481:	ff 
  401482:	f2 0f 58 85 20 ff ff 	addsd  -0xe0(%rbp),%xmm0
  401489:	ff 
  40148a:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  401491:	f2 0f 11 00          	movsd  %xmm0,(%rax)

    /* p = e + t1 * d */
    multiply_vector(ray_d, *t1, ip->point);
  401495:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  40149c:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  4014a3:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4014a7:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  4014ae:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  4014b5:	f2 0f 11 45 c0       	movsd  %xmm0,-0x40(%rbp)
  4014ba:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  4014be:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  4014c5:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4014c9:	f2 0f 59 45 c0       	mulsd  -0x40(%rbp),%xmm0
  4014ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4014d2:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  4014d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4014da:	48 83 c0 08          	add    $0x8,%rax
  4014de:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  4014e5:	48 83 c2 08          	add    $0x8,%rdx
  4014e9:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4014ed:	f2 0f 59 45 c0       	mulsd  -0x40(%rbp),%xmm0
  4014f2:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  4014f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4014fa:	48 83 c0 10          	add    $0x10,%rax
  4014fe:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  401505:	48 83 c2 10          	add    $0x10,%rdx
  401509:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40150d:	f2 0f 59 45 c0       	mulsd  -0x40(%rbp),%xmm0
  401512:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    add_vector(ray_e, ip->point, ip->point);
  401516:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  40151d:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  401524:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
  40152b:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  401532:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  401536:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  40153a:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  401541:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401545:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401549:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40154d:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  401551:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401555:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  401559:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  40155d:	48 83 c0 08          	add    $0x8,%rax
  401561:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  401568:	48 83 c2 08          	add    $0x8,%rdx
  40156c:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  401570:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  401574:	48 83 c2 08          	add    $0x8,%rdx
  401578:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40157c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  401580:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  401584:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401588:	48 83 c0 10          	add    $0x10,%rax
  40158c:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  401593:	48 83 c2 10          	add    $0x10,%rdx
  401597:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  40159b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  40159f:	48 83 c2 10          	add    $0x10,%rdx
  4015a3:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4015a7:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4015ab:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    subtract_vector(ip->point, sph->center, ip->normal);
  4015af:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4015b6:	48 8d 48 18          	lea    0x18(%rax),%rcx
  4015ba:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  4015c1:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  4015c8:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  4015cf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4015d3:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  4015d7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  4015de:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4015e2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4015e6:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4015ea:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4015ee:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4015f2:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  4015f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4015fa:	48 83 c0 08          	add    $0x8,%rax
  4015fe:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  401605:	48 83 c2 08          	add    $0x8,%rdx
  401609:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40160d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  401611:	48 83 c2 08          	add    $0x8,%rdx
  401615:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  401619:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  40161d:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  401621:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401625:	48 83 c0 10          	add    $0x10,%rax
  401629:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  401630:	48 83 c2 10          	add    $0x10,%rdx
  401634:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  401638:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  40163c:	48 83 c2 10          	add    $0x10,%rdx
  401640:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  401644:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401648:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    normalize(ip->normal);
  40164c:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  401653:	48 83 c0 18          	add    $0x18,%rax
  401657:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)


static inline __attribute__((always_inline))
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  40165e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401665:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401669:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401670:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401674:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  401678:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40167f:	48 83 c0 08          	add    $0x8,%rax
  401683:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401687:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40168e:	48 83 c0 08          	add    $0x8,%rax
  401692:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401696:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  40169a:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  40169e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4016a5:	48 83 c0 10          	add    $0x10,%rax
  4016a9:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4016ad:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4016b4:	48 83 c0 10          	add    $0x10,%rax
  4016b8:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4016bc:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4016c0:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4016c4:	e8 17 f4 ff ff       	callq  400ae0 <sqrt@plt>
  4016c9:	66 48 0f 7e c0       	movq   %xmm0,%rax
  4016ce:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
  4016d2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4016d9:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4016dd:	f2 0f 5e 45 98       	divsd  -0x68(%rbp),%xmm0
  4016e2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4016e9:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[1] /= d;
  4016ed:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4016f4:	48 83 c0 08          	add    $0x8,%rax
  4016f8:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  4016ff:	48 83 c2 08          	add    $0x8,%rdx
  401703:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  401707:	f2 0f 5e 45 98       	divsd  -0x68(%rbp),%xmm0
  40170c:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[2] /= d;
  401710:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401717:	48 83 c0 10          	add    $0x10,%rax
  40171b:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  401722:	48 83 c2 10          	add    $0x10,%rdx
  401726:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40172a:	f2 0f 5e 45 98       	divsd  -0x68(%rbp),%xmm0
  40172f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    if (dot_product(ip->normal, ray_d) > 0.0)
  401733:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  40173a:	48 83 c0 18          	add    $0x18,%rax
  40173e:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  401745:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40174c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  401750:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  401757:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40175b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40175f:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401763:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  401767:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  40176e:	48 83 c0 08          	add    $0x8,%rax
  401772:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401776:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40177a:	48 83 c0 08          	add    $0x8,%rax
  40177e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401782:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  401786:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  40178a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  401791:	48 83 c0 10          	add    $0x10,%rax
  401795:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401799:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  40179d:	48 83 c0 10          	add    $0x10,%rax
  4017a1:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4017a5:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4017a9:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4017ad:	66 0f ef c9          	pxor   %xmm1,%xmm1
  4017b1:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  4017b5:	0f 86 86 00 00 00    	jbe    401841 <raySphereIntersection+0x690>
        multiply_vector(ip->normal, -1, ip->normal);
  4017bb:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4017c2:	48 83 c0 18          	add    $0x18,%rax
  4017c6:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  4017cd:	48 83 c2 18          	add    $0x18,%rdx
  4017d1:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  4017d8:	f2 0f 10 05 10 52 00 	movsd  0x5210(%rip),%xmm0        # 4069f0 <_IO_stdin_used+0x10>
  4017df:	00 
  4017e0:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
  4017e5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  4017e9:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  4017f0:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4017f4:	f2 0f 59 45 d0       	mulsd  -0x30(%rbp),%xmm0
  4017f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4017fd:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  401801:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401805:	48 83 c0 08          	add    $0x8,%rax
  401809:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  401810:	48 83 c2 08          	add    $0x8,%rdx
  401814:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  401818:	f2 0f 59 45 d0       	mulsd  -0x30(%rbp),%xmm0
  40181d:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  401821:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401825:	48 83 c0 10          	add    $0x10,%rax
  401829:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  401830:	48 83 c2 10          	add    $0x10,%rdx
  401834:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  401838:	f2 0f 59 45 d0       	mulsd  -0x30(%rbp),%xmm0
  40183d:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    return 1;
  401841:	b8 01 00 00 00       	mov    $0x1,%eax
}
  401846:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  40184a:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  401851:	00 00 
  401853:	74 05                	je     40185a <raySphereIntersection+0x6a9>
  401855:	e8 a6 f1 ff ff       	callq  400a00 <__stack_chk_fail@plt>
  40185a:	c9                   	leaveq 
  40185b:	c3                   	retq   

000000000040185c <rayRectangularIntersection>:
/* @return 1 means hit, otherwise 0; */
static int rayRectangularIntersection(const point3 ray_e,
                                      const point3 ray_d,
                                      rectangular *rec,
                                      intersection *ip, double *t1)
{
  40185c:	55                   	push   %rbp
  40185d:	48 89 e5             	mov    %rsp,%rbp
  401860:	48 81 ec 00 03 00 00 	sub    $0x300,%rsp
  401867:	48 89 bd 28 fd ff ff 	mov    %rdi,-0x2d8(%rbp)
  40186e:	48 89 b5 20 fd ff ff 	mov    %rsi,-0x2e0(%rbp)
  401875:	48 89 95 18 fd ff ff 	mov    %rdx,-0x2e8(%rbp)
  40187c:	48 89 8d 10 fd ff ff 	mov    %rcx,-0x2f0(%rbp)
  401883:	4c 89 85 08 fd ff ff 	mov    %r8,-0x2f8(%rbp)
  40188a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  401891:	00 00 
  401893:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  401897:	31 c0                	xor    %eax,%eax
    point3 e01, e03, p;
    subtract_vector(rec->vertices[1], rec->vertices[0], e01);
  401899:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  4018a0:	48 8b 95 18 fd ff ff 	mov    -0x2e8(%rbp),%rdx
  4018a7:	48 83 c2 18          	add    $0x18,%rdx
  4018ab:	48 89 95 40 fd ff ff 	mov    %rdx,-0x2c0(%rbp)
  4018b2:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  4018b9:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  4018c0:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  4018c7:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
  4018ce:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4018d2:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  4018d9:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4018dd:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4018e1:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  4018e8:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  4018ec:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  4018f3:	48 83 c0 08          	add    $0x8,%rax
  4018f7:	48 8b 95 40 fd ff ff 	mov    -0x2c0(%rbp),%rdx
  4018fe:	48 83 c2 08          	add    $0x8,%rdx
  401902:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  401906:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  40190d:	48 83 c2 08          	add    $0x8,%rdx
  401911:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  401915:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401919:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  40191d:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  401924:	48 83 c0 10          	add    $0x10,%rax
  401928:	48 8b 95 40 fd ff ff 	mov    -0x2c0(%rbp),%rdx
  40192f:	48 83 c2 10          	add    $0x10,%rdx
  401933:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  401937:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  40193e:	48 83 c2 10          	add    $0x10,%rdx
  401942:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  401946:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  40194a:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    subtract_vector(rec->vertices[3], rec->vertices[0], e03);
  40194e:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  401955:	48 8b 95 18 fd ff ff 	mov    -0x2e8(%rbp),%rdx
  40195c:	48 83 c2 48          	add    $0x48,%rdx
  401960:	48 89 95 48 fd ff ff 	mov    %rdx,-0x2b8(%rbp)
  401967:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
  40196e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  401975:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  40197c:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
  401983:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401987:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
  40198e:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401992:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401996:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  40199d:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  4019a1:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4019a8:	48 83 c0 08          	add    $0x8,%rax
  4019ac:	48 8b 95 48 fd ff ff 	mov    -0x2b8(%rbp),%rdx
  4019b3:	48 83 c2 08          	add    $0x8,%rdx
  4019b7:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4019bb:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  4019c2:	48 83 c2 08          	add    $0x8,%rdx
  4019c6:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4019ca:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4019ce:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  4019d2:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4019d9:	48 83 c0 10          	add    $0x10,%rax
  4019dd:	48 8b 95 48 fd ff ff 	mov    -0x2b8(%rbp),%rdx
  4019e4:	48 83 c2 10          	add    $0x10,%rdx
  4019e8:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4019ec:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  4019f3:	48 83 c2 10          	add    $0x10,%rdx
  4019f7:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4019fb:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4019ff:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  401a03:	48 8b 85 20 fd ff ff 	mov    -0x2e0(%rbp),%rax
  401a0a:	48 89 85 50 fd ff ff 	mov    %rax,-0x2b0(%rbp)
  401a11:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  401a18:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  401a1f:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  401a26:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
}

static inline __attribute__((always_inline))
void cross_product(const double *v1, const double *v2, double *out)
{
    out[0] = v1[1] * v2[2] - v1[2] * v2[1];
  401a2d:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  401a34:	48 83 c0 08          	add    $0x8,%rax
  401a38:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401a3c:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  401a43:	48 83 c0 10          	add    $0x10,%rax
  401a47:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401a4b:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  401a4f:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  401a56:	48 83 c0 10          	add    $0x10,%rax
  401a5a:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401a5e:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  401a65:	48 83 c0 08          	add    $0x8,%rax
  401a69:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401a6d:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  401a71:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401a75:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  401a7c:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = v1[2] * v2[0] - v1[0] * v2[2];
  401a80:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  401a87:	48 8d 50 08          	lea    0x8(%rax),%rdx
  401a8b:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  401a92:	48 83 c0 10          	add    $0x10,%rax
  401a96:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401a9a:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  401aa1:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401aa5:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  401aa9:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  401ab0:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401ab4:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  401abb:	48 83 c0 10          	add    $0x10,%rax
  401abf:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401ac3:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  401ac7:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401acb:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
    out[2] = v1[0] * v2[1] - v1[1] * v2[0];
  401acf:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  401ad6:	48 8d 50 10          	lea    0x10(%rax),%rdx
  401ada:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  401ae1:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401ae5:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  401aec:	48 83 c0 08          	add    $0x8,%rax
  401af0:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401af4:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  401af8:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  401aff:	48 83 c0 08          	add    $0x8,%rax
  401b03:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401b07:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  401b0e:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401b12:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  401b16:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401b1a:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
  401b1e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  401b25:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
  401b2c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  401b33:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  401b3a:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  401b41:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401b45:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  401b4c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401b50:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  401b54:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  401b5b:	48 83 c0 08          	add    $0x8,%rax
  401b5f:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401b63:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  401b6a:	48 83 c0 08          	add    $0x8,%rax
  401b6e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401b72:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  401b76:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  401b7a:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  401b81:	48 83 c0 10          	add    $0x10,%rax
  401b85:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401b89:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  401b90:	48 83 c0 10          	add    $0x10,%rax
  401b94:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401b98:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  401b9c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0

    cross_product(ray_d, e03, p); // find the normal p:N

    double det = dot_product(e01, p); // N.P
  401ba0:	f2 0f 11 85 58 fd ff 	movsd  %xmm0,-0x2a8(%rbp)
  401ba7:	ff 

    /* Reject rays orthagonal to the normal vector.
     * I.e. rays parallell to the plane.
     */
    if (det < 1e-4)
  401ba8:	f2 0f 10 05 48 4e 00 	movsd  0x4e48(%rip),%xmm0        # 4069f8 <_IO_stdin_used+0x18>
  401baf:	00 
  401bb0:	66 0f 2e 85 58 fd ff 	ucomisd -0x2a8(%rbp),%xmm0
  401bb7:	ff 
  401bb8:	76 0a                	jbe    401bc4 <rayRectangularIntersection+0x368>
        return 0;
  401bba:	b8 00 00 00 00       	mov    $0x0,%eax
  401bbf:	e9 f3 0d 00 00       	jmpq   4029b7 <rayRectangularIntersection+0x115b>

    double inv_det = 1.0 / det;
  401bc4:	f2 0f 10 05 34 4e 00 	movsd  0x4e34(%rip),%xmm0        # 406a00 <_IO_stdin_used+0x20>
  401bcb:	00 
  401bcc:	f2 0f 5e 85 58 fd ff 	divsd  -0x2a8(%rbp),%xmm0
  401bd3:	ff 
  401bd4:	f2 0f 11 85 60 fd ff 	movsd  %xmm0,-0x2a0(%rbp)
  401bdb:	ff 

    point3 s;
    subtract_vector(ray_e, rec->vertices[0], s);
  401bdc:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  401be3:	48 8b 95 28 fd ff ff 	mov    -0x2d8(%rbp),%rdx
  401bea:	48 89 95 70 fd ff ff 	mov    %rdx,-0x290(%rbp)
  401bf1:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
  401bf8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  401bfc:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  401c03:	48 8b 85 70 fd ff ff 	mov    -0x290(%rbp),%rax
  401c0a:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401c0e:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  401c15:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401c19:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401c1d:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  401c24:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  401c28:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  401c2f:	48 83 c0 08          	add    $0x8,%rax
  401c33:	48 8b 95 70 fd ff ff 	mov    -0x290(%rbp),%rdx
  401c3a:	48 83 c2 08          	add    $0x8,%rdx
  401c3e:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  401c42:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
  401c49:	48 83 c2 08          	add    $0x8,%rdx
  401c4d:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  401c51:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401c55:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  401c59:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  401c60:	48 83 c0 10          	add    $0x10,%rax
  401c64:	48 8b 95 70 fd ff ff 	mov    -0x290(%rbp),%rdx
  401c6b:	48 83 c2 10          	add    $0x10,%rdx
  401c6f:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  401c73:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
  401c7a:	48 83 c2 10          	add    $0x10,%rdx
  401c7e:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  401c82:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401c86:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  401c8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  401c8e:	48 89 85 38 fd ff ff 	mov    %rax,-0x2c8(%rbp)
  401c95:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  401c9c:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  401ca3:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
  401caa:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401cae:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  401cb5:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401cb9:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  401cbd:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
  401cc4:	48 83 c0 08          	add    $0x8,%rax
  401cc8:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401ccc:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  401cd3:	48 83 c0 08          	add    $0x8,%rax
  401cd7:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401cdb:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  401cdf:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  401ce3:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
  401cea:	48 83 c0 10          	add    $0x10,%rax
  401cee:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401cf2:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  401cf9:	48 83 c0 10          	add    $0x10,%rax
  401cfd:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401d01:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  401d05:	f2 0f 58 c1          	addsd  %xmm1,%xmm0

    double alpha = inv_det * dot_product(s, p);
  401d09:	f2 0f 59 85 60 fd ff 	mulsd  -0x2a0(%rbp),%xmm0
  401d10:	ff 
  401d11:	f2 0f 11 85 78 fd ff 	movsd  %xmm0,-0x288(%rbp)
  401d18:	ff 

    if ((alpha > 1.0) || (alpha < 0.0))
  401d19:	f2 0f 10 85 78 fd ff 	movsd  -0x288(%rbp),%xmm0
  401d20:	ff 
  401d21:	f2 0f 10 0d d7 4c 00 	movsd  0x4cd7(%rip),%xmm1        # 406a00 <_IO_stdin_used+0x20>
  401d28:	00 
  401d29:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  401d2d:	77 0e                	ja     401d3d <rayRectangularIntersection+0x4e1>
  401d2f:	66 0f ef c0          	pxor   %xmm0,%xmm0
  401d33:	66 0f 2e 85 78 fd ff 	ucomisd -0x288(%rbp),%xmm0
  401d3a:	ff 
  401d3b:	76 0a                	jbe    401d47 <rayRectangularIntersection+0x4eb>
        return 0;
  401d3d:	b8 00 00 00 00       	mov    $0x0,%eax
  401d42:	e9 70 0c 00 00       	jmpq   4029b7 <rayRectangularIntersection+0x115b>
  401d47:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  401d4b:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
  401d52:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  401d59:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  401d60:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  401d64:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
}

static inline __attribute__((always_inline))
void cross_product(const double *v1, const double *v2, double *out)
{
    out[0] = v1[1] * v2[2] - v1[2] * v2[1];
  401d6b:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  401d72:	48 83 c0 08          	add    $0x8,%rax
  401d76:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401d7a:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  401d81:	48 83 c0 10          	add    $0x10,%rax
  401d85:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401d89:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  401d8d:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  401d94:	48 83 c0 10          	add    $0x10,%rax
  401d98:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401d9c:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  401da3:	48 83 c0 08          	add    $0x8,%rax
  401da7:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401dab:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  401daf:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401db3:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  401dba:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = v1[2] * v2[0] - v1[0] * v2[2];
  401dbe:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  401dc5:	48 8d 50 08          	lea    0x8(%rax),%rdx
  401dc9:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  401dd0:	48 83 c0 10          	add    $0x10,%rax
  401dd4:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401dd8:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  401ddf:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401de3:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  401de7:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  401dee:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401df2:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  401df9:	48 83 c0 10          	add    $0x10,%rax
  401dfd:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401e01:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  401e05:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401e09:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
    out[2] = v1[0] * v2[1] - v1[1] * v2[0];
  401e0d:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  401e14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  401e18:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  401e1f:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401e23:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  401e2a:	48 83 c0 08          	add    $0x8,%rax
  401e2e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401e32:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  401e36:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  401e3d:	48 83 c0 08          	add    $0x8,%rax
  401e41:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401e45:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  401e4c:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401e50:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  401e54:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  401e58:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
  401e5c:	48 8b 85 20 fd ff ff 	mov    -0x2e0(%rbp),%rax
  401e63:	48 89 85 68 fd ff ff 	mov    %rax,-0x298(%rbp)
  401e6a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  401e6e:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  401e75:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
  401e7c:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401e80:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  401e87:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401e8b:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  401e8f:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
  401e96:	48 83 c0 08          	add    $0x8,%rax
  401e9a:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401e9e:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  401ea5:	48 83 c0 08          	add    $0x8,%rax
  401ea9:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401ead:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  401eb1:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  401eb5:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
  401ebc:	48 83 c0 10          	add    $0x10,%rax
  401ec0:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401ec4:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  401ecb:	48 83 c0 10          	add    $0x10,%rax
  401ecf:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401ed3:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  401ed7:	f2 0f 58 c1          	addsd  %xmm1,%xmm0

    point3 q;
    cross_product(s, e01, q);

    double beta = inv_det * dot_product(ray_d, q);
  401edb:	f2 0f 59 85 60 fd ff 	mulsd  -0x2a0(%rbp),%xmm0
  401ee2:	ff 
  401ee3:	f2 0f 11 85 90 fd ff 	movsd  %xmm0,-0x270(%rbp)
  401eea:	ff 
    if ((beta > 1.0) || (beta < 0.0))
  401eeb:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  401ef2:	ff 
  401ef3:	f2 0f 10 0d 05 4b 00 	movsd  0x4b05(%rip),%xmm1        # 406a00 <_IO_stdin_used+0x20>
  401efa:	00 
  401efb:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  401eff:	77 0e                	ja     401f0f <rayRectangularIntersection+0x6b3>
  401f01:	66 0f ef c0          	pxor   %xmm0,%xmm0
  401f05:	66 0f 2e 85 90 fd ff 	ucomisd -0x270(%rbp),%xmm0
  401f0c:	ff 
  401f0d:	76 0a                	jbe    401f19 <rayRectangularIntersection+0x6bd>
        return 0;
  401f0f:	b8 00 00 00 00       	mov    $0x0,%eax
  401f14:	e9 9e 0a 00 00       	jmpq   4029b7 <rayRectangularIntersection+0x115b>
  401f19:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  401f20:	48 89 85 80 fd ff ff 	mov    %rax,-0x280(%rbp)
  401f27:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  401f2b:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  401f32:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
  401f39:	f2 0f 10 08          	movsd  (%rax),%xmm1
  401f3d:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  401f44:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401f48:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  401f4c:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
  401f53:	48 83 c0 08          	add    $0x8,%rax
  401f57:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401f5b:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  401f62:	48 83 c0 08          	add    $0x8,%rax
  401f66:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401f6a:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  401f6e:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  401f72:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
  401f79:	48 83 c0 10          	add    $0x10,%rax
  401f7d:	f2 0f 10 10          	movsd  (%rax),%xmm2
  401f81:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  401f88:	48 83 c0 10          	add    $0x10,%rax
  401f8c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  401f90:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  401f94:	f2 0f 58 c1          	addsd  %xmm1,%xmm0

    *t1 = inv_det * dot_product(e03, q);
  401f98:	f2 0f 59 85 60 fd ff 	mulsd  -0x2a0(%rbp),%xmm0
  401f9f:	ff 
  401fa0:	48 8b 85 08 fd ff ff 	mov    -0x2f8(%rbp),%rax
  401fa7:	f2 0f 11 00          	movsd  %xmm0,(%rax)

    if (alpha + beta > 1.0f) {
  401fab:	f2 0f 10 85 78 fd ff 	movsd  -0x288(%rbp),%xmm0
  401fb2:	ff 
  401fb3:	f2 0f 58 85 90 fd ff 	addsd  -0x270(%rbp),%xmm0
  401fba:	ff 
  401fbb:	f2 0f 10 0d 3d 4a 00 	movsd  0x4a3d(%rip),%xmm1        # 406a00 <_IO_stdin_used+0x20>
  401fc2:	00 
  401fc3:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  401fc7:	0f 86 fe 06 00 00    	jbe    4026cb <rayRectangularIntersection+0xe6f>
        /* for the second triangle */
        point3 e23, e21;
        subtract_vector(rec->vertices[3], rec->vertices[2], e23);
  401fcd:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  401fd4:	48 83 c0 30          	add    $0x30,%rax
  401fd8:	48 8b 95 18 fd ff ff 	mov    -0x2e8(%rbp),%rdx
  401fdf:	48 83 c2 48          	add    $0x48,%rdx
  401fe3:	48 89 95 a8 fd ff ff 	mov    %rdx,-0x258(%rbp)
  401fea:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
  401ff1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  401ff5:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  401ffc:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
  402003:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402007:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  40200e:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402012:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  402016:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  40201d:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  402021:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  402028:	48 83 c0 08          	add    $0x8,%rax
  40202c:	48 8b 95 a8 fd ff ff 	mov    -0x258(%rbp),%rdx
  402033:	48 83 c2 08          	add    $0x8,%rdx
  402037:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40203b:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  402042:	48 83 c2 08          	add    $0x8,%rdx
  402046:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  40204a:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  40204e:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  402052:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  402059:	48 83 c0 10          	add    $0x10,%rax
  40205d:	48 8b 95 a8 fd ff ff 	mov    -0x258(%rbp),%rdx
  402064:	48 83 c2 10          	add    $0x10,%rdx
  402068:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40206c:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  402073:	48 83 c2 10          	add    $0x10,%rdx
  402077:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  40207b:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  40207f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
        subtract_vector(rec->vertices[1], rec->vertices[2], e21);
  402083:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  40208a:	48 83 c0 30          	add    $0x30,%rax
  40208e:	48 8b 95 18 fd ff ff 	mov    -0x2e8(%rbp),%rdx
  402095:	48 83 c2 18          	add    $0x18,%rdx
  402099:	48 89 95 b0 fd ff ff 	mov    %rdx,-0x250(%rbp)
  4020a0:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
  4020a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4020ab:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  4020b2:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  4020b9:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4020bd:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  4020c4:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4020c8:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4020cc:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  4020d3:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  4020d7:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  4020de:	48 83 c0 08          	add    $0x8,%rax
  4020e2:	48 8b 95 b0 fd ff ff 	mov    -0x250(%rbp),%rdx
  4020e9:	48 83 c2 08          	add    $0x8,%rdx
  4020ed:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4020f1:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  4020f8:	48 83 c2 08          	add    $0x8,%rdx
  4020fc:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  402100:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  402104:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  402108:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  40210f:	48 83 c0 10          	add    $0x10,%rax
  402113:	48 8b 95 b0 fd ff ff 	mov    -0x250(%rbp),%rdx
  40211a:	48 83 c2 10          	add    $0x10,%rdx
  40211e:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402122:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  402129:	48 83 c2 10          	add    $0x10,%rdx
  40212d:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  402131:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  402135:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  402139:	48 8b 85 20 fd ff ff 	mov    -0x2e0(%rbp),%rax
  402140:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
  402147:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40214b:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
  402152:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  402159:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
}

static inline __attribute__((always_inline))
void cross_product(const double *v1, const double *v2, double *out)
{
    out[0] = v1[1] * v2[2] - v1[2] * v2[1];
  402160:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
  402167:	48 83 c0 08          	add    $0x8,%rax
  40216b:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40216f:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  402176:	48 83 c0 10          	add    $0x10,%rax
  40217a:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40217e:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  402182:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
  402189:	48 83 c0 10          	add    $0x10,%rax
  40218d:	f2 0f 10 10          	movsd  (%rax),%xmm2
  402191:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  402198:	48 83 c0 08          	add    $0x8,%rax
  40219c:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4021a0:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  4021a4:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4021a8:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  4021af:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = v1[2] * v2[0] - v1[0] * v2[2];
  4021b3:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  4021ba:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4021be:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
  4021c5:	48 83 c0 10          	add    $0x10,%rax
  4021c9:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4021cd:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  4021d4:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4021d8:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  4021dc:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
  4021e3:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4021e7:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  4021ee:	48 83 c0 10          	add    $0x10,%rax
  4021f2:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4021f6:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  4021fa:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4021fe:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
    out[2] = v1[0] * v2[1] - v1[1] * v2[0];
  402202:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402209:	48 8d 50 10          	lea    0x10(%rax),%rdx
  40220d:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
  402214:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402218:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  40221f:	48 83 c0 08          	add    $0x8,%rax
  402223:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402227:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  40222b:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
  402232:	48 83 c0 08          	add    $0x8,%rax
  402236:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40223a:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  402241:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402245:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  402249:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  40224d:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
  402251:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  402255:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
  40225c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  402263:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  40226a:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  402271:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402275:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  40227c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402280:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  402284:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  40228b:	48 83 c0 08          	add    $0x8,%rax
  40228f:	f2 0f 10 10          	movsd  (%rax),%xmm2
  402293:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  40229a:	48 83 c0 08          	add    $0x8,%rax
  40229e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4022a2:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4022a6:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  4022aa:	48 8b 85 98 fd ff ff 	mov    -0x268(%rbp),%rax
  4022b1:	48 83 c0 10          	add    $0x10,%rax
  4022b5:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4022b9:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  4022c0:	48 83 c0 10          	add    $0x10,%rax
  4022c4:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4022c8:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4022cc:	f2 0f 58 c1          	addsd  %xmm1,%xmm0

        cross_product(ray_d, e21, p);

        det = dot_product(e23, p);
  4022d0:	f2 0f 11 85 58 fd ff 	movsd  %xmm0,-0x2a8(%rbp)
  4022d7:	ff 

        if (det < 1e-4)
  4022d8:	f2 0f 10 05 18 47 00 	movsd  0x4718(%rip),%xmm0        # 4069f8 <_IO_stdin_used+0x18>
  4022df:	00 
  4022e0:	66 0f 2e 85 58 fd ff 	ucomisd -0x2a8(%rbp),%xmm0
  4022e7:	ff 
  4022e8:	76 0a                	jbe    4022f4 <rayRectangularIntersection+0xa98>
            return 0;
  4022ea:	b8 00 00 00 00       	mov    $0x0,%eax
  4022ef:	e9 c3 06 00 00       	jmpq   4029b7 <rayRectangularIntersection+0x115b>

        inv_det = 1.0 / det;
  4022f4:	f2 0f 10 05 04 47 00 	movsd  0x4704(%rip),%xmm0        # 406a00 <_IO_stdin_used+0x20>
  4022fb:	00 
  4022fc:	f2 0f 5e 85 58 fd ff 	divsd  -0x2a8(%rbp),%xmm0
  402303:	ff 
  402304:	f2 0f 11 85 60 fd ff 	movsd  %xmm0,-0x2a0(%rbp)
  40230b:	ff 
        subtract_vector(ray_e, rec->vertices[2], s);
  40230c:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  402313:	48 8d 50 30          	lea    0x30(%rax),%rdx
  402317:	48 8b 85 28 fd ff ff 	mov    -0x2d8(%rbp),%rax
  40231e:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
  402325:	48 89 95 b8 fe ff ff 	mov    %rdx,-0x148(%rbp)
  40232c:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402330:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  402337:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
  40233e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402342:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  402349:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40234d:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  402351:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  402358:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  40235c:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  402363:	48 83 c0 08          	add    $0x8,%rax
  402367:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  40236e:	48 83 c2 08          	add    $0x8,%rdx
  402372:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402376:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  40237d:	48 83 c2 08          	add    $0x8,%rdx
  402381:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  402385:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  402389:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  40238d:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  402394:	48 83 c0 10          	add    $0x10,%rax
  402398:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  40239f:	48 83 c2 10          	add    $0x10,%rdx
  4023a3:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4023a7:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  4023ae:	48 83 c2 10          	add    $0x10,%rdx
  4023b2:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4023b6:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4023ba:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  4023be:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4023c2:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
  4023c9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  4023d0:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  4023d7:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
  4023de:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4023e2:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  4023e9:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4023ed:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  4023f1:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
  4023f8:	48 83 c0 08          	add    $0x8,%rax
  4023fc:	f2 0f 10 10          	movsd  (%rax),%xmm2
  402400:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  402407:	48 83 c0 08          	add    $0x8,%rax
  40240b:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40240f:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  402413:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  402417:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
  40241e:	48 83 c0 10          	add    $0x10,%rax
  402422:	f2 0f 10 10          	movsd  (%rax),%xmm2
  402426:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  40242d:	48 83 c0 10          	add    $0x10,%rax
  402431:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402435:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  402439:	f2 0f 58 c1          	addsd  %xmm1,%xmm0

        alpha = inv_det * dot_product(s, p);
  40243d:	f2 0f 59 85 60 fd ff 	mulsd  -0x2a0(%rbp),%xmm0
  402444:	ff 
  402445:	f2 0f 11 85 78 fd ff 	movsd  %xmm0,-0x288(%rbp)
  40244c:	ff 
        if (alpha < 0.0)
  40244d:	66 0f ef c0          	pxor   %xmm0,%xmm0
  402451:	66 0f 2e 85 78 fd ff 	ucomisd -0x288(%rbp),%xmm0
  402458:	ff 
  402459:	76 0a                	jbe    402465 <rayRectangularIntersection+0xc09>
            return 0;
  40245b:	b8 00 00 00 00       	mov    $0x0,%eax
  402460:	e9 52 05 00 00       	jmpq   4029b7 <rayRectangularIntersection+0x115b>
  402465:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402469:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
  402470:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  402474:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  40247b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40247f:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
}

static inline __attribute__((always_inline))
void cross_product(const double *v1, const double *v2, double *out)
{
    out[0] = v1[1] * v2[2] - v1[2] * v2[1];
  402486:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
  40248d:	48 83 c0 08          	add    $0x8,%rax
  402491:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402495:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  40249c:	48 83 c0 10          	add    $0x10,%rax
  4024a0:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4024a4:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  4024a8:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
  4024af:	48 83 c0 10          	add    $0x10,%rax
  4024b3:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4024b7:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  4024be:	48 83 c0 08          	add    $0x8,%rax
  4024c2:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4024c6:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  4024ca:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4024ce:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  4024d5:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = v1[2] * v2[0] - v1[0] * v2[2];
  4024d9:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  4024e0:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4024e4:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
  4024eb:	48 83 c0 10          	add    $0x10,%rax
  4024ef:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4024f3:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  4024fa:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4024fe:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  402502:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
  402509:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40250d:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  402514:	48 83 c0 10          	add    $0x10,%rax
  402518:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40251c:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  402520:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  402524:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
    out[2] = v1[0] * v2[1] - v1[1] * v2[0];
  402528:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40252f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  402533:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
  40253a:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40253e:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  402545:	48 83 c0 08          	add    $0x8,%rax
  402549:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40254d:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  402551:	48 8b 85 d8 fd ff ff 	mov    -0x228(%rbp),%rax
  402558:	48 83 c0 08          	add    $0x8,%rax
  40255c:	f2 0f 10 10          	movsd  (%rax),%xmm2
  402560:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  402567:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40256b:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  40256f:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  402573:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
  402577:	48 8b 85 20 fd ff ff 	mov    -0x2e0(%rbp),%rax
  40257e:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)
  402585:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  402589:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  402590:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  402597:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40259b:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4025a2:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4025a6:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  4025aa:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  4025b1:	48 83 c0 08          	add    $0x8,%rax
  4025b5:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4025b9:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4025c0:	48 83 c0 08          	add    $0x8,%rax
  4025c4:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4025c8:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4025cc:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  4025d0:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  4025d7:	48 83 c0 10          	add    $0x10,%rax
  4025db:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4025df:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  4025e6:	48 83 c0 10          	add    $0x10,%rax
  4025ea:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4025ee:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4025f2:	f2 0f 58 c1          	addsd  %xmm1,%xmm0

        cross_product(s, e23, q);
        beta = inv_det * dot_product(ray_d, q);
  4025f6:	f2 0f 59 85 60 fd ff 	mulsd  -0x2a0(%rbp),%xmm0
  4025fd:	ff 
  4025fe:	f2 0f 11 85 90 fd ff 	movsd  %xmm0,-0x270(%rbp)
  402605:	ff 

        if ((beta < 0.0) || (beta + alpha > 1.0))
  402606:	66 0f ef c0          	pxor   %xmm0,%xmm0
  40260a:	66 0f 2e 85 90 fd ff 	ucomisd -0x270(%rbp),%xmm0
  402611:	ff 
  402612:	77 1e                	ja     402632 <rayRectangularIntersection+0xdd6>
  402614:	f2 0f 10 85 90 fd ff 	movsd  -0x270(%rbp),%xmm0
  40261b:	ff 
  40261c:	f2 0f 58 85 78 fd ff 	addsd  -0x288(%rbp),%xmm0
  402623:	ff 
  402624:	f2 0f 10 0d d4 43 00 	movsd  0x43d4(%rip),%xmm1        # 406a00 <_IO_stdin_used+0x20>
  40262b:	00 
  40262c:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  402630:	76 0a                	jbe    40263c <rayRectangularIntersection+0xde0>
            return 0;
  402632:	b8 00 00 00 00       	mov    $0x0,%eax
  402637:	e9 7b 03 00 00       	jmpq   4029b7 <rayRectangularIntersection+0x115b>
  40263c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  402640:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
  402647:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40264b:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  402652:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  402659:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40265d:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  402664:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402668:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  40266c:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  402673:	48 83 c0 08          	add    $0x8,%rax
  402677:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40267b:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  402682:	48 83 c0 08          	add    $0x8,%rax
  402686:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40268a:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  40268e:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  402692:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  402699:	48 83 c0 10          	add    $0x10,%rax
  40269d:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4026a1:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4026a8:	48 83 c0 10          	add    $0x10,%rax
  4026ac:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4026b0:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4026b4:	f2 0f 58 c1          	addsd  %xmm1,%xmm0

        *t1 = inv_det * dot_product(e21, q);
  4026b8:	f2 0f 59 85 60 fd ff 	mulsd  -0x2a0(%rbp),%xmm0
  4026bf:	ff 
  4026c0:	48 8b 85 08 fd ff ff 	mov    -0x2f8(%rbp),%rax
  4026c7:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    }

    if (*t1 < 1e-4)
  4026cb:	48 8b 85 08 fd ff ff 	mov    -0x2f8(%rbp),%rax
  4026d2:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4026d6:	f2 0f 10 05 1a 43 00 	movsd  0x431a(%rip),%xmm0        # 4069f8 <_IO_stdin_used+0x18>
  4026dd:	00 
  4026de:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  4026e2:	76 0a                	jbe    4026ee <rayRectangularIntersection+0xe92>
        return 0;
  4026e4:	b8 00 00 00 00       	mov    $0x0,%eax
  4026e9:	e9 c9 02 00 00       	jmpq   4029b7 <rayRectangularIntersection+0x115b>

    COPY_POINT3(ip->normal, rec->normal);
  4026ee:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  4026f5:	f2 0f 10 40 60       	movsd  0x60(%rax),%xmm0
  4026fa:	48 8b 85 10 fd ff ff 	mov    -0x2f0(%rbp),%rax
  402701:	f2 0f 11 40 18       	movsd  %xmm0,0x18(%rax)
  402706:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  40270d:	f2 0f 10 40 68       	movsd  0x68(%rax),%xmm0
  402712:	48 8b 85 10 fd ff ff 	mov    -0x2f0(%rbp),%rax
  402719:	f2 0f 11 40 20       	movsd  %xmm0,0x20(%rax)
  40271e:	48 8b 85 18 fd ff ff 	mov    -0x2e8(%rbp),%rax
  402725:	f2 0f 10 40 70       	movsd  0x70(%rax),%xmm0
  40272a:	48 8b 85 10 fd ff ff 	mov    -0x2f0(%rbp),%rax
  402731:	f2 0f 11 40 28       	movsd  %xmm0,0x28(%rax)
    if (dot_product(ip->normal, ray_d)>0.0)
  402736:	48 8b 85 10 fd ff ff 	mov    -0x2f0(%rbp),%rax
  40273d:	48 83 c0 18          	add    $0x18,%rax
  402741:	48 89 85 e0 fd ff ff 	mov    %rax,-0x220(%rbp)
  402748:	48 8b 85 20 fd ff ff 	mov    -0x2e0(%rbp),%rax
  40274f:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  402756:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  40275d:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402761:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  402768:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40276c:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  402770:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  402777:	48 83 c0 08          	add    $0x8,%rax
  40277b:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40277f:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  402786:	48 83 c0 08          	add    $0x8,%rax
  40278a:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40278e:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  402792:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  402796:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  40279d:	48 83 c0 10          	add    $0x10,%rax
  4027a1:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4027a5:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  4027ac:	48 83 c0 10          	add    $0x10,%rax
  4027b0:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4027b4:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4027b8:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4027bc:	66 0f ef c9          	pxor   %xmm1,%xmm1
  4027c0:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  4027c4:	0f 86 9e 00 00 00    	jbe    402868 <rayRectangularIntersection+0x100c>
        multiply_vector(ip->normal, -1, ip->normal);
  4027ca:	48 8b 85 10 fd ff ff 	mov    -0x2f0(%rbp),%rax
  4027d1:	48 83 c0 18          	add    $0x18,%rax
  4027d5:	48 8b 95 10 fd ff ff 	mov    -0x2f0(%rbp),%rdx
  4027dc:	48 83 c2 18          	add    $0x18,%rdx
  4027e0:	48 89 95 e8 fd ff ff 	mov    %rdx,-0x218(%rbp)
  4027e7:	f2 0f 10 05 01 42 00 	movsd  0x4201(%rip),%xmm0        # 4069f0 <_IO_stdin_used+0x10>
  4027ee:	00 
  4027ef:	f2 0f 11 85 f0 fe ff 	movsd  %xmm0,-0x110(%rbp)
  4027f6:	ff 
  4027f7:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  4027fe:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  402805:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402809:	f2 0f 59 85 f0 fe ff 	mulsd  -0x110(%rbp),%xmm0
  402810:	ff 
  402811:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  402818:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  40281c:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  402823:	48 83 c0 08          	add    $0x8,%rax
  402827:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  40282e:	48 83 c2 08          	add    $0x8,%rdx
  402832:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402836:	f2 0f 59 85 f0 fe ff 	mulsd  -0x110(%rbp),%xmm0
  40283d:	ff 
  40283e:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  402842:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  402849:	48 83 c0 10          	add    $0x10,%rax
  40284d:	48 8b 95 e8 fd ff ff 	mov    -0x218(%rbp),%rdx
  402854:	48 83 c2 10          	add    $0x10,%rdx
  402858:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40285c:	f2 0f 59 85 f0 fe ff 	mulsd  -0x110(%rbp),%xmm0
  402863:	ff 
  402864:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    multiply_vector(ray_d, *t1, ip->point);
  402868:	48 8b 85 10 fd ff ff 	mov    -0x2f0(%rbp),%rax
  40286f:	48 8b 95 08 fd ff ff 	mov    -0x2f8(%rbp),%rdx
  402876:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40287a:	48 8b 95 20 fd ff ff 	mov    -0x2e0(%rbp),%rdx
  402881:	48 89 95 f8 fd ff ff 	mov    %rdx,-0x208(%rbp)
  402888:	f2 0f 11 85 10 ff ff 	movsd  %xmm0,-0xf0(%rbp)
  40288f:	ff 
  402890:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  402897:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  40289e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4028a2:	f2 0f 59 85 10 ff ff 	mulsd  -0xf0(%rbp),%xmm0
  4028a9:	ff 
  4028aa:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4028b1:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  4028b5:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4028bc:	48 83 c0 08          	add    $0x8,%rax
  4028c0:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  4028c7:	48 83 c2 08          	add    $0x8,%rdx
  4028cb:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4028cf:	f2 0f 59 85 10 ff ff 	mulsd  -0xf0(%rbp),%xmm0
  4028d6:	ff 
  4028d7:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  4028db:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4028e2:	48 83 c0 10          	add    $0x10,%rax
  4028e6:	48 8b 95 f8 fd ff ff 	mov    -0x208(%rbp),%rdx
  4028ed:	48 83 c2 10          	add    $0x10,%rdx
  4028f1:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4028f5:	f2 0f 59 85 10 ff ff 	mulsd  -0xf0(%rbp),%xmm0
  4028fc:	ff 
  4028fd:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    add_vector(ray_e, ip->point, ip->point);
  402901:	48 8b 85 10 fd ff ff 	mov    -0x2f0(%rbp),%rax
  402908:	48 8b 95 10 fd ff ff 	mov    -0x2f0(%rbp),%rdx
  40290f:	48 8b 8d 28 fd ff ff 	mov    -0x2d8(%rbp),%rcx
  402916:	48 89 8d f0 fd ff ff 	mov    %rcx,-0x210(%rbp)
  40291d:	48 89 95 00 ff ff ff 	mov    %rdx,-0x100(%rbp)
  402924:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  40292b:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  402932:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402936:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40293d:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402941:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  402945:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40294c:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  402950:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  402957:	48 83 c0 08          	add    $0x8,%rax
  40295b:	48 8b 95 f0 fd ff ff 	mov    -0x210(%rbp),%rdx
  402962:	48 83 c2 08          	add    $0x8,%rdx
  402966:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  40296a:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  402971:	48 83 c2 08          	add    $0x8,%rdx
  402975:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402979:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40297d:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  402981:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  402988:	48 83 c0 10          	add    $0x10,%rax
  40298c:	48 8b 95 f0 fd ff ff 	mov    -0x210(%rbp),%rdx
  402993:	48 83 c2 10          	add    $0x10,%rdx
  402997:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  40299b:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  4029a2:	48 83 c2 10          	add    $0x10,%rdx
  4029a6:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4029aa:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4029ae:	f2 0f 11 00          	movsd  %xmm0,(%rax)

    return 1;
  4029b2:	b8 01 00 00 00       	mov    $0x1,%eax
}
  4029b7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  4029bb:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
  4029c2:	00 00 
  4029c4:	74 05                	je     4029cb <rayRectangularIntersection+0x116f>
  4029c6:	e8 35 e0 ff ff       	callq  400a00 <__stack_chk_fail@plt>
  4029cb:	c9                   	leaveq 
  4029cc:	c3                   	retq   

00000000004029cd <localColor>:

static void localColor(color local_color,
                       const color light_color, double diffuse,
                       double specular, const object_fill *fill)
{
  4029cd:	55                   	push   %rbp
  4029ce:	48 89 e5             	mov    %rsp,%rbp
  4029d1:	48 81 ec 10 02 00 00 	sub    $0x210,%rsp
  4029d8:	48 89 bd 18 fe ff ff 	mov    %rdi,-0x1e8(%rbp)
  4029df:	48 89 b5 10 fe ff ff 	mov    %rsi,-0x1f0(%rbp)
  4029e6:	f2 0f 11 85 08 fe ff 	movsd  %xmm0,-0x1f8(%rbp)
  4029ed:	ff 
  4029ee:	f2 0f 11 8d 00 fe ff 	movsd  %xmm1,-0x200(%rbp)
  4029f5:	ff 
  4029f6:	48 89 95 f8 fd ff ff 	mov    %rdx,-0x208(%rbp)
  4029fd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  402a04:	00 00 
  402a06:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  402a0a:	31 c0                	xor    %eax,%eax
    color ambi = { 0.1, 0.1, 0.1 };
  402a0c:	f2 0f 10 05 f4 3f 00 	movsd  0x3ff4(%rip),%xmm0        # 406a08 <_IO_stdin_used+0x28>
  402a13:	00 
  402a14:	f2 0f 11 85 60 ff ff 	movsd  %xmm0,-0xa0(%rbp)
  402a1b:	ff 
  402a1c:	f2 0f 10 05 e4 3f 00 	movsd  0x3fe4(%rip),%xmm0        # 406a08 <_IO_stdin_used+0x28>
  402a23:	00 
  402a24:	f2 0f 11 85 68 ff ff 	movsd  %xmm0,-0x98(%rbp)
  402a2b:	ff 
  402a2c:	f2 0f 10 05 d4 3f 00 	movsd  0x3fd4(%rip),%xmm0        # 406a08 <_IO_stdin_used+0x28>
  402a33:	00 
  402a34:	f2 0f 11 85 70 ff ff 	movsd  %xmm0,-0x90(%rbp)
  402a3b:	ff 

    /* Local Color = ambient * surface +
     *               light * ( kd * surface * diffuse + ks * specular)
     */

    COPY_COLOR(diff, fill->fill_color);
  402a3c:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  402a43:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402a47:	f2 0f 11 45 80       	movsd  %xmm0,-0x80(%rbp)
  402a4c:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  402a53:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
  402a58:	f2 0f 11 45 88       	movsd  %xmm0,-0x78(%rbp)
  402a5d:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  402a64:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
  402a69:	f2 0f 11 45 90       	movsd  %xmm0,-0x70(%rbp)
    multiply_vector(diff, fill->Kd, diff);
  402a6e:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  402a75:	f2 0f 10 40 18       	movsd  0x18(%rax),%xmm0
  402a7a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402a7e:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  402a85:	f2 0f 11 85 f0 fe ff 	movsd  %xmm0,-0x110(%rbp)
  402a8c:	ff 
  402a8d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402a91:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  402a98:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  402a9f:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402aa3:	f2 0f 59 85 f0 fe ff 	mulsd  -0x110(%rbp),%xmm0
  402aaa:	ff 
  402aab:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  402ab2:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  402ab6:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  402abd:	48 83 c0 08          	add    $0x8,%rax
  402ac1:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  402ac8:	48 83 c2 08          	add    $0x8,%rdx
  402acc:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402ad0:	f2 0f 59 85 f0 fe ff 	mulsd  -0x110(%rbp),%xmm0
  402ad7:	ff 
  402ad8:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  402adc:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  402ae3:	48 83 c0 10          	add    $0x10,%rax
  402ae7:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  402aee:	48 83 c2 10          	add    $0x10,%rdx
  402af2:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402af6:	f2 0f 59 85 f0 fe ff 	mulsd  -0x110(%rbp),%xmm0
  402afd:	ff 
  402afe:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  402b02:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402b06:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  402b0d:	f2 0f 10 85 08 fe ff 	movsd  -0x1f8(%rbp),%xmm0
  402b14:	ff 
  402b15:	f2 0f 11 85 e0 fe ff 	movsd  %xmm0,-0x120(%rbp)
  402b1c:	ff 
  402b1d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402b21:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  402b28:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  402b2f:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402b33:	f2 0f 59 85 e0 fe ff 	mulsd  -0x120(%rbp),%xmm0
  402b3a:	ff 
  402b3b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  402b42:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  402b46:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  402b4d:	48 83 c0 08          	add    $0x8,%rax
  402b51:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  402b58:	48 83 c2 08          	add    $0x8,%rdx
  402b5c:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402b60:	f2 0f 59 85 e0 fe ff 	mulsd  -0x120(%rbp),%xmm0
  402b67:	ff 
  402b68:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  402b6c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  402b73:	48 83 c0 10          	add    $0x10,%rax
  402b77:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  402b7e:	48 83 c2 10          	add    $0x10,%rdx
  402b82:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402b86:	f2 0f 59 85 e0 fe ff 	mulsd  -0x120(%rbp),%xmm0
  402b8d:	ff 
  402b8e:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    multiply_vector(diff, diffuse, diff);
    COPY_COLOR(lightCo, light_color);
  402b92:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  402b99:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402b9d:	f2 0f 11 45 c0       	movsd  %xmm0,-0x40(%rbp)
  402ba2:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  402ba9:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
  402bae:	f2 0f 11 45 c8       	movsd  %xmm0,-0x38(%rbp)
  402bb3:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  402bba:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
  402bbf:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
  402bc4:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402bc8:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  402bcf:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  402bd3:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  402bda:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402bde:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vectors(const double *a, const double *b, double *out)
{
    __m128d an = __extension__ (__m128d) { a[0], a[1]};
  402be5:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  402bec:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402bf0:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  402bf7:	48 83 c0 08          	add    $0x8,%rax
  402bfb:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402bff:	66 0f 28 d1          	movapd %xmm1,%xmm2
  402c03:	66 0f 14 d0          	unpcklpd %xmm0,%xmm2
  402c07:	66 0f 28 c2          	movapd %xmm2,%xmm0
  402c0b:	0f 29 85 30 ff ff ff 	movaps %xmm0,-0xd0(%rbp)
    __m128d bn = __extension__ (__m128d) { b[0], b[1]};
  402c12:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  402c19:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402c1d:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  402c24:	48 83 c0 08          	add    $0x8,%rax
  402c28:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402c2c:	66 0f 28 d9          	movapd %xmm1,%xmm3
  402c30:	66 0f 14 d8          	unpcklpd %xmm0,%xmm3
  402c34:	66 0f 28 c3          	movapd %xmm3,%xmm0
  402c38:	0f 29 85 40 ff ff ff 	movaps %xmm0,-0xc0(%rbp)
    __m128d num = (__m128d) ((__v2df)an * (__v2df)bn);
  402c3f:	66 0f 28 85 30 ff ff 	movapd -0xd0(%rbp),%xmm0
  402c46:	ff 
  402c47:	66 0f 59 85 40 ff ff 	mulpd  -0xc0(%rbp),%xmm0
  402c4e:	ff 
  402c4f:	0f 29 85 50 ff ff ff 	movaps %xmm0,-0xb0(%rbp)
    *(__m128d*)out = num;
  402c56:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  402c5d:	66 0f 28 85 50 ff ff 	movapd -0xb0(%rbp),%xmm0
  402c64:	ff 
  402c65:	0f 29 00             	movaps %xmm0,(%rax)
    //out[0] = num[1];
    //out[1] = num[0];
    out[2] = a[2] * b[2];
  402c68:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  402c6f:	48 83 c0 10          	add    $0x10,%rax
  402c73:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  402c7a:	48 83 c2 10          	add    $0x10,%rdx
  402c7e:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  402c82:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  402c89:	48 83 c2 10          	add    $0x10,%rdx
  402c8d:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402c91:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  402c95:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    multiply_vectors(diff, lightCo, diff);

    COPY_COLOR(spec, light_color);
  402c99:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  402ca0:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402ca4:	f2 0f 11 45 a0       	movsd  %xmm0,-0x60(%rbp)
  402ca9:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  402cb0:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
  402cb5:	f2 0f 11 45 a8       	movsd  %xmm0,-0x58(%rbp)
  402cba:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  402cc1:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
  402cc6:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)
    multiply_vector(spec, fill->Ks, spec);
  402ccb:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  402cd2:	f2 0f 10 40 20       	movsd  0x20(%rax),%xmm0
  402cd7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  402cdb:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  402ce2:	f2 0f 11 85 c0 fe ff 	movsd  %xmm0,-0x140(%rbp)
  402ce9:	ff 
  402cea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  402cee:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  402cf5:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  402cfc:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402d00:	f2 0f 59 85 c0 fe ff 	mulsd  -0x140(%rbp),%xmm0
  402d07:	ff 
  402d08:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  402d0f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  402d13:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  402d1a:	48 83 c0 08          	add    $0x8,%rax
  402d1e:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  402d25:	48 83 c2 08          	add    $0x8,%rdx
  402d29:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402d2d:	f2 0f 59 85 c0 fe ff 	mulsd  -0x140(%rbp),%xmm0
  402d34:	ff 
  402d35:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  402d39:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  402d40:	48 83 c0 10          	add    $0x10,%rax
  402d44:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  402d4b:	48 83 c2 10          	add    $0x10,%rdx
  402d4f:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402d53:	f2 0f 59 85 c0 fe ff 	mulsd  -0x140(%rbp),%xmm0
  402d5a:	ff 
  402d5b:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  402d5f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  402d63:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
  402d6a:	f2 0f 10 85 00 fe ff 	movsd  -0x200(%rbp),%xmm0
  402d71:	ff 
  402d72:	f2 0f 11 85 b0 fe ff 	movsd  %xmm0,-0x150(%rbp)
  402d79:	ff 
  402d7a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  402d7e:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  402d85:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  402d8c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402d90:	f2 0f 59 85 b0 fe ff 	mulsd  -0x150(%rbp),%xmm0
  402d97:	ff 
  402d98:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  402d9f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  402da3:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  402daa:	48 83 c0 08          	add    $0x8,%rax
  402dae:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
  402db5:	48 83 c2 08          	add    $0x8,%rdx
  402db9:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402dbd:	f2 0f 59 85 b0 fe ff 	mulsd  -0x150(%rbp),%xmm0
  402dc4:	ff 
  402dc5:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  402dc9:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  402dd0:	48 83 c0 10          	add    $0x10,%rax
  402dd4:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
  402ddb:	48 83 c2 10          	add    $0x10,%rdx
  402ddf:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402de3:	f2 0f 59 85 b0 fe ff 	mulsd  -0x150(%rbp),%xmm0
  402dea:	ff 
  402deb:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    multiply_vector(spec, specular, spec);

    COPY_COLOR(surface, fill->fill_color);
  402def:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  402df6:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402dfa:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
  402dff:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  402e06:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
  402e0b:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
  402e10:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  402e17:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
  402e1c:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
  402e21:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  402e28:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  402e2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  402e33:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
  402e3a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  402e41:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vectors(const double *a, const double *b, double *out)
{
    __m128d an = __extension__ (__m128d) { a[0], a[1]};
  402e48:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  402e4f:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402e53:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  402e5a:	48 83 c0 08          	add    $0x8,%rax
  402e5e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402e62:	66 0f 28 e1          	movapd %xmm1,%xmm4
  402e66:	66 0f 14 e0          	unpcklpd %xmm0,%xmm4
  402e6a:	66 0f 28 c4          	movapd %xmm4,%xmm0
  402e6e:	0f 29 85 00 ff ff ff 	movaps %xmm0,-0x100(%rbp)
    __m128d bn = __extension__ (__m128d) { b[0], b[1]};
  402e75:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  402e7c:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402e80:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  402e87:	48 83 c0 08          	add    $0x8,%rax
  402e8b:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402e8f:	66 0f 28 e9          	movapd %xmm1,%xmm5
  402e93:	66 0f 14 e8          	unpcklpd %xmm0,%xmm5
  402e97:	66 0f 28 c5          	movapd %xmm5,%xmm0
  402e9b:	0f 29 85 10 ff ff ff 	movaps %xmm0,-0xf0(%rbp)
    __m128d num = (__m128d) ((__v2df)an * (__v2df)bn);
  402ea2:	66 0f 28 85 00 ff ff 	movapd -0x100(%rbp),%xmm0
  402ea9:	ff 
  402eaa:	66 0f 59 85 10 ff ff 	mulpd  -0xf0(%rbp),%xmm0
  402eb1:	ff 
  402eb2:	0f 29 85 20 ff ff ff 	movaps %xmm0,-0xe0(%rbp)
    *(__m128d*)out = num;
  402eb9:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  402ec0:	66 0f 28 85 20 ff ff 	movapd -0xe0(%rbp),%xmm0
  402ec7:	ff 
  402ec8:	0f 29 00             	movaps %xmm0,(%rax)
    //out[0] = num[1];
    //out[1] = num[0];
    out[2] = a[2] * b[2];
  402ecb:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  402ed2:	48 83 c0 10          	add    $0x10,%rax
  402ed6:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  402edd:	48 83 c2 10          	add    $0x10,%rdx
  402ee1:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  402ee5:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  402eec:	48 83 c2 10          	add    $0x10,%rdx
  402ef0:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402ef4:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  402ef8:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  402efc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402f00:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
  402f07:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
  402f0e:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
  402f15:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402f19:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  402f20:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  402f27:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402f2b:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  402f32:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402f36:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  402f3a:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  402f41:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  402f45:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  402f4c:	48 83 c0 08          	add    $0x8,%rax
  402f50:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
  402f57:	48 83 c2 08          	add    $0x8,%rdx
  402f5b:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  402f5f:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  402f66:	48 83 c2 08          	add    $0x8,%rdx
  402f6a:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402f6e:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  402f72:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  402f76:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  402f7d:	48 83 c0 10          	add    $0x10,%rax
  402f81:	48 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%rdx
  402f88:	48 83 c2 10          	add    $0x10,%rdx
  402f8c:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  402f90:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  402f97:	48 83 c2 10          	add    $0x10,%rdx
  402f9b:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  402f9f:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  402fa3:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  402fa7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402fab:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  402fb2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  402fb6:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
  402fbd:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  402fc1:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  402fc8:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  402fcf:	f2 0f 10 08          	movsd  (%rax),%xmm1
  402fd3:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  402fda:	f2 0f 10 00          	movsd  (%rax),%xmm0
  402fde:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  402fe2:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402fe9:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  402fed:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402ff4:	48 83 c0 08          	add    $0x8,%rax
  402ff8:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  402fff:	48 83 c2 08          	add    $0x8,%rdx
  403003:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  403007:	48 8b 95 80 fe ff ff 	mov    -0x180(%rbp),%rdx
  40300e:	48 83 c2 08          	add    $0x8,%rdx
  403012:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403016:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40301a:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  40301e:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  403025:	48 83 c0 10          	add    $0x10,%rax
  403029:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  403030:	48 83 c2 10          	add    $0x10,%rdx
  403034:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  403038:	48 8b 95 80 fe ff ff 	mov    -0x180(%rbp),%rdx
  40303f:	48 83 c2 10          	add    $0x10,%rdx
  403043:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403047:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40304b:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  40304f:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  403056:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  40305d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  403061:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
  403068:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  40306f:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  403076:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  40307d:	f2 0f 10 08          	movsd  (%rax),%xmm1
  403081:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  403088:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40308c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  403090:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  403097:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  40309b:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  4030a2:	48 83 c0 08          	add    $0x8,%rax
  4030a6:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx
  4030ad:	48 83 c2 08          	add    $0x8,%rdx
  4030b1:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4030b5:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  4030bc:	48 83 c2 08          	add    $0x8,%rdx
  4030c0:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4030c4:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4030c8:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  4030cc:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  4030d3:	48 83 c0 10          	add    $0x10,%rax
  4030d7:	48 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%rdx
  4030de:	48 83 c2 10          	add    $0x10,%rdx
  4030e2:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4030e6:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  4030ed:	48 83 c2 10          	add    $0x10,%rdx
  4030f1:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4030f5:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4030f9:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    multiply_vectors(ambi,surface, ambi);
    add_vector(diff, ambi, diff);
    add_vector(diff, spec, diff);
    add_vector(local_color, diff, local_color);
}
  4030fd:	90                   	nop
  4030fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403102:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  403109:	00 00 
  40310b:	74 05                	je     403112 <localColor+0x745>
  40310d:	e8 ee d8 ff ff       	callq  400a00 <__stack_chk_fail@plt>
  403112:	c9                   	leaveq 
  403113:	c3                   	retq   

0000000000403114 <compute_specular_diffuse>:
// TODO
static void compute_specular_diffuse(double *diffuse,
                                     double *specular,
                                     const point3 d, const point3 l,
                                     const point3 n, double phong_pow)
{
  403114:	55                   	push   %rbp
  403115:	48 89 e5             	mov    %rsp,%rbp
  403118:	48 81 ec c0 01 00 00 	sub    $0x1c0,%rsp
  40311f:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
  403126:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
  40312d:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
  403134:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
  40313b:	4c 89 85 58 fe ff ff 	mov    %r8,-0x1a8(%rbp)
  403142:	f2 0f 11 85 50 fe ff 	movsd  %xmm0,-0x1b0(%rbp)
  403149:	ff 
  40314a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  403151:	00 00 
  403153:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  403157:	31 c0                	xor    %eax,%eax
    point3 d_copy, l_copy, middle, r;

    /* Calculate vector to eye V */
    COPY_POINT3(d_copy, d);
  403159:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  403160:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403164:	f2 0f 11 45 80       	movsd  %xmm0,-0x80(%rbp)
  403169:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  403170:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
  403175:	f2 0f 11 45 88       	movsd  %xmm0,-0x78(%rbp)
  40317a:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  403181:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
  403186:	f2 0f 11 45 90       	movsd  %xmm0,-0x70(%rbp)
  40318b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40318f:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
  403196:	f2 0f 10 05 52 38 00 	movsd  0x3852(%rip),%xmm0        # 4069f0 <_IO_stdin_used+0x10>
  40319d:	00 
  40319e:	f2 0f 11 85 58 ff ff 	movsd  %xmm0,-0xa8(%rbp)
  4031a5:	ff 
  4031a6:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4031aa:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  4031b1:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  4031b8:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4031bc:	f2 0f 59 85 58 ff ff 	mulsd  -0xa8(%rbp),%xmm0
  4031c3:	ff 
  4031c4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4031cb:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  4031cf:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4031d6:	48 83 c0 08          	add    $0x8,%rax
  4031da:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
  4031e1:	48 83 c2 08          	add    $0x8,%rdx
  4031e5:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4031e9:	f2 0f 59 85 58 ff ff 	mulsd  -0xa8(%rbp),%xmm0
  4031f0:	ff 
  4031f1:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  4031f5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4031fc:	48 83 c0 10          	add    $0x10,%rax
  403200:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
  403207:	48 83 c2 10          	add    $0x10,%rdx
  40320b:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40320f:	f2 0f 59 85 58 ff ff 	mulsd  -0xa8(%rbp),%xmm0
  403216:	ff 
  403217:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  40321b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40321f:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)


static inline __attribute__((always_inline))
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  403226:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  40322d:	f2 0f 10 08          	movsd  (%rax),%xmm1
  403231:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  403238:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40323c:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  403240:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  403247:	48 83 c0 08          	add    $0x8,%rax
  40324b:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40324f:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  403256:	48 83 c0 08          	add    $0x8,%rax
  40325a:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40325e:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403262:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  403266:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  40326d:	48 83 c0 10          	add    $0x10,%rax
  403271:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403275:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  40327c:	48 83 c0 10          	add    $0x10,%rax
  403280:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403284:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403288:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40328c:	e8 4f d8 ff ff       	callq  400ae0 <sqrt@plt>
  403291:	66 48 0f 7e c0       	movq   %xmm0,%rax
  403296:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
  40329d:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  4032a4:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4032a8:	f2 0f 5e 85 50 ff ff 	divsd  -0xb0(%rbp),%xmm0
  4032af:	ff 
  4032b0:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  4032b7:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[1] /= d;
  4032bb:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  4032c2:	48 83 c0 08          	add    $0x8,%rax
  4032c6:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  4032cd:	48 83 c2 08          	add    $0x8,%rdx
  4032d1:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4032d5:	f2 0f 5e 85 50 ff ff 	divsd  -0xb0(%rbp),%xmm0
  4032dc:	ff 
  4032dd:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[2] /= d;
  4032e1:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  4032e8:	48 83 c0 10          	add    $0x10,%rax
  4032ec:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
  4032f3:	48 83 c2 10          	add    $0x10,%rdx
  4032f7:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4032fb:	f2 0f 5e 85 50 ff ff 	divsd  -0xb0(%rbp),%xmm0
  403302:	ff 
  403303:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    multiply_vector(d_copy, -1, d_copy);
    normalize(d_copy);

    /* Calculate vector to light L */
    COPY_POINT3(l_copy, l);
  403307:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  40330e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403312:	f2 0f 11 45 a0       	movsd  %xmm0,-0x60(%rbp)
  403317:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  40331e:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
  403323:	f2 0f 11 45 a8       	movsd  %xmm0,-0x58(%rbp)
  403328:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  40332f:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
  403334:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)
  403339:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40333d:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
  403344:	f2 0f 10 05 a4 36 00 	movsd  0x36a4(%rip),%xmm0        # 4069f0 <_IO_stdin_used+0x10>
  40334b:	00 
  40334c:	f2 0f 11 85 40 ff ff 	movsd  %xmm0,-0xc0(%rbp)
  403353:	ff 
  403354:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  403358:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  40335f:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  403366:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40336a:	f2 0f 59 85 40 ff ff 	mulsd  -0xc0(%rbp),%xmm0
  403371:	ff 
  403372:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  403379:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  40337d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  403384:	48 83 c0 08          	add    $0x8,%rax
  403388:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
  40338f:	48 83 c2 08          	add    $0x8,%rdx
  403393:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403397:	f2 0f 59 85 40 ff ff 	mulsd  -0xc0(%rbp),%xmm0
  40339e:	ff 
  40339f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  4033a3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  4033aa:	48 83 c0 10          	add    $0x10,%rax
  4033ae:	48 8b 95 98 fe ff ff 	mov    -0x168(%rbp),%rdx
  4033b5:	48 83 c2 10          	add    $0x10,%rdx
  4033b9:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4033bd:	f2 0f 59 85 40 ff ff 	mulsd  -0xc0(%rbp),%xmm0
  4033c4:	ff 
  4033c5:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  4033c9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4033cd:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)


static inline __attribute__((always_inline))
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  4033d4:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  4033db:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4033df:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  4033e6:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4033ea:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  4033ee:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  4033f5:	48 83 c0 08          	add    $0x8,%rax
  4033f9:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4033fd:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  403404:	48 83 c0 08          	add    $0x8,%rax
  403408:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40340c:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403410:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  403414:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  40341b:	48 83 c0 10          	add    $0x10,%rax
  40341f:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403423:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  40342a:	48 83 c0 10          	add    $0x10,%rax
  40342e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403432:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403436:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40343a:	e8 a1 d6 ff ff       	callq  400ae0 <sqrt@plt>
  40343f:	66 48 0f 7e c0       	movq   %xmm0,%rax
  403444:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
  40344b:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  403452:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403456:	f2 0f 5e 85 38 ff ff 	divsd  -0xc8(%rbp),%xmm0
  40345d:	ff 
  40345e:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  403465:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[1] /= d;
  403469:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  403470:	48 83 c0 08          	add    $0x8,%rax
  403474:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  40347b:	48 83 c2 08          	add    $0x8,%rdx
  40347f:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403483:	f2 0f 5e 85 38 ff ff 	divsd  -0xc8(%rbp),%xmm0
  40348a:	ff 
  40348b:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[2] /= d;
  40348f:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  403496:	48 83 c0 10          	add    $0x10,%rax
  40349a:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  4034a1:	48 83 c2 10          	add    $0x10,%rdx
  4034a5:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4034a9:	f2 0f 5e 85 38 ff ff 	divsd  -0xc8(%rbp),%xmm0
  4034b0:	ff 
  4034b1:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  4034b5:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  4034bc:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
  4034c3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4034c7:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  4034ce:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  4034d5:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4034d9:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  4034e0:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4034e4:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  4034e8:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  4034ef:	48 83 c0 08          	add    $0x8,%rax
  4034f3:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4034f7:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  4034fe:	48 83 c0 08          	add    $0x8,%rax
  403502:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403506:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  40350a:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  40350e:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  403515:	48 83 c0 10          	add    $0x10,%rax
  403519:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40351d:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  403524:	48 83 c0 10          	add    $0x10,%rax
  403528:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40352c:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403530:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    multiply_vector(l_copy, -1, l_copy);
    normalize(l_copy);

    /* Calculate reflection direction R */
    double tmp = dot_product(n, l_copy);
  403534:	f2 0f 11 85 a8 fe ff 	movsd  %xmm0,-0x158(%rbp)
  40353b:	ff 
  40353c:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  403543:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
  40354a:	f2 0f 10 85 a8 fe ff 	movsd  -0x158(%rbp),%xmm0
  403551:	ff 
  403552:	f2 0f 11 85 20 ff ff 	movsd  %xmm0,-0xe0(%rbp)
  403559:	ff 
  40355a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  40355e:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  403565:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  40356c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403570:	f2 0f 59 85 20 ff ff 	mulsd  -0xe0(%rbp),%xmm0
  403577:	ff 
  403578:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40357f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  403583:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40358a:	48 83 c0 08          	add    $0x8,%rax
  40358e:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  403595:	48 83 c2 08          	add    $0x8,%rdx
  403599:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40359d:	f2 0f 59 85 20 ff ff 	mulsd  -0xe0(%rbp),%xmm0
  4035a4:	ff 
  4035a5:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  4035a9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4035b0:	48 83 c0 10          	add    $0x10,%rax
  4035b4:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  4035bb:	48 83 c2 10          	add    $0x10,%rdx
  4035bf:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4035c3:	f2 0f 59 85 20 ff ff 	mulsd  -0xe0(%rbp),%xmm0
  4035ca:	ff 
  4035cb:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  4035cf:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4035d3:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
  4035da:	f2 0f 10 05 2e 34 00 	movsd  0x342e(%rip),%xmm0        # 406a10 <_IO_stdin_used+0x30>
  4035e1:	00 
  4035e2:	f2 0f 11 85 10 ff ff 	movsd  %xmm0,-0xf0(%rbp)
  4035e9:	ff 
  4035ea:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4035ee:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  4035f5:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
  4035fc:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403600:	f2 0f 59 85 10 ff ff 	mulsd  -0xf0(%rbp),%xmm0
  403607:	ff 
  403608:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40360f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  403613:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40361a:	48 83 c0 08          	add    $0x8,%rax
  40361e:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  403625:	48 83 c2 08          	add    $0x8,%rdx
  403629:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40362d:	f2 0f 59 85 10 ff ff 	mulsd  -0xf0(%rbp),%xmm0
  403634:	ff 
  403635:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  403639:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  403640:	48 83 c0 10          	add    $0x10,%rax
  403644:	48 8b 95 c0 fe ff ff 	mov    -0x140(%rbp),%rdx
  40364b:	48 83 c2 10          	add    $0x10,%rdx
  40364f:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403653:	f2 0f 59 85 10 ff ff 	mulsd  -0xf0(%rbp),%xmm0
  40365a:	ff 
  40365b:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  40365f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  403663:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
  40366a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  40366e:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  403675:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  403679:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  403680:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  403687:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40368b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  403692:	f2 0f 10 08          	movsd  (%rax),%xmm1
  403696:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  40369a:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4036a1:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  4036a5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4036ac:	48 83 c0 08          	add    $0x8,%rax
  4036b0:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
  4036b7:	48 83 c2 08          	add    $0x8,%rdx
  4036bb:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4036bf:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  4036c6:	48 83 c2 08          	add    $0x8,%rdx
  4036ca:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4036ce:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4036d2:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  4036d6:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4036dd:	48 83 c0 10          	add    $0x10,%rax
  4036e1:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
  4036e8:	48 83 c2 10          	add    $0x10,%rdx
  4036ec:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4036f0:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  4036f7:	48 83 c2 10          	add    $0x10,%rdx
  4036fb:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4036ff:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  403703:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  403707:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40370b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)


static inline __attribute__((always_inline))
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  403712:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  403719:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40371d:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  403724:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403728:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  40372c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  403733:	48 83 c0 08          	add    $0x8,%rax
  403737:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40373b:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  403742:	48 83 c0 08          	add    $0x8,%rax
  403746:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40374a:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  40374e:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  403752:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  403759:	48 83 c0 10          	add    $0x10,%rax
  40375d:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403761:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  403768:	48 83 c0 10          	add    $0x10,%rax
  40376c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403770:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403774:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  403778:	e8 63 d3 ff ff       	callq  400ae0 <sqrt@plt>
  40377d:	66 48 0f 7e c0       	movq   %xmm0,%rax
  403782:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
  403789:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  403790:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403794:	f2 0f 5e 85 f8 fe ff 	divsd  -0x108(%rbp),%xmm0
  40379b:	ff 
  40379c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  4037a3:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[1] /= d;
  4037a7:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  4037ae:	48 83 c0 08          	add    $0x8,%rax
  4037b2:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  4037b9:	48 83 c2 08          	add    $0x8,%rdx
  4037bd:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4037c1:	f2 0f 5e 85 f8 fe ff 	divsd  -0x108(%rbp),%xmm0
  4037c8:	ff 
  4037c9:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[2] /= d;
  4037cd:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  4037d4:	48 83 c0 10          	add    $0x10,%rax
  4037d8:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  4037df:	48 83 c2 10          	add    $0x10,%rdx
  4037e3:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4037e7:	f2 0f 5e 85 f8 fe ff 	divsd  -0x108(%rbp),%xmm0
  4037ee:	ff 
  4037ef:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  4037f3:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  4037fa:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  403801:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  403805:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  40380c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  403813:	f2 0f 10 08          	movsd  (%rax),%xmm1
  403817:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40381e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403822:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  403826:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  40382d:	48 83 c0 08          	add    $0x8,%rax
  403831:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403835:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40383c:	48 83 c0 08          	add    $0x8,%rax
  403840:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403844:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403848:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  40384c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  403853:	48 83 c0 10          	add    $0x10,%rax
  403857:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40385b:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  403862:	48 83 c0 10          	add    $0x10,%rax
  403866:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40386a:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  40386e:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    multiply_vector(middle, 2, middle);
    subtract_vector(middle, l_copy, r);
    normalize(r);

    /* diffuse = max(0, dot_product(n, -l)) */
    *diffuse = MAX(0, dot_product(n, l_copy));
  403872:	66 0f ef c9          	pxor   %xmm1,%xmm1
  403876:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  40387a:	76 06                	jbe    403882 <compute_specular_diffuse+0x76e>
  40387c:	66 0f ef c0          	pxor   %xmm0,%xmm0
  403880:	eb 7f                	jmp    403901 <compute_specular_diffuse+0x7ed>
  403882:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  403889:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
  403890:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  403894:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  40389b:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  4038a2:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4038a6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4038ad:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4038b1:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  4038b5:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  4038bc:	48 83 c0 08          	add    $0x8,%rax
  4038c0:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4038c4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4038cb:	48 83 c0 08          	add    $0x8,%rax
  4038cf:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4038d3:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4038d7:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  4038db:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  4038e2:	48 83 c0 10          	add    $0x10,%rax
  4038e6:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4038ea:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4038f1:	48 83 c0 10          	add    $0x10,%rax
  4038f5:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4038f9:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4038fd:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  403901:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  403908:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  40390c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  403910:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  403917:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  40391b:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  403922:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  403929:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40392d:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  403934:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403938:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  40393c:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  403943:	48 83 c0 08          	add    $0x8,%rax
  403947:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40394b:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  403952:	48 83 c0 08          	add    $0x8,%rax
  403956:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40395a:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  40395e:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  403962:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  403969:	48 83 c0 10          	add    $0x10,%rax
  40396d:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403971:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  403978:	48 83 c0 10          	add    $0x10,%rax
  40397c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403980:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403984:	f2 0f 58 c1          	addsd  %xmm1,%xmm0

    /* specular = (dot_product(r, -d))^p */
    *specular = pow(MAX(0, dot_product(r, d_copy)), phong_pow);
  403988:	66 0f ef c9          	pxor   %xmm1,%xmm1
  40398c:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  403990:	76 0a                	jbe    40399c <compute_specular_diffuse+0x888>
  403992:	b8 00 00 00 00       	mov    $0x0,%eax
  403997:	e9 81 00 00 00       	jmpq   403a1d <compute_specular_diffuse+0x909>
  40399c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4039a0:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4039a7:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4039ab:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  4039b2:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4039b9:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4039bd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4039c4:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4039c8:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  4039cc:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4039d3:	48 83 c0 08          	add    $0x8,%rax
  4039d7:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4039db:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4039e2:	48 83 c0 08          	add    $0x8,%rax
  4039e6:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4039ea:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4039ee:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  4039f2:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4039f9:	48 83 c0 10          	add    $0x10,%rax
  4039fd:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403a01:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403a08:	48 83 c0 10          	add    $0x10,%rax
  403a0c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403a10:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403a14:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  403a18:	66 48 0f 7e c8       	movq   %xmm1,%rax
  403a1d:	f2 0f 10 85 50 fe ff 	movsd  -0x1b0(%rbp),%xmm0
  403a24:	ff 
  403a25:	66 0f 28 c8          	movapd %xmm0,%xmm1
  403a29:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
  403a30:	f2 0f 10 85 48 fe ff 	movsd  -0x1b8(%rbp),%xmm0
  403a37:	ff 
  403a38:	e8 e3 cf ff ff       	callq  400a20 <pow@plt>
  403a3d:	66 48 0f 7e c2       	movq   %xmm0,%rdx
  403a42:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  403a49:	48 89 10             	mov    %rdx,(%rax)
}
  403a4c:	90                   	nop
  403a4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403a51:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  403a58:	00 00 
  403a5a:	74 05                	je     403a61 <compute_specular_diffuse+0x94d>
  403a5c:	e8 9f cf ff ff       	callq  400a00 <__stack_chk_fail@plt>
  403a61:	c9                   	leaveq 
  403a62:	c3                   	retq   

0000000000403a63 <reflection>:
/* @param r direction of reflected ray
 * @param d direction of primary ray into intersection
 * @param n surface normal at intersection
 */
static void reflection(point3 r, const point3 d, const point3 n, double dn)
{
  403a63:	55                   	push   %rbp
  403a64:	48 89 e5             	mov    %rsp,%rbp
  403a67:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  403a6b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  403a6f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  403a73:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)
    /* r = d - 2(d . n)n */
    multiply_vector(n, -2.0 * dn, r);
  403a78:	f2 0f 10 4d b0       	movsd  -0x50(%rbp),%xmm1
  403a7d:	f2 0f 10 05 93 2f 00 	movsd  0x2f93(%rip),%xmm0        # 406a18 <_IO_stdin_used+0x38>
  403a84:	00 
  403a85:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  403a89:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403a8d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  403a91:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
  403a96:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403a9a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  403a9e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403aa2:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403aa6:	f2 0f 59 45 f0       	mulsd  -0x10(%rbp),%xmm0
  403aab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403aaf:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  403ab3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ab7:	48 83 c0 08          	add    $0x8,%rax
  403abb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  403abf:	48 83 c2 08          	add    $0x8,%rdx
  403ac3:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403ac7:	f2 0f 59 45 f0       	mulsd  -0x10(%rbp),%xmm0
  403acc:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  403ad0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ad4:	48 83 c0 10          	add    $0x10,%rax
  403ad8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  403adc:	48 83 c2 10          	add    $0x10,%rdx
  403ae0:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403ae4:	f2 0f 59 45 f0       	mulsd  -0x10(%rbp),%xmm0
  403ae9:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  403aed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403af1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  403af5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  403af9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  403afd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403b01:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  403b05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403b09:	f2 0f 10 08          	movsd  (%rax),%xmm1
  403b0d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403b11:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403b15:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  403b19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403b1d:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  403b21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403b25:	48 83 c0 08          	add    $0x8,%rax
  403b29:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403b2d:	48 83 c2 08          	add    $0x8,%rdx
  403b31:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  403b35:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403b39:	48 83 c2 08          	add    $0x8,%rdx
  403b3d:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403b41:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  403b45:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  403b49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403b4d:	48 83 c0 10          	add    $0x10,%rax
  403b51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403b55:	48 83 c2 10          	add    $0x10,%rdx
  403b59:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  403b5d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403b61:	48 83 c2 10          	add    $0x10,%rdx
  403b65:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403b69:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  403b6d:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    add_vector(r, d, r);
}
  403b71:	90                   	nop
  403b72:	5d                   	pop    %rbp
  403b73:	c3                   	retq   

0000000000403b74 <refraction>:

/* reference: https://www.opengl.org/sdk/docs/man/html/refract.xhtml */
static void refraction(point3 t, const point3 I, const point3 N,
                       double n1, double n2, double dot_NI)
{
  403b74:	55                   	push   %rbp
  403b75:	48 89 e5             	mov    %rsp,%rbp
  403b78:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
  403b7f:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  403b86:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
  403b8d:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  403b94:	f2 0f 11 85 60 ff ff 	movsd  %xmm0,-0xa0(%rbp)
  403b9b:	ff 
  403b9c:	f2 0f 11 8d 58 ff ff 	movsd  %xmm1,-0xa8(%rbp)
  403ba3:	ff 
  403ba4:	f2 0f 11 95 50 ff ff 	movsd  %xmm2,-0xb0(%rbp)
  403bab:	ff 
  403bac:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  403bb3:	00 00 
  403bb5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  403bb9:	31 c0                	xor    %eax,%eax
    double eta = n1 / n2;
  403bbb:	f2 0f 10 85 60 ff ff 	movsd  -0xa0(%rbp),%xmm0
  403bc2:	ff 
  403bc3:	f2 0f 5e 85 58 ff ff 	divsd  -0xa8(%rbp),%xmm0
  403bca:	ff 
  403bcb:	f2 0f 11 45 88       	movsd  %xmm0,-0x78(%rbp)
    //double dot_NI = dot_product(N,I);
    double k = 1.0 - eta * eta * (1.0 - dot_NI * dot_NI);
  403bd0:	f2 0f 10 45 88       	movsd  -0x78(%rbp),%xmm0
  403bd5:	66 0f 28 c8          	movapd %xmm0,%xmm1
  403bd9:	f2 0f 59 4d 88       	mulsd  -0x78(%rbp),%xmm1
  403bde:	f2 0f 10 85 50 ff ff 	movsd  -0xb0(%rbp),%xmm0
  403be5:	ff 
  403be6:	f2 0f 59 85 50 ff ff 	mulsd  -0xb0(%rbp),%xmm0
  403bed:	ff 
  403bee:	f2 0f 10 15 0a 2e 00 	movsd  0x2e0a(%rip),%xmm2        # 406a00 <_IO_stdin_used+0x20>
  403bf5:	00 
  403bf6:	f2 0f 5c d0          	subsd  %xmm0,%xmm2
  403bfa:	66 0f 28 c2          	movapd %xmm2,%xmm0
  403bfe:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  403c02:	f2 0f 10 0d f6 2d 00 	movsd  0x2df6(%rip),%xmm1        # 406a00 <_IO_stdin_used+0x20>
  403c09:	00 
  403c0a:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
  403c0e:	66 0f 28 c1          	movapd %xmm1,%xmm0
  403c12:	f2 0f 11 45 90       	movsd  %xmm0,-0x70(%rbp)
    if (k < 0.0 || n2 <= 0.0)
  403c17:	66 0f ef c0          	pxor   %xmm0,%xmm0
  403c1b:	66 0f 2e 45 90       	ucomisd -0x70(%rbp),%xmm0
  403c20:	77 0e                	ja     403c30 <refraction+0xbc>
  403c22:	66 0f ef c0          	pxor   %xmm0,%xmm0
  403c26:	66 0f 2e 85 58 ff ff 	ucomisd -0xa8(%rbp),%xmm0
  403c2d:	ff 
  403c2e:	72 3a                	jb     403c6a <refraction+0xf6>
        t[0] = t[1] = t[2] = 0.0;
  403c30:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403c37:	48 83 c0 08          	add    $0x8,%rax
  403c3b:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  403c42:	48 83 c2 10          	add    $0x10,%rdx
  403c46:	66 0f ef c0          	pxor   %xmm0,%xmm0
  403c4a:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
  403c4e:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403c52:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  403c56:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403c5a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403c61:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  403c65:	e9 95 01 00 00       	jmpq   403dff <refraction+0x28b>
  403c6a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  403c71:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  403c75:	f2 0f 10 45 88       	movsd  -0x78(%rbp),%xmm0
  403c7a:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
  403c7f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403c86:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  403c8a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403c8e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403c92:	f2 0f 59 45 d0       	mulsd  -0x30(%rbp),%xmm0
  403c97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403c9b:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  403c9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403ca3:	48 83 c0 08          	add    $0x8,%rax
  403ca7:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  403cab:	48 83 c2 08          	add    $0x8,%rdx
  403caf:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403cb3:	f2 0f 59 45 d0       	mulsd  -0x30(%rbp),%xmm0
  403cb8:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  403cbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403cc0:	48 83 c0 10          	add    $0x10,%rax
  403cc4:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  403cc8:	48 83 c2 10          	add    $0x10,%rdx
  403ccc:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403cd0:	f2 0f 59 45 d0       	mulsd  -0x30(%rbp),%xmm0
  403cd5:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    else {
        point3 tmp;
        multiply_vector(I, eta, t);
        multiply_vector(N, eta * dot_NI + sqrt(k), tmp);
  403cd9:	f2 0f 10 45 88       	movsd  -0x78(%rbp),%xmm0
  403cde:	f2 0f 59 85 50 ff ff 	mulsd  -0xb0(%rbp),%xmm0
  403ce5:	ff 
  403ce6:	f2 0f 11 85 48 ff ff 	movsd  %xmm0,-0xb8(%rbp)
  403ced:	ff 
  403cee:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  403cf2:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  403cf9:	f2 0f 10 85 40 ff ff 	movsd  -0xc0(%rbp),%xmm0
  403d00:	ff 
  403d01:	e8 da cd ff ff       	callq  400ae0 <sqrt@plt>
  403d06:	f2 0f 58 85 48 ff ff 	addsd  -0xb8(%rbp),%xmm0
  403d0d:	ff 
  403d0e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  403d15:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  403d19:	f2 0f 11 45 c0       	movsd  %xmm0,-0x40(%rbp)
  403d1e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  403d22:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  403d26:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403d2a:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403d2e:	f2 0f 59 45 c0       	mulsd  -0x40(%rbp),%xmm0
  403d33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403d37:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  403d3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403d3f:	48 83 c0 08          	add    $0x8,%rax
  403d43:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403d47:	48 83 c2 08          	add    $0x8,%rdx
  403d4b:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403d4f:	f2 0f 59 45 c0       	mulsd  -0x40(%rbp),%xmm0
  403d54:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  403d58:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403d5c:	48 83 c0 10          	add    $0x10,%rax
  403d60:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  403d64:	48 83 c2 10          	add    $0x10,%rdx
  403d68:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403d6c:	f2 0f 59 45 c0       	mulsd  -0x40(%rbp),%xmm0
  403d71:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  403d75:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403d7c:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  403d80:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  403d84:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  403d88:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  403d8f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  403d93:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403d97:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403d9b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403d9f:	f2 0f 10 08          	movsd  (%rax),%xmm1
  403da3:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  403da7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403dab:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  403daf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403db3:	48 83 c0 08          	add    $0x8,%rax
  403db7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  403dbb:	48 83 c2 08          	add    $0x8,%rdx
  403dbf:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403dc3:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  403dc7:	48 83 c2 08          	add    $0x8,%rdx
  403dcb:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  403dcf:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  403dd3:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  403dd7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403ddb:	48 83 c0 10          	add    $0x10,%rax
  403ddf:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  403de3:	48 83 c2 10          	add    $0x10,%rdx
  403de7:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  403deb:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  403def:	48 83 c2 10          	add    $0x10,%rdx
  403df3:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  403df7:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  403dfb:	f2 0f 11 00          	movsd  %xmm0,(%rax)

        subtract_vector(t, tmp, t);
    }
}
  403dff:	90                   	nop
  403e00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403e04:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  403e0b:	00 00 
  403e0d:	74 05                	je     403e14 <refraction+0x2a0>
  403e0f:	e8 ec cb ff ff       	callq  400a00 <__stack_chk_fail@plt>
  403e14:	c9                   	leaveq 
  403e15:	c3                   	retq   

0000000000403e16 <fresnel>:
 *
 * reference: http://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf
 */
static double fresnel(const point3 r, const point3 l,
                      const point3 normal, double n1, double n2)
{
  403e16:	55                   	push   %rbp
  403e17:	48 89 e5             	mov    %rsp,%rbp
  403e1a:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  403e1e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  403e22:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  403e26:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  403e2a:	f2 0f 11 45 90       	movsd  %xmm0,-0x70(%rbp)
  403e2f:	f2 0f 11 4d 88       	movsd  %xmm1,-0x78(%rbp)
  403e34:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403e38:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static inline __attribute__((always_inline))
double length(const double *v)
{
    return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  403e3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403e40:	f2 0f 10 08          	movsd  (%rax),%xmm1
  403e44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403e48:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403e4c:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  403e50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403e54:	48 83 c0 08          	add    $0x8,%rax
  403e58:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403e5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403e60:	48 83 c0 08          	add    $0x8,%rax
  403e64:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403e68:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403e6c:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  403e70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403e74:	48 83 c0 10          	add    $0x10,%rax
  403e78:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403e7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403e80:	48 83 c0 10          	add    $0x10,%rax
  403e84:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403e88:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403e8c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  403e90:	e8 4b cc ff ff       	callq  400ae0 <sqrt@plt>
  403e95:	66 0f 28 c8          	movapd %xmm0,%xmm1
    /* TIR */
    if (length(l) < 0.99)
  403e99:	f2 0f 10 05 7f 2b 00 	movsd  0x2b7f(%rip),%xmm0        # 406a20 <_IO_stdin_used+0x40>
  403ea0:	00 
  403ea1:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  403ea5:	76 0d                	jbe    403eb4 <fresnel+0x9e>
        return 1.0;
  403ea7:	f2 0f 10 05 51 2b 00 	movsd  0x2b51(%rip),%xmm0        # 406a00 <_IO_stdin_used+0x20>
  403eae:	00 
  403eaf:	e9 8c 01 00 00       	jmpq   404040 <fresnel+0x22a>
  403eb4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403eb8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  403ebc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403ec0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  403ec4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403ec8:	f2 0f 10 08          	movsd  (%rax),%xmm1
  403ecc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ed0:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403ed4:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  403ed8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403edc:	48 83 c0 08          	add    $0x8,%rax
  403ee0:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403ee4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403ee8:	48 83 c0 08          	add    $0x8,%rax
  403eec:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403ef0:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403ef4:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  403ef8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403efc:	48 83 c0 10          	add    $0x10,%rax
  403f00:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403f04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403f08:	48 83 c0 10          	add    $0x10,%rax
  403f0c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403f10:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403f14:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    double cos_theta_i = -dot_product(r, normal);
  403f18:	f2 0f 10 0d 10 2b 00 	movsd  0x2b10(%rip),%xmm1        # 406a30 <_IO_stdin_used+0x50>
  403f1f:	00 
  403f20:	66 0f 57 c1          	xorpd  %xmm1,%xmm0
  403f24:	f2 0f 11 45 c0       	movsd  %xmm0,-0x40(%rbp)
  403f29:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403f2d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  403f31:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403f35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  403f39:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403f3d:	f2 0f 10 08          	movsd  (%rax),%xmm1
  403f41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403f45:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403f49:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  403f4d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403f51:	48 83 c0 08          	add    $0x8,%rax
  403f55:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403f59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403f5d:	48 83 c0 08          	add    $0x8,%rax
  403f61:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403f65:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403f69:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  403f6d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403f71:	48 83 c0 10          	add    $0x10,%rax
  403f75:	f2 0f 10 10          	movsd  (%rax),%xmm2
  403f79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403f7d:	48 83 c0 10          	add    $0x10,%rax
  403f81:	f2 0f 10 00          	movsd  (%rax),%xmm0
  403f85:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  403f89:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    double cos_theta_t = -dot_product(l, normal);
  403f8d:	f2 0f 10 0d 9b 2a 00 	movsd  0x2a9b(%rip),%xmm1        # 406a30 <_IO_stdin_used+0x50>
  403f94:	00 
  403f95:	66 0f 57 c1          	xorpd  %xmm1,%xmm0
  403f99:	f2 0f 11 45 d0       	movsd  %xmm0,-0x30(%rbp)
    double r_vertical_root = (n1 * cos_theta_i - n2 * cos_theta_t) /
  403f9e:	f2 0f 10 45 90       	movsd  -0x70(%rbp),%xmm0
  403fa3:	f2 0f 59 45 c0       	mulsd  -0x40(%rbp),%xmm0
  403fa8:	f2 0f 10 4d 88       	movsd  -0x78(%rbp),%xmm1
  403fad:	f2 0f 59 4d d0       	mulsd  -0x30(%rbp),%xmm1
  403fb2:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
                             (n1 * cos_theta_i + n2 * cos_theta_t);
  403fb6:	f2 0f 10 4d 90       	movsd  -0x70(%rbp),%xmm1
  403fbb:	66 0f 28 d1          	movapd %xmm1,%xmm2
  403fbf:	f2 0f 59 55 c0       	mulsd  -0x40(%rbp),%xmm2
  403fc4:	f2 0f 10 4d 88       	movsd  -0x78(%rbp),%xmm1
  403fc9:	f2 0f 59 4d d0       	mulsd  -0x30(%rbp),%xmm1
  403fce:	f2 0f 58 ca          	addsd  %xmm2,%xmm1
    /* TIR */
    if (length(l) < 0.99)
        return 1.0;
    double cos_theta_i = -dot_product(r, normal);
    double cos_theta_t = -dot_product(l, normal);
    double r_vertical_root = (n1 * cos_theta_i - n2 * cos_theta_t) /
  403fd2:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  403fd6:	f2 0f 11 45 d8       	movsd  %xmm0,-0x28(%rbp)
                             (n1 * cos_theta_i + n2 * cos_theta_t);
    double r_parallel_root = (n2 * cos_theta_i - n1 * cos_theta_t) /
  403fdb:	f2 0f 10 45 88       	movsd  -0x78(%rbp),%xmm0
  403fe0:	f2 0f 59 45 c0       	mulsd  -0x40(%rbp),%xmm0
  403fe5:	f2 0f 10 4d 90       	movsd  -0x70(%rbp),%xmm1
  403fea:	f2 0f 59 4d d0       	mulsd  -0x30(%rbp),%xmm1
  403fef:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
                             (n2 * cos_theta_i + n1 * cos_theta_t);
  403ff3:	f2 0f 10 4d 88       	movsd  -0x78(%rbp),%xmm1
  403ff8:	66 0f 28 d1          	movapd %xmm1,%xmm2
  403ffc:	f2 0f 59 55 c0       	mulsd  -0x40(%rbp),%xmm2
  404001:	f2 0f 10 4d 90       	movsd  -0x70(%rbp),%xmm1
  404006:	f2 0f 59 4d d0       	mulsd  -0x30(%rbp),%xmm1
  40400b:	f2 0f 58 ca          	addsd  %xmm2,%xmm1
        return 1.0;
    double cos_theta_i = -dot_product(r, normal);
    double cos_theta_t = -dot_product(l, normal);
    double r_vertical_root = (n1 * cos_theta_i - n2 * cos_theta_t) /
                             (n1 * cos_theta_i + n2 * cos_theta_t);
    double r_parallel_root = (n2 * cos_theta_i - n1 * cos_theta_t) /
  40400f:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  404013:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
                             (n2 * cos_theta_i + n1 * cos_theta_t);
    return (r_vertical_root * r_vertical_root +
  404018:	f2 0f 10 45 d8       	movsd  -0x28(%rbp),%xmm0
  40401d:	66 0f 28 c8          	movapd %xmm0,%xmm1
  404021:	f2 0f 59 4d d8       	mulsd  -0x28(%rbp),%xmm1
            r_parallel_root * r_parallel_root) / 2.0;
  404026:	f2 0f 10 45 e0       	movsd  -0x20(%rbp),%xmm0
  40402b:	f2 0f 59 45 e0       	mulsd  -0x20(%rbp),%xmm0
    double cos_theta_t = -dot_product(l, normal);
    double r_vertical_root = (n1 * cos_theta_i - n2 * cos_theta_t) /
                             (n1 * cos_theta_i + n2 * cos_theta_t);
    double r_parallel_root = (n2 * cos_theta_i - n1 * cos_theta_t) /
                             (n2 * cos_theta_i + n1 * cos_theta_t);
    return (r_vertical_root * r_vertical_root +
  404030:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404034:	f2 0f 10 0d d4 29 00 	movsd  0x29d4(%rip),%xmm1        # 406a10 <_IO_stdin_used+0x30>
  40403b:	00 
  40403c:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
            r_parallel_root * r_parallel_root) / 2.0;
}
  404040:	c9                   	leaveq 
  404041:	c3                   	retq   

0000000000404042 <ray_hit_object>:
                                   double t0, double t1,
                                   const rectangular_node rectangulars,
                                   rectangular_node *hit_rectangular,
                                   const sphere_node spheres,
                                   sphere_node *hit_sphere)
{
  404042:	55                   	push   %rbp
  404043:	48 89 e5             	mov    %rsp,%rbp
  404046:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp
  40404d:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  404054:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  40405b:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  404062:	f2 0f 11 85 00 ff ff 	movsd  %xmm0,-0x100(%rbp)
  404069:	ff 
  40406a:	f2 0f 11 8d f8 fe ff 	movsd  %xmm1,-0x108(%rbp)
  404071:	ff 
  404072:	48 89 8d f0 fe ff ff 	mov    %rcx,-0x110(%rbp)
  404079:	4c 89 85 e8 fe ff ff 	mov    %r8,-0x118(%rbp)
  404080:	4c 89 8d e0 fe ff ff 	mov    %r9,-0x120(%rbp)
  404087:	48 8b 45 10          	mov    0x10(%rbp),%rax
  40408b:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  404092:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  404099:	00 00 
  40409b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  40409f:	31 c0                	xor    %eax,%eax
    /* set these to not hit */
    *hit_rectangular = NULL;
  4040a1:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  4040a8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    *hit_sphere = NULL;
  4040af:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  4040b6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  4040bd:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  4040c4:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4040cb:	f2 0f 10 85 00 ff ff 	movsd  -0x100(%rbp),%xmm0
  4040d2:	ff 
  4040d3:	f2 0f 11 85 60 ff ff 	movsd  %xmm0,-0xa0(%rbp)
  4040da:	ff 
  4040db:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  4040e2:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  4040e9:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  4040f0:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4040f4:	f2 0f 59 85 60 ff ff 	mulsd  -0xa0(%rbp),%xmm0
  4040fb:	ff 
  4040fc:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  404103:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  404107:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40410e:	48 83 c0 08          	add    $0x8,%rax
  404112:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  404119:	48 83 c2 08          	add    $0x8,%rdx
  40411d:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404121:	f2 0f 59 85 60 ff ff 	mulsd  -0xa0(%rbp),%xmm0
  404128:	ff 
  404129:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  40412d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  404134:	48 83 c0 10          	add    $0x10,%rax
  404138:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  40413f:	48 83 c2 10          	add    $0x10,%rdx
  404143:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404147:	f2 0f 59 85 60 ff ff 	mulsd  -0xa0(%rbp),%xmm0
  40414e:	ff 
  40414f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  404153:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  40415a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  404161:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  404168:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  40416f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  404176:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  40417d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  404184:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404188:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  40418f:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404193:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404197:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40419e:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  4041a2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  4041a9:	48 83 c0 08          	add    $0x8,%rax
  4041ad:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  4041b4:	48 83 c2 08          	add    $0x8,%rdx
  4041b8:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4041bc:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  4041c3:	48 83 c2 08          	add    $0x8,%rdx
  4041c7:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4041cb:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4041cf:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  4041d3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  4041da:	48 83 c0 10          	add    $0x10,%rax
  4041de:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  4041e5:	48 83 c2 10          	add    $0x10,%rdx
  4041e9:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4041ed:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  4041f4:	48 83 c2 10          	add    $0x10,%rdx
  4041f8:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4041fc:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404200:	f2 0f 11 00          	movsd  %xmm0,(%rax)

    point3 biased_e; // biased_e = e + t0 * d;
    multiply_vector(d, t0, biased_e);
    add_vector(biased_e, e, biased_e);

    double nearest = t1;
  404204:	f2 0f 10 85 f8 fe ff 	movsd  -0x108(%rbp),%xmm0
  40420b:	ff 
  40420c:	f2 0f 11 85 28 ff ff 	movsd  %xmm0,-0xd8(%rbp)
  404213:	ff 
    intersection result, tmpresult;


    for (rectangular_node rec = rectangulars; rec; rec = rec->next) {
  404214:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  40421b:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  404222:	e9 ab 00 00 00       	jmpq   4042d2 <ray_hit_object+0x290>
        if (rayRectangularIntersection(biased_e, d, &(rec->element),
  404227:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  40422e:	48 8d bd f8 fe ff ff 	lea    -0x108(%rbp),%rdi
  404235:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  404239:	48 8b b5 08 ff ff ff 	mov    -0xf8(%rbp),%rsi
  404240:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  404247:	49 89 f8             	mov    %rdi,%r8
  40424a:	48 89 c7             	mov    %rax,%rdi
  40424d:	e8 0a d6 ff ff       	callq  40185c <rayRectangularIntersection>
  404252:	85 c0                	test   %eax,%eax
  404254:	74 67                	je     4042bd <ray_hit_object+0x27b>
                                       &tmpresult, &t1) && (t1 < nearest)) {
  404256:	f2 0f 10 8d f8 fe ff 	movsd  -0x108(%rbp),%xmm1
  40425d:	ff 
  40425e:	f2 0f 10 85 28 ff ff 	movsd  -0xd8(%rbp),%xmm0
  404265:	ff 
  404266:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  40426a:	76 51                	jbe    4042bd <ray_hit_object+0x27b>
            /* hit is closest so far */
            *hit_rectangular = rec;
  40426c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  404273:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  40427a:	48 89 10             	mov    %rdx,(%rax)
            nearest = t1;
  40427d:	f2 0f 10 85 f8 fe ff 	movsd  -0x108(%rbp),%xmm0
  404284:	ff 
  404285:	f2 0f 11 85 28 ff ff 	movsd  %xmm0,-0xd8(%rbp)
  40428c:	ff 
            result = tmpresult;
  40428d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404291:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  404295:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404299:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  40429d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4042a1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  4042a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4042a9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  4042ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4042b1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  4042b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4042b9:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

    double nearest = t1;
    intersection result, tmpresult;


    for (rectangular_node rec = rectangulars; rec; rec = rec->next) {
  4042bd:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  4042c4:	48 8b 80 c0 00 00 00 	mov    0xc0(%rax),%rax
  4042cb:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  4042d2:	48 83 bd 30 ff ff ff 	cmpq   $0x0,-0xd0(%rbp)
  4042d9:	00 
  4042da:	0f 85 47 ff ff ff    	jne    404227 <ray_hit_object+0x1e5>
            result = tmpresult;
        }
    }

    /* check the spheres */
    for (sphere_node sphere = spheres; sphere; sphere = sphere->next) {
  4042e0:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4042e7:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  4042ee:	e9 b6 00 00 00       	jmpq   4043a9 <ray_hit_object+0x367>
        if (raySphereIntersection(biased_e, d, &(sphere->element),
  4042f3:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  4042fa:	48 8d bd f8 fe ff ff 	lea    -0x108(%rbp),%rdi
  404301:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  404305:	48 8b b5 08 ff ff ff 	mov    -0xf8(%rbp),%rsi
  40430c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  404313:	49 89 f8             	mov    %rdi,%r8
  404316:	48 89 c7             	mov    %rax,%rdi
  404319:	e8 93 ce ff ff       	callq  4011b1 <raySphereIntersection>
  40431e:	85 c0                	test   %eax,%eax
  404320:	74 75                	je     404397 <ray_hit_object+0x355>
                                  &tmpresult, &t1) && (t1 < nearest)) {
  404322:	f2 0f 10 8d f8 fe ff 	movsd  -0x108(%rbp),%xmm1
  404329:	ff 
  40432a:	f2 0f 10 85 28 ff ff 	movsd  -0xd8(%rbp),%xmm0
  404331:	ff 
  404332:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  404336:	76 5f                	jbe    404397 <ray_hit_object+0x355>
            *hit_sphere = sphere;
  404338:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  40433f:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  404346:	48 89 10             	mov    %rdx,(%rax)
            *hit_rectangular = NULL;
  404349:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  404350:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            nearest = t1;
  404357:	f2 0f 10 85 f8 fe ff 	movsd  -0x108(%rbp),%xmm0
  40435e:	ff 
  40435f:	f2 0f 11 85 28 ff ff 	movsd  %xmm0,-0xd8(%rbp)
  404366:	ff 
            result = tmpresult;
  404367:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  40436b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  40436f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  404373:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  404377:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40437b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  40437f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404383:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  404387:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40438b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  40438f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404393:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
            result = tmpresult;
        }
    }

    /* check the spheres */
    for (sphere_node sphere = spheres; sphere; sphere = sphere->next) {
  404397:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40439e:	48 8b 40 68          	mov    0x68(%rax),%rax
  4043a2:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  4043a9:	48 83 bd 38 ff ff ff 	cmpq   $0x0,-0xc8(%rbp)
  4043b0:	00 
  4043b1:	0f 85 3c ff ff ff    	jne    4042f3 <ray_hit_object+0x2b1>
            nearest = t1;
            result = tmpresult;
        }
    }
    
    return result;
  4043b7:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4043be:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  4043c2:	48 89 10             	mov    %rdx,(%rax)
  4043c5:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  4043c9:	48 89 50 08          	mov    %rdx,0x8(%rax)
  4043cd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4043d1:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4043d5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  4043d9:	48 89 50 18          	mov    %rdx,0x18(%rax)
  4043dd:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  4043e1:	48 89 50 20          	mov    %rdx,0x20(%rax)
  4043e5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4043e9:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
  4043ed:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4043f4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4043f8:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4043ff:	00 00 
  404401:	74 05                	je     404408 <ray_hit_object+0x3c6>
  404403:	e8 f8 c5 ff ff       	callq  400a00 <__stack_chk_fail@plt>
  404408:	c9                   	leaveq 
  404409:	c3                   	retq   

000000000040440a <rayConstruction>:
 */
static void rayConstruction(point3 d, const point3 u, const point3 v,
                            const point3 w, unsigned int i, unsigned int j,
                            const viewpoint *view, unsigned int width,
                            unsigned int height)
{
  40440a:	55                   	push   %rbp
  40440b:	48 89 e5             	mov    %rsp,%rbp
  40440e:	48 81 ec b0 01 00 00 	sub    $0x1b0,%rsp
  404415:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
  40441c:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
  404423:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
  40442a:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
  404431:	44 89 85 5c fe ff ff 	mov    %r8d,-0x1a4(%rbp)
  404438:	44 89 8d 58 fe ff ff 	mov    %r9d,-0x1a8(%rbp)
  40443f:	48 8b 45 10          	mov    0x10(%rbp),%rax
  404443:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  40444a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  404451:	00 00 
  404453:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  404457:	31 c0                	xor    %eax,%eax
    double xmin = -0.0175;
  404459:	f2 0f 10 05 df 25 00 	movsd  0x25df(%rip),%xmm0        # 406a40 <_IO_stdin_used+0x60>
  404460:	00 
  404461:	f2 0f 11 85 88 fe ff 	movsd  %xmm0,-0x178(%rbp)
  404468:	ff 
    double ymin = -0.0175;
  404469:	f2 0f 10 05 cf 25 00 	movsd  0x25cf(%rip),%xmm0        # 406a40 <_IO_stdin_used+0x60>
  404470:	00 
  404471:	f2 0f 11 85 90 fe ff 	movsd  %xmm0,-0x170(%rbp)
  404478:	ff 
    double xmax =  0.0175;
  404479:	f2 0f 10 05 c7 25 00 	movsd  0x25c7(%rip),%xmm0        # 406a48 <_IO_stdin_used+0x68>
  404480:	00 
  404481:	f2 0f 11 85 98 fe ff 	movsd  %xmm0,-0x168(%rbp)
  404488:	ff 
    double ymax =  0.0175;
  404489:	f2 0f 10 05 b7 25 00 	movsd  0x25b7(%rip),%xmm0        # 406a48 <_IO_stdin_used+0x68>
  404490:	00 
  404491:	f2 0f 11 85 a0 fe ff 	movsd  %xmm0,-0x160(%rbp)
  404498:	ff 
    double focal = 0.05;
  404499:	f2 0f 10 05 af 25 00 	movsd  0x25af(%rip),%xmm0        # 406a50 <_IO_stdin_used+0x70>
  4044a0:	00 
  4044a1:	f2 0f 11 85 a8 fe ff 	movsd  %xmm0,-0x158(%rbp)
  4044a8:	ff 

    point3 u_tmp, v_tmp, w_tmp, s;

    double w_s = focal;
  4044a9:	f2 0f 10 85 a8 fe ff 	movsd  -0x158(%rbp),%xmm0
  4044b0:	ff 
  4044b1:	f2 0f 11 85 b0 fe ff 	movsd  %xmm0,-0x150(%rbp)
  4044b8:	ff 
    double u_s = xmin + ((xmax - xmin) * (float) i / (width - 1)); 
  4044b9:	f2 0f 10 85 98 fe ff 	movsd  -0x168(%rbp),%xmm0
  4044c0:	ff 
  4044c1:	66 0f 28 c8          	movapd %xmm0,%xmm1
  4044c5:	f2 0f 5c 8d 88 fe ff 	subsd  -0x178(%rbp),%xmm1
  4044cc:	ff 
  4044cd:	8b 85 5c fe ff ff    	mov    -0x1a4(%rbp),%eax
  4044d3:	48 85 c0             	test   %rax,%rax
  4044d6:	78 0b                	js     4044e3 <rayConstruction+0xd9>
  4044d8:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4044dc:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  4044e1:	eb 19                	jmp    4044fc <rayConstruction+0xf2>
  4044e3:	48 89 c2             	mov    %rax,%rdx
  4044e6:	48 d1 ea             	shr    %rdx
  4044e9:	83 e0 01             	and    $0x1,%eax
  4044ec:	48 09 c2             	or     %rax,%rdx
  4044ef:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4044f3:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  4044f8:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  4044fc:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  404500:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  404504:	8b 45 18             	mov    0x18(%rbp),%eax
  404507:	83 e8 01             	sub    $0x1,%eax
  40450a:	89 c0                	mov    %eax,%eax
  40450c:	48 85 c0             	test   %rax,%rax
  40450f:	78 0b                	js     40451c <rayConstruction+0x112>
  404511:	66 0f ef c0          	pxor   %xmm0,%xmm0
  404515:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  40451a:	eb 19                	jmp    404535 <rayConstruction+0x12b>
  40451c:	48 89 c2             	mov    %rax,%rdx
  40451f:	48 d1 ea             	shr    %rdx
  404522:	83 e0 01             	and    $0x1,%eax
  404525:	48 09 c2             	or     %rax,%rdx
  404528:	66 0f ef c0          	pxor   %xmm0,%xmm0
  40452c:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
  404531:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
  404535:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
  404539:	66 0f 28 c1          	movapd %xmm1,%xmm0
  40453d:	f2 0f 58 85 88 fe ff 	addsd  -0x178(%rbp),%xmm0
  404544:	ff 
  404545:	f2 0f 11 85 b8 fe ff 	movsd  %xmm0,-0x148(%rbp)
  40454c:	ff 
    double v_s = ymax + ((ymin - ymax) * (float) j / (height - 1)); 
  40454d:	f2 0f 10 85 90 fe ff 	movsd  -0x170(%rbp),%xmm0
  404554:	ff 
  404555:	66 0f 28 c8          	movapd %xmm0,%xmm1
  404559:	f2 0f 5c 8d a0 fe ff 	subsd  -0x160(%rbp),%xmm1
  404560:	ff 
  404561:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  404567:	48 85 c0             	test   %rax,%rax
  40456a:	78 0b                	js     404577 <rayConstruction+0x16d>
  40456c:	66 0f ef c0          	pxor   %xmm0,%xmm0
  404570:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  404575:	eb 19                	jmp    404590 <rayConstruction+0x186>
  404577:	48 89 c2             	mov    %rax,%rdx
  40457a:	48 d1 ea             	shr    %rdx
  40457d:	83 e0 01             	and    $0x1,%eax
  404580:	48 09 c2             	or     %rax,%rdx
  404583:	66 0f ef c0          	pxor   %xmm0,%xmm0
  404587:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  40458c:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  404590:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  404594:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  404598:	8b 45 20             	mov    0x20(%rbp),%eax
  40459b:	83 e8 01             	sub    $0x1,%eax
  40459e:	89 c0                	mov    %eax,%eax
  4045a0:	48 85 c0             	test   %rax,%rax
  4045a3:	78 0b                	js     4045b0 <rayConstruction+0x1a6>
  4045a5:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4045a9:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  4045ae:	eb 19                	jmp    4045c9 <rayConstruction+0x1bf>
  4045b0:	48 89 c2             	mov    %rax,%rdx
  4045b3:	48 d1 ea             	shr    %rdx
  4045b6:	83 e0 01             	and    $0x1,%eax
  4045b9:	48 09 c2             	or     %rax,%rdx
  4045bc:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4045c0:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
  4045c5:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
  4045c9:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
  4045cd:	66 0f 28 c1          	movapd %xmm1,%xmm0
  4045d1:	f2 0f 58 85 a0 fe ff 	addsd  -0x160(%rbp),%xmm0
  4045d8:	ff 
  4045d9:	f2 0f 11 85 c0 fe ff 	movsd  %xmm0,-0x140(%rbp)
  4045e0:	ff 
  4045e1:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  4045e8:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
  4045ef:	f2 0f 10 85 b8 fe ff 	movsd  -0x148(%rbp),%xmm0
  4045f6:	ff 
  4045f7:	f2 0f 11 85 70 ff ff 	movsd  %xmm0,-0x90(%rbp)
  4045fe:	ff 
  4045ff:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  404603:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  40460a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  404611:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404615:	f2 0f 59 85 70 ff ff 	mulsd  -0x90(%rbp),%xmm0
  40461c:	ff 
  40461d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  404624:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  404628:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  40462f:	48 83 c0 08          	add    $0x8,%rax
  404633:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
  40463a:	48 83 c2 08          	add    $0x8,%rdx
  40463e:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404642:	f2 0f 59 85 70 ff ff 	mulsd  -0x90(%rbp),%xmm0
  404649:	ff 
  40464a:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  40464e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  404655:	48 83 c0 10          	add    $0x10,%rax
  404659:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
  404660:	48 83 c2 10          	add    $0x10,%rdx
  404664:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404668:	f2 0f 59 85 70 ff ff 	mulsd  -0x90(%rbp),%xmm0
  40466f:	ff 
  404670:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  404674:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  40467b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  404682:	f2 0f 10 85 c0 fe ff 	movsd  -0x140(%rbp),%xmm0
  404689:	ff 
  40468a:	f2 0f 11 85 60 ff ff 	movsd  %xmm0,-0xa0(%rbp)
  404691:	ff 
  404692:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  404696:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  40469d:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  4046a4:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4046a8:	f2 0f 59 85 60 ff ff 	mulsd  -0xa0(%rbp),%xmm0
  4046af:	ff 
  4046b0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4046b7:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  4046bb:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4046c2:	48 83 c0 08          	add    $0x8,%rax
  4046c6:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  4046cd:	48 83 c2 08          	add    $0x8,%rdx
  4046d1:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4046d5:	f2 0f 59 85 60 ff ff 	mulsd  -0xa0(%rbp),%xmm0
  4046dc:	ff 
  4046dd:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  4046e1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4046e8:	48 83 c0 10          	add    $0x10,%rax
  4046ec:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  4046f3:	48 83 c2 10          	add    $0x10,%rdx
  4046f7:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4046fb:	f2 0f 59 85 60 ff ff 	mulsd  -0xa0(%rbp),%xmm0
  404702:	ff 
  404703:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  404707:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  40470e:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  404715:	f2 0f 10 85 b0 fe ff 	movsd  -0x150(%rbp),%xmm0
  40471c:	ff 
  40471d:	f2 0f 11 85 50 ff ff 	movsd  %xmm0,-0xb0(%rbp)
  404724:	ff 
  404725:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  404729:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  404730:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  404737:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40473b:	f2 0f 59 85 50 ff ff 	mulsd  -0xb0(%rbp),%xmm0
  404742:	ff 
  404743:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40474a:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  40474e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  404755:	48 83 c0 08          	add    $0x8,%rax
  404759:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  404760:	48 83 c2 08          	add    $0x8,%rdx
  404764:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404768:	f2 0f 59 85 50 ff ff 	mulsd  -0xb0(%rbp),%xmm0
  40476f:	ff 
  404770:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  404774:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  40477b:	48 83 c0 10          	add    $0x10,%rax
  40477f:	48 8b 95 d8 fe ff ff 	mov    -0x128(%rbp),%rdx
  404786:	48 83 c2 10          	add    $0x10,%rdx
  40478a:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40478e:	f2 0f 59 85 50 ff ff 	mulsd  -0xb0(%rbp),%xmm0
  404795:	ff 
  404796:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    /* s = e + u_s * u + v_s * v + w_s * w */
    multiply_vector(u, u_s, u_tmp);
    multiply_vector(v, v_s, v_tmp);
    multiply_vector(w, w_s, w_tmp);

    add_vector(view->vrp, u_tmp, s);
  40479a:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  4047a1:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  4047a8:	48 8d 45 80          	lea    -0x80(%rbp),%rax
  4047ac:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  4047b3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4047b7:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  4047be:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  4047c5:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4047c9:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  4047d0:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4047d4:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4047d8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  4047df:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  4047e3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  4047ea:	48 83 c0 08          	add    $0x8,%rax
  4047ee:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  4047f5:	48 83 c2 08          	add    $0x8,%rdx
  4047f9:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4047fd:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  404804:	48 83 c2 08          	add    $0x8,%rdx
  404808:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40480c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404810:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  404814:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  40481b:	48 83 c0 10          	add    $0x10,%rax
  40481f:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  404826:	48 83 c2 10          	add    $0x10,%rdx
  40482a:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  40482e:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  404835:	48 83 c2 10          	add    $0x10,%rdx
  404839:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40483d:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404841:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  404845:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  404849:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  404850:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  404854:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  40485b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  40485f:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  404866:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  40486d:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404871:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  404878:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40487c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404880:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  404887:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  40488b:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  404892:	48 83 c0 08          	add    $0x8,%rax
  404896:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  40489d:	48 83 c2 08          	add    $0x8,%rdx
  4048a1:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4048a5:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  4048ac:	48 83 c2 08          	add    $0x8,%rdx
  4048b0:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4048b4:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4048b8:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  4048bc:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  4048c3:	48 83 c0 10          	add    $0x10,%rax
  4048c7:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  4048ce:	48 83 c2 10          	add    $0x10,%rdx
  4048d2:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4048d6:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  4048dd:	48 83 c2 10          	add    $0x10,%rdx
  4048e1:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4048e5:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4048e9:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  4048ed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4048f1:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  4048f8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4048fc:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  404903:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  404907:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  40490e:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  404915:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404919:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  404920:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404924:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404928:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40492f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  404933:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40493a:	48 83 c0 08          	add    $0x8,%rax
  40493e:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  404945:	48 83 c2 08          	add    $0x8,%rdx
  404949:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  40494d:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  404954:	48 83 c2 08          	add    $0x8,%rdx
  404958:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40495c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404960:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  404964:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40496b:	48 83 c0 10          	add    $0x10,%rax
  40496f:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  404976:	48 83 c2 10          	add    $0x10,%rdx
  40497a:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  40497e:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  404985:	48 83 c2 10          	add    $0x10,%rdx
  404989:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  40498d:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404991:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    add_vector(s, v_tmp, s);
    add_vector(s, w_tmp, s);

    /* p(t) = e + td = e + t(s - e) */
    subtract_vector(s, view->vrp, d);
  404995:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  40499c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  4049a0:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  4049a7:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  4049ae:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  4049b5:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  4049bc:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  4049c3:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4049c7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  4049ce:	f2 0f 10 08          	movsd  (%rax),%xmm1
  4049d2:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4049d6:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4049dd:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  4049e1:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  4049e8:	48 83 c0 08          	add    $0x8,%rax
  4049ec:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  4049f3:	48 83 c2 08          	add    $0x8,%rdx
  4049f7:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4049fb:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  404a02:	48 83 c2 08          	add    $0x8,%rdx
  404a06:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  404a0a:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  404a0e:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  404a12:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  404a19:	48 83 c0 10          	add    $0x10,%rax
  404a1d:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  404a24:	48 83 c2 10          	add    $0x10,%rdx
  404a28:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404a2c:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  404a33:	48 83 c2 10          	add    $0x10,%rdx
  404a37:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  404a3b:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  404a3f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  404a43:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  404a4a:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)


static inline __attribute__((always_inline))
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  404a51:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  404a58:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404a5c:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  404a63:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404a67:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  404a6b:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  404a72:	48 83 c0 08          	add    $0x8,%rax
  404a76:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404a7a:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  404a81:	48 83 c0 08          	add    $0x8,%rax
  404a85:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404a89:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  404a8d:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  404a91:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  404a98:	48 83 c0 10          	add    $0x10,%rax
  404a9c:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404aa0:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  404aa7:	48 83 c0 10          	add    $0x10,%rax
  404aab:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404aaf:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  404ab3:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404ab7:	e8 24 c0 ff ff       	callq  400ae0 <sqrt@plt>
  404abc:	66 48 0f 7e c0       	movq   %xmm0,%rax
  404ac1:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
  404ac8:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  404acf:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404ad3:	f2 0f 5e 85 08 ff ff 	divsd  -0xf8(%rbp),%xmm0
  404ada:	ff 
  404adb:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  404ae2:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[1] /= d;
  404ae6:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  404aed:	48 83 c0 08          	add    $0x8,%rax
  404af1:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  404af8:	48 83 c2 08          	add    $0x8,%rdx
  404afc:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404b00:	f2 0f 5e 85 08 ff ff 	divsd  -0xf8(%rbp),%xmm0
  404b07:	ff 
  404b08:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[2] /= d;
  404b0c:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  404b13:	48 83 c0 10          	add    $0x10,%rax
  404b17:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  404b1e:	48 83 c2 10          	add    $0x10,%rdx
  404b22:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404b26:	f2 0f 5e 85 08 ff ff 	divsd  -0xf8(%rbp),%xmm0
  404b2d:	ff 
  404b2e:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    normalize(d);
}
  404b32:	90                   	nop
  404b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  404b37:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  404b3e:	00 00 
  404b40:	74 05                	je     404b47 <rayConstruction+0x73d>
  404b42:	e8 b9 be ff ff       	callq  400a00 <__stack_chk_fail@plt>
  404b47:	c9                   	leaveq 
  404b48:	c3                   	retq   

0000000000404b49 <calculateBasisVectors>:

static void calculateBasisVectors(point3 u, point3 v, point3 w,
                                  const viewpoint *view)
{
  404b49:	55                   	push   %rbp
  404b4a:	48 89 e5             	mov    %rsp,%rbp
  404b4d:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  404b51:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  404b55:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  404b59:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  404b5d:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
    /* w  */
    COPY_POINT3(w, view->vpn);
  404b61:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  404b65:	f2 0f 10 40 18       	movsd  0x18(%rax),%xmm0
  404b6a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  404b6e:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  404b72:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  404b76:	48 8d 50 08          	lea    0x8(%rax),%rdx
  404b7a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  404b7e:	f2 0f 10 40 20       	movsd  0x20(%rax),%xmm0
  404b83:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
  404b87:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  404b8b:	48 8d 50 10          	lea    0x10(%rax),%rdx
  404b8f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  404b93:	f2 0f 10 40 28       	movsd  0x28(%rax),%xmm0
  404b98:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
  404b9c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  404ba0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)


static inline __attribute__((always_inline))
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  404ba4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  404ba8:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404bac:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  404bb0:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404bb4:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  404bb8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  404bbc:	48 83 c0 08          	add    $0x8,%rax
  404bc0:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404bc4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  404bc8:	48 83 c0 08          	add    $0x8,%rax
  404bcc:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404bd0:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  404bd4:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  404bd8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  404bdc:	48 83 c0 10          	add    $0x10,%rax
  404be0:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404be4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  404be8:	48 83 c0 10          	add    $0x10,%rax
  404bec:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404bf0:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  404bf4:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404bf8:	e8 e3 be ff ff       	callq  400ae0 <sqrt@plt>
  404bfd:	66 48 0f 7e c0       	movq   %xmm0,%rax
  404c02:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
  404c06:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  404c0a:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404c0e:	f2 0f 5e 45 f8       	divsd  -0x8(%rbp),%xmm0
  404c13:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  404c17:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[1] /= d;
  404c1b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  404c1f:	48 83 c0 08          	add    $0x8,%rax
  404c23:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  404c27:	48 83 c2 08          	add    $0x8,%rdx
  404c2b:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404c2f:	f2 0f 5e 45 f8       	divsd  -0x8(%rbp),%xmm0
  404c34:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[2] /= d;
  404c38:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  404c3c:	48 83 c0 10          	add    $0x10,%rax
  404c40:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  404c44:	48 83 c2 10          	add    $0x10,%rdx
  404c48:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404c4c:	f2 0f 5e 45 f8       	divsd  -0x8(%rbp),%xmm0
  404c51:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    normalize(w);

    /* u = (t x w) / (|t x w|) */
    cross_product(w, view->vup, u);
  404c55:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  404c59:	48 8d 50 30          	lea    0x30(%rax),%rdx
  404c5d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  404c61:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  404c65:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  404c69:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  404c6d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static inline __attribute__((always_inline))
void cross_product(const double *v1, const double *v2, double *out)
{
    out[0] = v1[1] * v2[2] - v1[2] * v2[1];
  404c71:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  404c75:	48 83 c0 08          	add    $0x8,%rax
  404c79:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404c7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404c81:	48 83 c0 10          	add    $0x10,%rax
  404c85:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404c89:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  404c8d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  404c91:	48 83 c0 10          	add    $0x10,%rax
  404c95:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404c99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404c9d:	48 83 c0 08          	add    $0x8,%rax
  404ca1:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404ca5:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  404ca9:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  404cad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404cb1:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = v1[2] * v2[0] - v1[0] * v2[2];
  404cb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404cb9:	48 8d 50 08          	lea    0x8(%rax),%rdx
  404cbd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  404cc1:	48 83 c0 10          	add    $0x10,%rax
  404cc5:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404cc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404ccd:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404cd1:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  404cd5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  404cd9:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404cdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404ce1:	48 83 c0 10          	add    $0x10,%rax
  404ce5:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404ce9:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  404ced:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  404cf1:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
    out[2] = v1[0] * v2[1] - v1[1] * v2[0];
  404cf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404cf9:	48 8d 50 10          	lea    0x10(%rax),%rdx
  404cfd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  404d01:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404d05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404d09:	48 83 c0 08          	add    $0x8,%rax
  404d0d:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404d11:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  404d15:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  404d19:	48 83 c0 08          	add    $0x8,%rax
  404d1d:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404d21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  404d25:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404d29:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  404d2d:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  404d31:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
  404d35:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  404d39:	48 89 45 b0          	mov    %rax,-0x50(%rbp)


static inline __attribute__((always_inline))
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  404d3d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404d41:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404d45:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404d49:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404d4d:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  404d51:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404d55:	48 83 c0 08          	add    $0x8,%rax
  404d59:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404d5d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404d61:	48 83 c0 08          	add    $0x8,%rax
  404d65:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404d69:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  404d6d:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  404d71:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404d75:	48 83 c0 10          	add    $0x10,%rax
  404d79:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404d7d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404d81:	48 83 c0 10          	add    $0x10,%rax
  404d85:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404d89:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  404d8d:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404d91:	e8 4a bd ff ff       	callq  400ae0 <sqrt@plt>
  404d96:	66 48 0f 7e c0       	movq   %xmm0,%rax
  404d9b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
  404d9f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404da3:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404da7:	f2 0f 5e 45 e0       	divsd  -0x20(%rbp),%xmm0
  404dac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404db0:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[1] /= d;
  404db4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404db8:	48 83 c0 08          	add    $0x8,%rax
  404dbc:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  404dc0:	48 83 c2 08          	add    $0x8,%rdx
  404dc4:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404dc8:	f2 0f 5e 45 e0       	divsd  -0x20(%rbp),%xmm0
  404dcd:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[2] /= d;
  404dd1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  404dd5:	48 83 c0 10          	add    $0x10,%rax
  404dd9:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  404ddd:	48 83 c2 10          	add    $0x10,%rdx
  404de1:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404de5:	f2 0f 5e 45 e0       	divsd  -0x20(%rbp),%xmm0
  404dea:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  404dee:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  404df2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  404df6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  404dfa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  404dfe:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  404e02:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
}

static inline __attribute__((always_inline))
void cross_product(const double *v1, const double *v2, double *out)
{
    out[0] = v1[1] * v2[2] - v1[2] * v2[1];
  404e06:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  404e0a:	48 83 c0 08          	add    $0x8,%rax
  404e0e:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404e12:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404e16:	48 83 c0 10          	add    $0x10,%rax
  404e1a:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404e1e:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  404e22:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  404e26:	48 83 c0 10          	add    $0x10,%rax
  404e2a:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404e2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404e32:	48 83 c0 08          	add    $0x8,%rax
  404e36:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404e3a:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  404e3e:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  404e42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404e46:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = v1[2] * v2[0] - v1[0] * v2[2];
  404e4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404e4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
  404e52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  404e56:	48 83 c0 10          	add    $0x10,%rax
  404e5a:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404e5e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404e62:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404e66:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  404e6a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  404e6e:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404e72:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404e76:	48 83 c0 10          	add    $0x10,%rax
  404e7a:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404e7e:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  404e82:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  404e86:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
    out[2] = v1[0] * v2[1] - v1[1] * v2[0];
  404e8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  404e8e:	48 8d 50 10          	lea    0x10(%rax),%rdx
  404e92:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  404e96:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404e9a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404e9e:	48 83 c0 08          	add    $0x8,%rax
  404ea2:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404ea6:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  404eaa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  404eae:	48 83 c0 08          	add    $0x8,%rax
  404eb2:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404eb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  404eba:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404ebe:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  404ec2:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  404ec6:	f2 0f 11 02          	movsd  %xmm0,(%rdx)
  404eca:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  404ece:	48 89 45 c0          	mov    %rax,-0x40(%rbp)


static inline __attribute__((always_inline))
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  404ed2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404ed6:	f2 0f 10 08          	movsd  (%rax),%xmm1
  404eda:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404ede:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404ee2:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  404ee6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404eea:	48 83 c0 08          	add    $0x8,%rax
  404eee:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404ef2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404ef6:	48 83 c0 08          	add    $0x8,%rax
  404efa:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404efe:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  404f02:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  404f06:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404f0a:	48 83 c0 10          	add    $0x10,%rax
  404f0e:	f2 0f 10 10          	movsd  (%rax),%xmm2
  404f12:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404f16:	48 83 c0 10          	add    $0x10,%rax
  404f1a:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404f1e:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  404f22:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  404f26:	e8 b5 bb ff ff       	callq  400ae0 <sqrt@plt>
  404f2b:	66 48 0f 7e c0       	movq   %xmm0,%rax
  404f30:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
  404f34:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404f38:	f2 0f 10 00          	movsd  (%rax),%xmm0
  404f3c:	f2 0f 5e 45 c8       	divsd  -0x38(%rbp),%xmm0
  404f41:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404f45:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[1] /= d;
  404f49:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404f4d:	48 83 c0 08          	add    $0x8,%rax
  404f51:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  404f55:	48 83 c2 08          	add    $0x8,%rdx
  404f59:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404f5d:	f2 0f 5e 45 c8       	divsd  -0x38(%rbp),%xmm0
  404f62:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[2] /= d;
  404f66:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  404f6a:	48 83 c0 10          	add    $0x10,%rax
  404f6e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  404f72:	48 83 c2 10          	add    $0x10,%rdx
  404f76:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  404f7a:	f2 0f 5e 45 c8       	divsd  -0x38(%rbp),%xmm0
  404f7f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    normalize(u);

    /* v = w x u */
    cross_product(u, w, v);
    normalize(v);
}
  404f83:	90                   	nop
  404f84:	c9                   	leaveq 
  404f85:	c3                   	retq   

0000000000404f86 <ray_color>:
                              idx_stack *stk,
                              const rectangular_node rectangulars,
                              const sphere_node spheres,
                              const light_node lights,
                              color object_color, int bounces_left)
{
  404f86:	55                   	push   %rbp
  404f87:	48 89 e5             	mov    %rsp,%rbp
  404f8a:	41 57                	push   %r15
  404f8c:	41 56                	push   %r14
  404f8e:	41 55                	push   %r13
  404f90:	41 54                	push   %r12
  404f92:	53                   	push   %rbx
  404f93:	48 81 ec 98 03 00 00 	sub    $0x398,%rsp
  404f9a:	48 89 bd d8 fc ff ff 	mov    %rdi,-0x328(%rbp)
  404fa1:	f2 0f 11 85 d0 fc ff 	movsd  %xmm0,-0x330(%rbp)
  404fa8:	ff 
  404fa9:	48 89 b5 c8 fc ff ff 	mov    %rsi,-0x338(%rbp)
  404fb0:	48 89 95 c0 fc ff ff 	mov    %rdx,-0x340(%rbp)
  404fb7:	48 89 8d b8 fc ff ff 	mov    %rcx,-0x348(%rbp)
  404fbe:	4c 89 85 b0 fc ff ff 	mov    %r8,-0x350(%rbp)
  404fc5:	4c 89 8d a8 fc ff ff 	mov    %r9,-0x358(%rbp)
  404fcc:	48 8b 45 10          	mov    0x10(%rbp),%rax
  404fd0:	48 89 85 a0 fc ff ff 	mov    %rax,-0x360(%rbp)
  404fd7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  404fde:	00 00 
  404fe0:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  404fe4:	31 c0                	xor    %eax,%eax
    rectangular_node hit_rec = NULL, light_hit_rec = NULL;
  404fe6:	48 c7 85 f0 fc ff ff 	movq   $0x0,-0x310(%rbp)
  404fed:	00 00 00 00 
  404ff1:	48 c7 85 f8 fc ff ff 	movq   $0x0,-0x308(%rbp)
  404ff8:	00 00 00 00 
    sphere_node hit_sphere = NULL, light_hit_sphere = NULL;
  404ffc:	48 c7 85 00 fd ff ff 	movq   $0x0,-0x300(%rbp)
  405003:	00 00 00 00 
  405007:	48 c7 85 08 fd ff ff 	movq   $0x0,-0x2f8(%rbp)
  40500e:	00 00 00 00 
    object_fill fill;

    color reflection_part;
    color refraction_part;
    /* might be a reflection ray, so check how many times we've bounced */
    if (bounces_left == 0) {
  405012:	83 7d 18 00          	cmpl   $0x0,0x18(%rbp)
  405016:	75 3f                	jne    405057 <ray_color+0xd1>
        SET_COLOR(object_color, 0.0, 0.0, 0.0);
  405018:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  40501f:	66 0f ef c0          	pxor   %xmm0,%xmm0
  405023:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  405027:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  40502e:	48 83 c0 08          	add    $0x8,%rax
  405032:	66 0f ef c0          	pxor   %xmm0,%xmm0
  405036:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  40503a:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  405041:	48 83 c0 10          	add    $0x10,%rax
  405045:	66 0f ef c0          	pxor   %xmm0,%xmm0
  405049:	f2 0f 11 00          	movsd  %xmm0,(%rax)
        return 0;
  40504d:	b8 00 00 00 00       	mov    $0x0,%eax
  405052:	e9 21 10 00 00       	jmpq   406078 <ray_color+0x10f2>
    }

    /* check for intersection with a sphere or a rectangular */
    intersection ip= ray_hit_object(e, d, t, MAX_DISTANCE, rectangulars,
  405057:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
  40505e:	48 8b 95 b0 fc ff ff 	mov    -0x350(%rbp),%rdx
  405065:	48 8d 8d f0 fc ff ff 	lea    -0x310(%rbp),%rcx
  40506c:	48 8b b5 b8 fc ff ff 	mov    -0x348(%rbp),%rsi
  405073:	f2 0f 10 05 dd 19 00 	movsd  0x19dd(%rip),%xmm0        # 406a58 <_IO_stdin_used+0x78>
  40507a:	00 
  40507b:	48 8b 9d d0 fc ff ff 	mov    -0x330(%rbp),%rbx
  405082:	4c 8b 9d c8 fc ff ff 	mov    -0x338(%rbp),%r11
  405089:	4c 8b 95 d8 fc ff ff 	mov    -0x328(%rbp),%r10
  405090:	48 83 ec 08          	sub    $0x8,%rsp
  405094:	48 8d 85 00 fd ff ff 	lea    -0x300(%rbp),%rax
  40509b:	50                   	push   %rax
  40509c:	49 89 d1             	mov    %rdx,%r9
  40509f:	49 89 c8             	mov    %rcx,%r8
  4050a2:	48 89 f1             	mov    %rsi,%rcx
  4050a5:	66 0f 28 c8          	movapd %xmm0,%xmm1
  4050a9:	48 89 9d 48 fc ff ff 	mov    %rbx,-0x3b8(%rbp)
  4050b0:	f2 0f 10 85 48 fc ff 	movsd  -0x3b8(%rbp),%xmm0
  4050b7:	ff 
  4050b8:	4c 89 da             	mov    %r11,%rdx
  4050bb:	4c 89 d6             	mov    %r10,%rsi
  4050be:	e8 7f ef ff ff       	callq  404042 <ray_hit_object>
  4050c3:	48 83 c4 10          	add    $0x10,%rsp
                                    &hit_rec, spheres, &hit_sphere);
    if (!hit_rec && !hit_sphere)
  4050c7:	48 8b 85 f0 fc ff ff 	mov    -0x310(%rbp),%rax
  4050ce:	48 85 c0             	test   %rax,%rax
  4050d1:	75 16                	jne    4050e9 <ray_color+0x163>
  4050d3:	48 8b 85 00 fd ff ff 	mov    -0x300(%rbp),%rax
  4050da:	48 85 c0             	test   %rax,%rax
  4050dd:	75 0a                	jne    4050e9 <ray_color+0x163>
        return 0;
  4050df:	b8 00 00 00 00       	mov    $0x0,%eax
  4050e4:	e9 8f 0f 00 00       	jmpq   406078 <ray_color+0x10f2>

    /* pick the fill of the object that was hit */
    fill = hit_rec ?
  4050e9:	48 8b 85 f0 fc ff ff 	mov    -0x310(%rbp),%rax
  4050f0:	48 85 c0             	test   %rax,%rax
  4050f3:	74 69                	je     40515e <ray_color+0x1d8>
           hit_rec->element.rectangular_fill :
  4050f5:	48 8b 85 f0 fc ff ff 	mov    -0x310(%rbp),%rax
                                    &hit_rec, spheres, &hit_sphere);
    if (!hit_rec && !hit_sphere)
        return 0;

    /* pick the fill of the object that was hit */
    fill = hit_rec ?
  4050fc:	48 8b 50 78          	mov    0x78(%rax),%rdx
  405100:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
  405104:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
  40510b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  40510f:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
  405116:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  40511a:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  405121:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  405125:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  40512c:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
  405130:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
  405137:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  40513b:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  405142:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  405146:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  40514d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  405151:	48 8b 80 b8 00 00 00 	mov    0xb8(%rax),%rax
  405158:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  40515c:	eb 4f                	jmp    4051ad <ray_color+0x227>
           hit_rec->element.rectangular_fill :
           hit_sphere->element.sphere_fill;
  40515e:	48 8b 85 00 fd ff ff 	mov    -0x300(%rbp),%rax
                                    &hit_rec, spheres, &hit_sphere);
    if (!hit_rec && !hit_sphere)
        return 0;

    /* pick the fill of the object that was hit */
    fill = hit_rec ?
  405165:	48 8b 50 20          	mov    0x20(%rax),%rdx
  405169:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
  40516d:	48 8b 50 28          	mov    0x28(%rax),%rdx
  405171:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  405175:	48 8b 50 30          	mov    0x30(%rax),%rdx
  405179:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  40517d:	48 8b 50 38          	mov    0x38(%rax),%rdx
  405181:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  405185:	48 8b 50 40          	mov    0x40(%rax),%rdx
  405189:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
  40518d:	48 8b 50 48          	mov    0x48(%rax),%rdx
  405191:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  405195:	48 8b 50 50          	mov    0x50(%rax),%rdx
  405199:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  40519d:	48 8b 50 58          	mov    0x58(%rax),%rdx
  4051a1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  4051a5:	48 8b 40 60          	mov    0x60(%rax),%rax
  4051a9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
           hit_rec->element.rectangular_fill :
           hit_sphere->element.sphere_fill;

    void *hit_obj = hit_rec ? (void *) hit_rec : (void *) hit_sphere;
  4051ad:	48 8b 85 f0 fc ff ff 	mov    -0x310(%rbp),%rax
  4051b4:	48 85 c0             	test   %rax,%rax
  4051b7:	74 09                	je     4051c2 <ray_color+0x23c>
  4051b9:	48 8b 85 f0 fc ff ff 	mov    -0x310(%rbp),%rax
  4051c0:	eb 07                	jmp    4051c9 <ray_color+0x243>
  4051c2:	48 8b 85 00 fd ff ff 	mov    -0x300(%rbp),%rax
  4051c9:	48 89 85 30 fd ff ff 	mov    %rax,-0x2d0(%rbp)

    /* assume it is a shadow */
    SET_COLOR(object_color, 0.0, 0.0, 0.0);
  4051d0:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  4051d7:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4051db:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  4051df:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  4051e6:	48 83 c0 08          	add    $0x8,%rax
  4051ea:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4051ee:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  4051f2:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  4051f9:	48 83 c0 10          	add    $0x10,%rax
  4051fd:	66 0f ef c0          	pxor   %xmm0,%xmm0
  405201:	f2 0f 11 00          	movsd  %xmm0,(%rax)

    for (light_node light = lights; light; light = light->next) {
  405205:	48 8b 85 a8 fc ff ff 	mov    -0x358(%rbp),%rax
  40520c:	48 89 85 20 fd ff ff 	mov    %rax,-0x2e0(%rbp)
  405213:	e9 d4 03 00 00       	jmpq   4055ec <ray_color+0x666>
        /* calculate the intersection vector pointing at the light */
        subtract_vector(ip.point, light->element.position, l);
  405218:	48 8b 85 20 fd ff ff 	mov    -0x2e0(%rbp),%rax
  40521f:	48 8d 50 18          	lea    0x18(%rax),%rdx
  405223:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40522a:	48 89 85 40 fd ff ff 	mov    %rax,-0x2c0(%rbp)
  405231:	48 89 95 f0 fd ff ff 	mov    %rdx,-0x210(%rbp)
  405238:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
  40523f:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
}

static inline __attribute__((always_inline))
void subtract_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] - b[0];
  405246:	48 8b 85 40 fd ff ff 	mov    -0x2c0(%rbp),%rax
  40524d:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405251:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
  405258:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40525c:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  405260:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  405267:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] - b[1];
  40526b:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  405272:	48 83 c0 08          	add    $0x8,%rax
  405276:	48 8b 95 40 fd ff ff 	mov    -0x2c0(%rbp),%rdx
  40527d:	48 83 c2 08          	add    $0x8,%rdx
  405281:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405285:	48 8b 95 f0 fd ff ff 	mov    -0x210(%rbp),%rdx
  40528c:	48 83 c2 08          	add    $0x8,%rdx
  405290:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  405294:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  405298:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] - b[2];
  40529c:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
  4052a3:	48 83 c0 10          	add    $0x10,%rax
  4052a7:	48 8b 95 40 fd ff ff 	mov    -0x2c0(%rbp),%rdx
  4052ae:	48 83 c2 10          	add    $0x10,%rdx
  4052b2:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  4052b6:	48 8b 95 f0 fd ff ff 	mov    -0x210(%rbp),%rdx
  4052bd:	48 83 c2 10          	add    $0x10,%rdx
  4052c1:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  4052c5:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  4052c9:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  4052cd:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
  4052d4:	48 89 85 48 fd ff ff 	mov    %rax,-0x2b8(%rbp)
  4052db:	f2 0f 10 05 0d 17 00 	movsd  0x170d(%rip),%xmm0        # 4069f0 <_IO_stdin_used+0x10>
  4052e2:	00 
  4052e3:	f2 0f 11 85 e0 fd ff 	movsd  %xmm0,-0x220(%rbp)
  4052ea:	ff 
  4052eb:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
  4052f2:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  4052f9:	48 8b 85 48 fd ff ff 	mov    -0x2b8(%rbp),%rax
  405300:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405304:	f2 0f 59 85 e0 fd ff 	mulsd  -0x220(%rbp),%xmm0
  40530b:	ff 
  40530c:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  405313:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  405317:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  40531e:	48 83 c0 08          	add    $0x8,%rax
  405322:	48 8b 95 48 fd ff ff 	mov    -0x2b8(%rbp),%rdx
  405329:	48 83 c2 08          	add    $0x8,%rdx
  40532d:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405331:	f2 0f 59 85 e0 fd ff 	mulsd  -0x220(%rbp),%xmm0
  405338:	ff 
  405339:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  40533d:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
  405344:	48 83 c0 10          	add    $0x10,%rax
  405348:	48 8b 95 48 fd ff ff 	mov    -0x2b8(%rbp),%rdx
  40534f:	48 83 c2 10          	add    $0x10,%rdx
  405353:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405357:	f2 0f 59 85 e0 fd ff 	mulsd  -0x220(%rbp),%xmm0
  40535e:	ff 
  40535f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  405363:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
  40536a:	48 89 85 50 fd ff ff 	mov    %rax,-0x2b0(%rbp)


static inline __attribute__((always_inline))
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  405371:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  405378:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40537c:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  405383:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405387:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  40538b:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  405392:	48 83 c0 08          	add    $0x8,%rax
  405396:	f2 0f 10 10          	movsd  (%rax),%xmm2
  40539a:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  4053a1:	48 83 c0 08          	add    $0x8,%rax
  4053a5:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4053a9:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4053ad:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  4053b1:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  4053b8:	48 83 c0 10          	add    $0x10,%rax
  4053bc:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4053c0:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  4053c7:	48 83 c0 10          	add    $0x10,%rax
  4053cb:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4053cf:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4053d3:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4053d7:	e8 04 b7 ff ff       	callq  400ae0 <sqrt@plt>
  4053dc:	66 48 0f 7e c0       	movq   %xmm0,%rax
  4053e1:	48 89 85 d8 fd ff ff 	mov    %rax,-0x228(%rbp)
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
  4053e8:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  4053ef:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4053f3:	f2 0f 5e 85 d8 fd ff 	divsd  -0x228(%rbp),%xmm0
  4053fa:	ff 
  4053fb:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  405402:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[1] /= d;
  405406:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  40540d:	48 83 c0 08          	add    $0x8,%rax
  405411:	48 8b 95 50 fd ff ff 	mov    -0x2b0(%rbp),%rdx
  405418:	48 83 c2 08          	add    $0x8,%rdx
  40541c:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405420:	f2 0f 5e 85 d8 fd ff 	divsd  -0x228(%rbp),%xmm0
  405427:	ff 
  405428:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[2] /= d;
  40542c:	48 8b 85 50 fd ff ff 	mov    -0x2b0(%rbp),%rax
  405433:	48 83 c0 10          	add    $0x10,%rax
  405437:	48 8b 95 50 fd ff ff 	mov    -0x2b0(%rbp),%rdx
  40543e:	48 83 c2 10          	add    $0x10,%rdx
  405442:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405446:	f2 0f 5e 85 d8 fd ff 	divsd  -0x228(%rbp),%xmm0
  40544d:	ff 
  40544e:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  405452:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
  405459:	48 89 85 d0 fd ff ff 	mov    %rax,-0x230(%rbp)
}

static inline __attribute__((always_inline))
double length(const double *v)
{
    return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  405460:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  405467:	f2 0f 10 08          	movsd  (%rax),%xmm1
  40546b:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  405472:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405476:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  40547a:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  405481:	48 83 c0 08          	add    $0x8,%rax
  405485:	f2 0f 10 10          	movsd  (%rax),%xmm2
  405489:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  405490:	48 83 c0 08          	add    $0x8,%rax
  405494:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405498:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  40549c:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  4054a0:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  4054a7:	48 83 c0 10          	add    $0x10,%rax
  4054ab:	f2 0f 10 10          	movsd  (%rax),%xmm2
  4054af:	48 8b 85 d0 fd ff ff 	mov    -0x230(%rbp),%rax
  4054b6:	48 83 c0 10          	add    $0x10,%rax
  4054ba:	f2 0f 10 00          	movsd  (%rax),%xmm0
  4054be:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  4054c2:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4054c6:	e8 15 b6 ff ff       	callq  400ae0 <sqrt@plt>
        multiply_vector(l, -1, _l);
        normalize(_l);
        /* check for intersection with an object. use ignore_me
         * because we don't care about this normal
         */
        ray_hit_object(ip.point, _l, MIN_DISTANCE, length(l),
  4054cb:	48 8d bd 70 fc ff ff 	lea    -0x390(%rbp),%rdi
  4054d2:	48 8b 95 b0 fc ff ff 	mov    -0x350(%rbp),%rdx
  4054d9:	48 8d 8d f8 fc ff ff 	lea    -0x308(%rbp),%rcx
  4054e0:	48 8b b5 b8 fc ff ff 	mov    -0x348(%rbp),%rsi
  4054e7:	48 bb f1 68 e3 88 b5 	movabs $0x3ee4f8b588e368f1,%rbx
  4054ee:	f8 e4 3e 
  4054f1:	4c 8d 9d b0 fe ff ff 	lea    -0x150(%rbp),%r11
  4054f8:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  4054ff:	48 83 ec 08          	sub    $0x8,%rsp
  405503:	48 8d 85 08 fd ff ff 	lea    -0x2f8(%rbp),%rax
  40550a:	50                   	push   %rax
  40550b:	49 89 d1             	mov    %rdx,%r9
  40550e:	49 89 c8             	mov    %rcx,%r8
  405511:	48 89 f1             	mov    %rsi,%rcx
  405514:	66 0f 28 c8          	movapd %xmm0,%xmm1
  405518:	48 89 9d 48 fc ff ff 	mov    %rbx,-0x3b8(%rbp)
  40551f:	f2 0f 10 85 48 fc ff 	movsd  -0x3b8(%rbp),%xmm0
  405526:	ff 
  405527:	4c 89 da             	mov    %r11,%rdx
  40552a:	4c 89 d6             	mov    %r10,%rsi
  40552d:	e8 10 eb ff ff       	callq  404042 <ray_hit_object>
  405532:	48 83 c4 10          	add    $0x10,%rsp
                       rectangulars, &light_hit_rec,
                       spheres, &light_hit_sphere);
        /* the light was not block by itself(lit object) */
        if (light_hit_rec || light_hit_sphere)
  405536:	48 8b 85 f8 fc ff ff 	mov    -0x308(%rbp),%rax
  40553d:	48 85 c0             	test   %rax,%rax
  405540:	0f 85 93 00 00 00    	jne    4055d9 <ray_color+0x653>
  405546:	48 8b 85 08 fd ff ff 	mov    -0x2f8(%rbp),%rax
  40554d:	48 85 c0             	test   %rax,%rax
  405550:	0f 85 83 00 00 00    	jne    4055d9 <ray_color+0x653>
            continue;

        compute_specular_diffuse(&diffuse, &specular, d, l,
  405556:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  40555a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  405561:	4c 8d 40 18          	lea    0x18(%rax),%r8
  405565:	48 8d 8d 90 fe ff ff 	lea    -0x170(%rbp),%rcx
  40556c:	48 8b 95 c8 fc ff ff 	mov    -0x338(%rbp),%rdx
  405573:	48 8d b5 18 fd ff ff 	lea    -0x2e8(%rbp),%rsi
  40557a:	48 8d 85 10 fd ff ff 	lea    -0x2f0(%rbp),%rax
  405581:	48 89 bd 48 fc ff ff 	mov    %rdi,-0x3b8(%rbp)
  405588:	f2 0f 10 85 48 fc ff 	movsd  -0x3b8(%rbp),%xmm0
  40558f:	ff 
  405590:	48 89 c7             	mov    %rax,%rdi
  405593:	e8 7c db ff ff       	callq  403114 <compute_specular_diffuse>
                                 ip.normal, fill.phong_power);

        localColor(object_color, light->element.light_color,
  405598:	f2 0f 10 85 18 fd ff 	movsd  -0x2e8(%rbp),%xmm0
  40559f:	ff 
  4055a0:	48 8b b5 10 fd ff ff 	mov    -0x2f0(%rbp),%rsi
  4055a7:	48 8b 8d 20 fd ff ff 	mov    -0x2e0(%rbp),%rcx
  4055ae:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
  4055b2:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  4055b9:	66 0f 28 c8          	movapd %xmm0,%xmm1
  4055bd:	48 89 b5 48 fc ff ff 	mov    %rsi,-0x3b8(%rbp)
  4055c4:	f2 0f 10 85 48 fc ff 	movsd  -0x3b8(%rbp),%xmm0
  4055cb:	ff 
  4055cc:	48 89 ce             	mov    %rcx,%rsi
  4055cf:	48 89 c7             	mov    %rax,%rdi
  4055d2:	e8 f6 d3 ff ff       	callq  4029cd <localColor>
  4055d7:	eb 01                	jmp    4055da <ray_color+0x654>
        ray_hit_object(ip.point, _l, MIN_DISTANCE, length(l),
                       rectangulars, &light_hit_rec,
                       spheres, &light_hit_sphere);
        /* the light was not block by itself(lit object) */
        if (light_hit_rec || light_hit_sphere)
            continue;
  4055d9:	90                   	nop
    void *hit_obj = hit_rec ? (void *) hit_rec : (void *) hit_sphere;

    /* assume it is a shadow */
    SET_COLOR(object_color, 0.0, 0.0, 0.0);

    for (light_node light = lights; light; light = light->next) {
  4055da:	48 8b 85 20 fd ff ff 	mov    -0x2e0(%rbp),%rax
  4055e1:	48 8b 40 38          	mov    0x38(%rax),%rax
  4055e5:	48 89 85 20 fd ff ff 	mov    %rax,-0x2e0(%rbp)
  4055ec:	48 83 bd 20 fd ff ff 	cmpq   $0x0,-0x2e0(%rbp)
  4055f3:	00 
  4055f4:	0f 85 1e fc ff ff    	jne    405218 <ray_color+0x292>
  4055fa:	48 8b 85 c8 fc ff ff 	mov    -0x338(%rbp),%rax
  405601:	48 89 85 68 fd ff ff 	mov    %rax,-0x298(%rbp)
  405608:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  40560f:	48 83 c0 18          	add    $0x18,%rax
  405613:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
}

static inline __attribute__((always_inline))
double dot_product(const double *v1, const double *v2)
{
    return v1[0]*v2[0]+v1[1]*v2[1]+v1[2]*v2[2];
  40561a:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
  405621:	f2 0f 10 08          	movsd  (%rax),%xmm1
  405625:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  40562c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405630:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  405634:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
  40563b:	48 83 c0 08          	add    $0x8,%rax
  40563f:	f2 0f 10 10          	movsd  (%rax),%xmm2
  405643:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  40564a:	48 83 c0 08          	add    $0x8,%rax
  40564e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405652:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  405656:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  40565a:	48 8b 85 68 fd ff ff 	mov    -0x298(%rbp),%rax
  405661:	48 83 c0 10          	add    $0x10,%rax
  405665:	f2 0f 10 10          	movsd  (%rax),%xmm2
  405669:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
  405670:	48 83 c0 10          	add    $0x10,%rax
  405674:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405678:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  40567c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0

        localColor(object_color, light->element.light_color,
                   diffuse, specular, &fill);
    }

    double dot_dn = dot_product(d, ip.normal);
  405680:	f2 0f 11 85 60 fd ff 	movsd  %xmm0,-0x2a0(%rbp)
  405687:	ff 
    reflection(r, d, ip.normal, dot_dn);
  405688:	48 8b 95 60 fd ff ff 	mov    -0x2a0(%rbp),%rdx
  40568f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  405696:	48 8d 70 18          	lea    0x18(%rax),%rsi
  40569a:	48 8b 8d c8 fc ff ff 	mov    -0x338(%rbp),%rcx
  4056a1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  4056a8:	48 89 95 48 fc ff ff 	mov    %rdx,-0x3b8(%rbp)
  4056af:	f2 0f 10 85 48 fc ff 	movsd  -0x3b8(%rbp),%xmm0
  4056b6:	ff 
  4056b7:	48 89 f2             	mov    %rsi,%rdx
  4056ba:	48 89 ce             	mov    %rcx,%rsi
  4056bd:	48 89 c7             	mov    %rax,%rdi
  4056c0:	e8 9e e3 ff ff       	callq  403a63 <reflection>
  4056c5:	48 8b 85 c0 fc ff ff 	mov    -0x340(%rbp),%rax
  4056cc:	48 89 85 78 fd ff ff 	mov    %rax,-0x288(%rbp)
  4056d3:	48 8b 85 78 fd ff ff 	mov    -0x288(%rbp),%rax
  4056da:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
}

static inline __attribute__((always_inline))
int idx_stack_empty(idx_stack *stk)
{
    return !stk->top;
  4056e1:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  4056e8:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  4056ee:	85 c0                	test   %eax,%eax
  4056f0:	0f 94 c0             	sete   %al
  4056f3:	0f b6 c0             	movzbl %al,%eax
}

static inline __attribute__((always_inline))
idx_stack_element idx_stack_top(idx_stack *stk)
{
    if (!idx_stack_empty(stk))
  4056f6:	85 c0                	test   %eax,%eax
  4056f8:	75 2e                	jne    405728 <ray_color+0x7a2>
        return stk->data[stk->top-1];
  4056fa:	48 8b 85 78 fd ff ff 	mov    -0x288(%rbp),%rax
  405701:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  405707:	8d 50 ff             	lea    -0x1(%rax),%edx
  40570a:	48 8b 85 78 fd ff ff 	mov    -0x288(%rbp),%rax
  405711:	48 63 d2             	movslq %edx,%rdx
  405714:	48 c1 e2 04          	shl    $0x4,%rdx
  405718:	48 01 d0             	add    %rdx,%rax
  40571b:	f3 0f 6f 18          	movdqu (%rax),%xmm3
  40571f:	0f 29 9d 60 fc ff ff 	movaps %xmm3,-0x3a0(%rbp)
  405726:	eb 1b                	jmp    405743 <ray_color+0x7bd>
    return AIR_ELEMENT;
  405728:	f2 0f 10 25 d0 12 00 	movsd  0x12d0(%rip),%xmm4        # 406a00 <_IO_stdin_used+0x20>
  40572f:	00 
  405730:	f2 0f 11 a5 60 fc ff 	movsd  %xmm4,-0x3a0(%rbp)
  405737:	ff 
  405738:	48 c7 85 68 fc ff ff 	movq   $0x0,-0x398(%rbp)
  40573f:	00 00 00 00 
  405743:	66 0f 6f 85 60 fc ff 	movdqa -0x3a0(%rbp),%xmm0
  40574a:	ff 
    double idx = idx_stack_top(stk).idx, idx_pass = fill.index_of_refraction;
  40574b:	f2 0f 11 85 70 fd ff 	movsd  %xmm0,-0x290(%rbp)
  405752:	ff 
  405753:	f2 0f 10 45 b8       	movsd  -0x48(%rbp),%xmm0
  405758:	f2 0f 11 85 28 fd ff 	movsd  %xmm0,-0x2d8(%rbp)
  40575f:	ff 
  405760:	48 8b 85 c0 fc ff ff 	mov    -0x340(%rbp),%rax
  405767:	48 89 85 38 fd ff ff 	mov    %rax,-0x2c8(%rbp)
  40576e:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
  405775:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
}

static inline __attribute__((always_inline))
int idx_stack_empty(idx_stack *stk)
{
    return !stk->top;
  40577c:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
  405783:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  405789:	85 c0                	test   %eax,%eax
  40578b:	0f 94 c0             	sete   %al
  40578e:	0f b6 c0             	movzbl %al,%eax
}

static inline __attribute__((always_inline))
idx_stack_element idx_stack_top(idx_stack *stk)
{
    if (!idx_stack_empty(stk))
  405791:	85 c0                	test   %eax,%eax
  405793:	75 2a                	jne    4057bf <ray_color+0x839>
        return stk->data[stk->top-1];
  405795:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
  40579c:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  4057a2:	8d 50 ff             	lea    -0x1(%rax),%edx
  4057a5:	48 8b 85 38 fd ff ff 	mov    -0x2c8(%rbp),%rax
  4057ac:	48 63 d2             	movslq %edx,%rdx
  4057af:	48 c1 e2 04          	shl    $0x4,%rdx
  4057b3:	48 01 d0             	add    %rdx,%rax
  4057b6:	4c 8b 30             	mov    (%rax),%r14
  4057b9:	4c 8b 78 08          	mov    0x8(%rax),%r15
  4057bd:	eb 10                	jmp    4057cf <ray_color+0x849>
    return AIR_ELEMENT;
  4057bf:	49 be 00 00 00 00 00 	movabs $0x3ff0000000000000,%r14
  4057c6:	00 f0 3f 
  4057c9:	41 bf 00 00 00 00    	mov    $0x0,%r15d
  4057cf:	4c 89 f0             	mov    %r14,%rax
  4057d2:	4c 89 fa             	mov    %r15,%rdx
    if (idx_stack_top(stk).obj == hit_obj) {
  4057d5:	48 89 d0             	mov    %rdx,%rax
  4057d8:	48 3b 85 30 fd ff ff 	cmp    -0x2d0(%rbp),%rax
  4057df:	0f 85 23 01 00 00    	jne    405908 <ray_color+0x982>
  4057e5:	48 8b 85 c0 fc ff ff 	mov    -0x340(%rbp),%rax
  4057ec:	48 89 85 88 fd ff ff 	mov    %rax,-0x278(%rbp)
  4057f3:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  4057fa:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
}

static inline __attribute__((always_inline))
int idx_stack_empty(idx_stack *stk)
{
    return !stk->top;
  405801:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
  405808:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  40580e:	85 c0                	test   %eax,%eax
  405810:	0f 94 c0             	sete   %al
  405813:	0f b6 c0             	movzbl %al,%eax
}

static inline __attribute__((always_inline))
idx_stack_element idx_stack_pop(idx_stack *stk)
{
    if (!idx_stack_empty(stk))
  405816:	85 c0                	test   %eax,%eax
  405818:	75 41                	jne    40585b <ray_color+0x8d5>
        return stk->data[--stk->top];
  40581a:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  405821:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  405827:	8d 50 ff             	lea    -0x1(%rax),%edx
  40582a:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  405831:	89 90 00 01 00 00    	mov    %edx,0x100(%rax)
  405837:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  40583e:	8b 90 00 01 00 00    	mov    0x100(%rax),%edx
  405844:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
  40584b:	48 63 d2             	movslq %edx,%rdx
  40584e:	48 c1 e2 04          	shl    $0x4,%rdx
  405852:	48 01 d0             	add    %rdx,%rax
  405855:	f3 0f 6f 30          	movdqu (%rax),%xmm6
  405859:	eb 1b                	jmp    405876 <ray_color+0x8f0>
    return AIR_ELEMENT;
  40585b:	f2 0f 10 2d 9d 11 00 	movsd  0x119d(%rip),%xmm5        # 406a00 <_IO_stdin_used+0x20>
  405862:	00 
  405863:	f2 0f 11 ad 50 fc ff 	movsd  %xmm5,-0x3b0(%rbp)
  40586a:	ff 
  40586b:	48 c7 85 58 fc ff ff 	movq   $0x0,-0x3a8(%rbp)
  405872:	00 00 00 00 
  405876:	48 8b 85 c0 fc ff ff 	mov    -0x340(%rbp),%rax
  40587d:	48 89 85 58 fd ff ff 	mov    %rax,-0x2a8(%rbp)
  405884:	48 8b 85 58 fd ff ff 	mov    -0x2a8(%rbp),%rax
  40588b:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
}

static inline __attribute__((always_inline))
int idx_stack_empty(idx_stack *stk)
{
    return !stk->top;
  405892:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  405899:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  40589f:	85 c0                	test   %eax,%eax
  4058a1:	0f 94 c0             	sete   %al
  4058a4:	0f b6 c0             	movzbl %al,%eax
}

static inline __attribute__((always_inline))
idx_stack_element idx_stack_top(idx_stack *stk)
{
    if (!idx_stack_empty(stk))
  4058a7:	85 c0                	test   %eax,%eax
  4058a9:	75 2a                	jne    4058d5 <ray_color+0x94f>
        return stk->data[stk->top-1];
  4058ab:	48 8b 85 58 fd ff ff 	mov    -0x2a8(%rbp),%rax
  4058b2:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  4058b8:	8d 50 ff             	lea    -0x1(%rax),%edx
  4058bb:	48 8b 85 58 fd ff ff 	mov    -0x2a8(%rbp),%rax
  4058c2:	48 63 d2             	movslq %edx,%rdx
  4058c5:	48 c1 e2 04          	shl    $0x4,%rdx
  4058c9:	48 01 d0             	add    %rdx,%rax
  4058cc:	4c 8b 20             	mov    (%rax),%r12
  4058cf:	4c 8b 68 08          	mov    0x8(%rax),%r13
  4058d3:	eb 10                	jmp    4058e5 <ray_color+0x95f>
    return AIR_ELEMENT;
  4058d5:	49 bc 00 00 00 00 00 	movabs $0x3ff0000000000000,%r12
  4058dc:	00 f0 3f 
  4058df:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  4058e5:	4c 89 a5 60 fc ff ff 	mov    %r12,-0x3a0(%rbp)
  4058ec:	4c 89 ad 68 fc ff ff 	mov    %r13,-0x398(%rbp)
  4058f3:	66 0f 6f 85 60 fc ff 	movdqa -0x3a0(%rbp),%xmm0
  4058fa:	ff 
        idx_stack_pop(stk);
        idx_pass = idx_stack_top(stk).idx;
  4058fb:	f2 0f 11 85 28 fd ff 	movsd  %xmm0,-0x2d8(%rbp)
  405902:	ff 
  405903:	e9 9a 00 00 00       	jmpq   4059a2 <ray_color+0xa1c>
    } else {
        idx_stack_element e = { .obj = hit_obj,
                                .idx = fill.index_of_refraction
  405908:	f2 0f 10 45 b8       	movsd  -0x48(%rbp),%xmm0
    double idx = idx_stack_top(stk).idx, idx_pass = fill.index_of_refraction;
    if (idx_stack_top(stk).obj == hit_obj) {
        idx_stack_pop(stk);
        idx_pass = idx_stack_top(stk).idx;
    } else {
        idx_stack_element e = { .obj = hit_obj,
  40590d:	f2 0f 11 85 70 fe ff 	movsd  %xmm0,-0x190(%rbp)
  405914:	ff 
  405915:	48 8b 85 30 fd ff ff 	mov    -0x2d0(%rbp),%rax
  40591c:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  405923:	48 8b 85 c0 fc ff ff 	mov    -0x340(%rbp),%rax
  40592a:	48 89 85 80 fd ff ff 	mov    %rax,-0x280(%rbp)
  405931:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
  405938:	48 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%rdx
  40593f:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
  405946:	48 89 95 88 fe ff ff 	mov    %rdx,-0x178(%rbp)
}

static inline __attribute__((always_inline))
void idx_stack_push(idx_stack *stk, idx_stack_element element)
{
    if (stk->top < MAX_STACK_SIZE)
  40594d:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
  405954:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  40595a:	83 f8 0f             	cmp    $0xf,%eax
  40595d:	7f 43                	jg     4059a2 <ray_color+0xa1c>
        stk->data[stk->top++] = element;
  40595f:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
  405966:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  40596c:	8d 48 01             	lea    0x1(%rax),%ecx
  40596f:	48 8b 95 80 fd ff ff 	mov    -0x280(%rbp),%rdx
  405976:	89 8a 00 01 00 00    	mov    %ecx,0x100(%rdx)
  40597c:	48 8b 95 80 fd ff ff 	mov    -0x280(%rbp),%rdx
  405983:	48 98                	cltq   
  405985:	48 c1 e0 04          	shl    $0x4,%rax
  405989:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  40598d:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  405994:	48 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%rdx
  40599b:	48 89 01             	mov    %rax,(%rcx)
  40599e:	48 89 51 08          	mov    %rdx,0x8(%rcx)
                                .idx = fill.index_of_refraction
                              };
        idx_stack_push(stk, e);
    }

    refraction(rr, d, ip.normal, idx, idx_pass, dot_dn);
  4059a2:	f2 0f 10 8d 60 fd ff 	movsd  -0x2a0(%rbp),%xmm1
  4059a9:	ff 
  4059aa:	f2 0f 10 85 28 fd ff 	movsd  -0x2d8(%rbp),%xmm0
  4059b1:	ff 
  4059b2:	48 8b 95 70 fd ff ff 	mov    -0x290(%rbp),%rdx
  4059b9:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  4059c0:	48 8d 70 18          	lea    0x18(%rax),%rsi
  4059c4:	48 8b 8d c8 fc ff ff 	mov    -0x338(%rbp),%rcx
  4059cb:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4059d2:	66 0f 28 d1          	movapd %xmm1,%xmm2
  4059d6:	66 0f 28 c8          	movapd %xmm0,%xmm1
  4059da:	48 89 95 60 fc ff ff 	mov    %rdx,-0x3a0(%rbp)
  4059e1:	f2 0f 10 85 60 fc ff 	movsd  -0x3a0(%rbp),%xmm0
  4059e8:	ff 
  4059e9:	48 89 f2             	mov    %rsi,%rdx
  4059ec:	48 89 ce             	mov    %rcx,%rsi
  4059ef:	48 89 c7             	mov    %rax,%rdi
  4059f2:	e8 7d e1 ff ff       	callq  403b74 <refraction>
    double R = (fill.T > 0.1) ?
  4059f7:	f2 0f 10 45 a8       	movsd  -0x58(%rbp),%xmm0
               fresnel(d, rr, ip.normal, idx, idx_pass) :
  4059fc:	66 0f 2e 05 04 10 00 	ucomisd 0x1004(%rip),%xmm0        # 406a08 <_IO_stdin_used+0x28>
  405a03:	00 
  405a04:	76 50                	jbe    405a56 <ray_color+0xad0>
  405a06:	f2 0f 10 85 28 fd ff 	movsd  -0x2d8(%rbp),%xmm0
  405a0d:	ff 
  405a0e:	48 8b 95 70 fd ff ff 	mov    -0x290(%rbp),%rdx
  405a15:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  405a1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  405a20:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
  405a27:	48 8b 85 c8 fc ff ff 	mov    -0x338(%rbp),%rax
  405a2e:	66 0f 28 c8          	movapd %xmm0,%xmm1
  405a32:	48 89 95 60 fc ff ff 	mov    %rdx,-0x3a0(%rbp)
  405a39:	f2 0f 10 85 60 fc ff 	movsd  -0x3a0(%rbp),%xmm0
  405a40:	ff 
  405a41:	48 89 f2             	mov    %rsi,%rdx
  405a44:	48 89 ce             	mov    %rcx,%rsi
  405a47:	48 89 c7             	mov    %rax,%rdi
  405a4a:	e8 c7 e3 ff ff       	callq  403e16 <fresnel>
  405a4f:	66 48 0f 7e c0       	movq   %xmm0,%rax
  405a54:	eb 0a                	jmp    405a60 <ray_color+0xada>
  405a56:	48 b8 00 00 00 00 00 	movabs $0x3ff0000000000000,%rax
  405a5d:	00 f0 3f 
                              };
        idx_stack_push(stk, e);
    }

    refraction(rr, d, ip.normal, idx, idx_pass, dot_dn);
    double R = (fill.T > 0.1) ?
  405a60:	48 89 85 98 fd ff ff 	mov    %rax,-0x268(%rbp)
               1.0;

    /* totalColor = localColor +
       mix((1-fill.Kd) * fill.R * reflection, T * refraction, R)
    */
    if (fill.R > 0) {
  405a67:	f2 0f 10 45 b0       	movsd  -0x50(%rbp),%xmm0
  405a6c:	66 0f ef c9          	pxor   %xmm1,%xmm1
  405a70:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  405a74:	0f 86 f3 01 00 00    	jbe    405c6d <ray_color+0xce7>
        /* if we hit something, add the color */
        int old_top = stk->top;
  405a7a:	48 8b 85 c0 fc ff ff 	mov    -0x340(%rbp),%rax
  405a81:	8b 80 00 01 00 00    	mov    0x100(%rax),%eax
  405a87:	89 85 ec fc ff ff    	mov    %eax,-0x314(%rbp)
        if (ray_color(ip.point, MIN_DISTANCE, r, stk, rectangulars, spheres,
  405a8d:	8b 45 18             	mov    0x18(%rbp),%eax
  405a90:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  405a94:	4c 8b 8d a8 fc ff ff 	mov    -0x358(%rbp),%r9
  405a9b:	4c 8b 95 b0 fc ff ff 	mov    -0x350(%rbp),%r10
  405aa2:	48 8b 8d b8 fc ff ff 	mov    -0x348(%rbp),%rcx
  405aa9:	48 8b 95 c0 fc ff ff 	mov    -0x340(%rbp),%rdx
  405ab0:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
  405ab7:	48 bf f1 68 e3 88 b5 	movabs $0x3ee4f8b588e368f1,%rdi
  405abe:	f8 e4 3e 
  405ac1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  405ac8:	41 50                	push   %r8
  405aca:	4c 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%r8
  405ad1:	41 50                	push   %r8
  405ad3:	4d 89 d0             	mov    %r10,%r8
  405ad6:	48 89 bd 60 fc ff ff 	mov    %rdi,-0x3a0(%rbp)
  405add:	f2 0f 10 85 60 fc ff 	movsd  -0x3a0(%rbp),%xmm0
  405ae4:	ff 
  405ae5:	48 89 c7             	mov    %rax,%rdi
  405ae8:	e8 99 f4 ff ff       	callq  404f86 <ray_color>
  405aed:	48 83 c4 10          	add    $0x10,%rsp
  405af1:	85 c0                	test   %eax,%eax
  405af3:	0f 84 61 01 00 00    	je     405c5a <ray_color+0xcd4>
                      lights, reflection_part,
                      bounces_left - 1)) {
            multiply_vector(reflection_part, R * (1.0 - fill.Kd) * fill.R,
  405af9:	f2 0f 10 4d 98       	movsd  -0x68(%rbp),%xmm1
  405afe:	f2 0f 10 05 fa 0e 00 	movsd  0xefa(%rip),%xmm0        # 406a00 <_IO_stdin_used+0x20>
  405b05:	00 
  405b06:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  405b0a:	f2 0f 59 85 98 fd ff 	mulsd  -0x268(%rbp),%xmm0
  405b11:	ff 
  405b12:	f2 0f 10 4d b0       	movsd  -0x50(%rbp),%xmm1
  405b17:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  405b1b:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  405b22:	48 89 85 a8 fd ff ff 	mov    %rax,-0x258(%rbp)
  405b29:	f2 0f 11 85 38 fe ff 	movsd  %xmm0,-0x1c8(%rbp)
  405b30:	ff 
  405b31:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  405b38:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  405b3f:	48 8b 85 a8 fd ff ff 	mov    -0x258(%rbp),%rax
  405b46:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405b4a:	f2 0f 59 85 38 fe ff 	mulsd  -0x1c8(%rbp),%xmm0
  405b51:	ff 
  405b52:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  405b59:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  405b5d:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  405b64:	48 83 c0 08          	add    $0x8,%rax
  405b68:	48 8b 95 a8 fd ff ff 	mov    -0x258(%rbp),%rdx
  405b6f:	48 83 c2 08          	add    $0x8,%rdx
  405b73:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405b77:	f2 0f 59 85 38 fe ff 	mulsd  -0x1c8(%rbp),%xmm0
  405b7e:	ff 
  405b7f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  405b83:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  405b8a:	48 83 c0 10          	add    $0x10,%rax
  405b8e:	48 8b 95 a8 fd ff ff 	mov    -0x258(%rbp),%rdx
  405b95:	48 83 c2 10          	add    $0x10,%rdx
  405b99:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405b9d:	f2 0f 59 85 38 fe ff 	mulsd  -0x1c8(%rbp),%xmm0
  405ba4:	ff 
  405ba5:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  405ba9:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  405bb0:	48 89 85 90 fd ff ff 	mov    %rax,-0x270(%rbp)
  405bb7:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  405bbe:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
  405bc5:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  405bcc:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  405bd3:	48 8b 85 90 fd ff ff 	mov    -0x270(%rbp),%rax
  405bda:	f2 0f 10 08          	movsd  (%rax),%xmm1
  405bde:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  405be5:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405be9:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  405bed:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  405bf4:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  405bf8:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  405bff:	48 83 c0 08          	add    $0x8,%rax
  405c03:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  405c0a:	48 83 c2 08          	add    $0x8,%rdx
  405c0e:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  405c12:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  405c19:	48 83 c2 08          	add    $0x8,%rdx
  405c1d:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405c21:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  405c25:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  405c29:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  405c30:	48 83 c0 10          	add    $0x10,%rax
  405c34:	48 8b 95 90 fd ff ff 	mov    -0x270(%rbp),%rdx
  405c3b:	48 83 c2 10          	add    $0x10,%rdx
  405c3f:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  405c43:	48 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%rdx
  405c4a:	48 83 c2 10          	add    $0x10,%rdx
  405c4e:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405c52:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  405c56:	f2 0f 11 00          	movsd  %xmm0,(%rax)
                            reflection_part);
            add_vector(object_color, reflection_part,
                       object_color);
        }
        stk->top = old_top;
  405c5a:	48 8b 85 c0 fc ff ff 	mov    -0x340(%rbp),%rax
  405c61:	8b 95 ec fc ff ff    	mov    -0x314(%rbp),%edx
  405c67:	89 90 00 01 00 00    	mov    %edx,0x100(%rax)
  405c6d:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  405c74:	48 89 85 a0 fd ff ff 	mov    %rax,-0x260(%rbp)
}

static inline __attribute__((always_inline))
double length(const double *v)
{
    return sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  405c7b:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
  405c82:	f2 0f 10 08          	movsd  (%rax),%xmm1
  405c86:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
  405c8d:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405c91:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  405c95:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
  405c9c:	48 83 c0 08          	add    $0x8,%rax
  405ca0:	f2 0f 10 10          	movsd  (%rax),%xmm2
  405ca4:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
  405cab:	48 83 c0 08          	add    $0x8,%rax
  405caf:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405cb3:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  405cb7:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  405cbb:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
  405cc2:	48 83 c0 10          	add    $0x10,%rax
  405cc6:	f2 0f 10 10          	movsd  (%rax),%xmm2
  405cca:	48 8b 85 a0 fd ff ff 	mov    -0x260(%rbp),%rax
  405cd1:	48 83 c0 10          	add    $0x10,%rax
  405cd5:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405cd9:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  405cdd:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  405ce1:	e8 fa ad ff ff       	callq  400ae0 <sqrt@plt>
  405ce6:	66 0f 28 c8          	movapd %xmm0,%xmm1
    }
    /* calculate refraction ray */
    if ((length(rr) > 0.0) && (fill.T > 0.0) &&
  405cea:	66 0f ef c0          	pxor   %xmm0,%xmm0
  405cee:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  405cf2:	0f 86 d9 02 00 00    	jbe    405fd1 <ray_color+0x104b>
  405cf8:	f2 0f 10 45 a8       	movsd  -0x58(%rbp),%xmm0
  405cfd:	66 0f ef c9          	pxor   %xmm1,%xmm1
  405d01:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  405d05:	0f 86 c6 02 00 00    	jbe    405fd1 <ray_color+0x104b>
            (fill.index_of_refraction > 0.0)) {
  405d0b:	f2 0f 10 45 b8       	movsd  -0x48(%rbp),%xmm0
                       object_color);
        }
        stk->top = old_top;
    }
    /* calculate refraction ray */
    if ((length(rr) > 0.0) && (fill.T > 0.0) &&
  405d10:	66 0f ef c9          	pxor   %xmm1,%xmm1
  405d14:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  405d18:	0f 86 b3 02 00 00    	jbe    405fd1 <ray_color+0x104b>
  405d1e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  405d25:	48 89 85 b0 fd ff ff 	mov    %rax,-0x250(%rbp)


static inline __attribute__((always_inline))
void normalize(double *v)
{
    double d = sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
  405d2c:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  405d33:	f2 0f 10 08          	movsd  (%rax),%xmm1
  405d37:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  405d3e:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405d42:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  405d46:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  405d4d:	48 83 c0 08          	add    $0x8,%rax
  405d51:	f2 0f 10 10          	movsd  (%rax),%xmm2
  405d55:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  405d5c:	48 83 c0 08          	add    $0x8,%rax
  405d60:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405d64:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  405d68:	f2 0f 58 c8          	addsd  %xmm0,%xmm1
  405d6c:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  405d73:	48 83 c0 10          	add    $0x10,%rax
  405d77:	f2 0f 10 10          	movsd  (%rax),%xmm2
  405d7b:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  405d82:	48 83 c0 10          	add    $0x10,%rax
  405d86:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405d8a:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
  405d8e:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  405d92:	e8 49 ad ff ff       	callq  400ae0 <sqrt@plt>
  405d97:	66 48 0f 7e c0       	movq   %xmm0,%rax
  405d9c:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
    assert(d != 0.0 && "Error calculating normal");

    v[0] /= d;
  405da3:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  405daa:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405dae:	f2 0f 5e 85 48 fe ff 	divsd  -0x1b8(%rbp),%xmm0
  405db5:	ff 
  405db6:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  405dbd:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[1] /= d;
  405dc1:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  405dc8:	48 83 c0 08          	add    $0x8,%rax
  405dcc:	48 8b 95 b0 fd ff ff 	mov    -0x250(%rbp),%rdx
  405dd3:	48 83 c2 08          	add    $0x8,%rdx
  405dd7:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405ddb:	f2 0f 5e 85 48 fe ff 	divsd  -0x1b8(%rbp),%xmm0
  405de2:	ff 
  405de3:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    v[2] /= d;
  405de7:	48 8b 85 b0 fd ff ff 	mov    -0x250(%rbp),%rax
  405dee:	48 83 c0 10          	add    $0x10,%rax
  405df2:	48 8b 95 b0 fd ff ff 	mov    -0x250(%rbp),%rdx
  405df9:	48 83 c2 10          	add    $0x10,%rdx
  405dfd:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405e01:	f2 0f 5e 85 48 fe ff 	divsd  -0x1b8(%rbp),%xmm0
  405e08:	ff 
  405e09:	f2 0f 11 00          	movsd  %xmm0,(%rax)
            (fill.index_of_refraction > 0.0)) {
        normalize(rr);
        if (ray_color(ip.point, MIN_DISTANCE, rr, stk,rectangulars, spheres,
  405e0d:	8b 45 18             	mov    0x18(%rbp),%eax
  405e10:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  405e14:	4c 8b 8d a8 fc ff ff 	mov    -0x358(%rbp),%r9
  405e1b:	4c 8b 95 b0 fc ff ff 	mov    -0x350(%rbp),%r10
  405e22:	48 8b 8d b8 fc ff ff 	mov    -0x348(%rbp),%rcx
  405e29:	48 8b 95 c0 fc ff ff 	mov    -0x340(%rbp),%rdx
  405e30:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
  405e37:	48 bf f1 68 e3 88 b5 	movabs $0x3ee4f8b588e368f1,%rdi
  405e3e:	f8 e4 3e 
  405e41:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  405e48:	41 50                	push   %r8
  405e4a:	4c 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%r8
  405e51:	41 50                	push   %r8
  405e53:	4d 89 d0             	mov    %r10,%r8
  405e56:	48 89 bd 60 fc ff ff 	mov    %rdi,-0x3a0(%rbp)
  405e5d:	f2 0f 10 85 60 fc ff 	movsd  -0x3a0(%rbp),%xmm0
  405e64:	ff 
  405e65:	48 89 c7             	mov    %rax,%rdi
  405e68:	e8 19 f1 ff ff       	callq  404f86 <ray_color>
  405e6d:	48 83 c4 10          	add    $0x10,%rsp
  405e71:	85 c0                	test   %eax,%eax
  405e73:	0f 84 58 01 00 00    	je     405fd1 <ray_color+0x104b>
                      lights, refraction_part,
                      bounces_left - 1)) {
            multiply_vector(refraction_part, (1 - R) * fill.T,
  405e79:	f2 0f 10 05 7f 0b 00 	movsd  0xb7f(%rip),%xmm0        # 406a00 <_IO_stdin_used+0x20>
  405e80:	00 
  405e81:	f2 0f 5c 85 98 fd ff 	subsd  -0x268(%rbp),%xmm0
  405e88:	ff 
  405e89:	f2 0f 10 4d a8       	movsd  -0x58(%rbp),%xmm1
  405e8e:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  405e92:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  405e99:	48 89 85 c8 fd ff ff 	mov    %rax,-0x238(%rbp)
  405ea0:	f2 0f 11 85 60 fe ff 	movsd  %xmm0,-0x1a0(%rbp)
  405ea7:	ff 
  405ea8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  405eaf:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
}

static inline __attribute__((always_inline))
void multiply_vector(const double *a, double b, double *out)
{
    out[0]=a[0]*b;
  405eb6:	48 8b 85 c8 fd ff ff 	mov    -0x238(%rbp),%rax
  405ebd:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405ec1:	f2 0f 59 85 60 fe ff 	mulsd  -0x1a0(%rbp),%xmm0
  405ec8:	ff 
  405ec9:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  405ed0:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1]=a[1]*b;
  405ed4:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  405edb:	48 83 c0 08          	add    $0x8,%rax
  405edf:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  405ee6:	48 83 c2 08          	add    $0x8,%rdx
  405eea:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405eee:	f2 0f 59 85 60 fe ff 	mulsd  -0x1a0(%rbp),%xmm0
  405ef5:	ff 
  405ef6:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2]=a[2]*b;
  405efa:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  405f01:	48 83 c0 10          	add    $0x10,%rax
  405f05:	48 8b 95 c8 fd ff ff 	mov    -0x238(%rbp),%rdx
  405f0c:	48 83 c2 10          	add    $0x10,%rdx
  405f10:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405f14:	f2 0f 59 85 60 fe ff 	mulsd  -0x1a0(%rbp),%xmm0
  405f1b:	ff 
  405f1c:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  405f20:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  405f27:	48 89 85 b8 fd ff ff 	mov    %rax,-0x248(%rbp)
  405f2e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
  405f35:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  405f3c:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  405f43:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
}

static inline __attribute__((always_inline))
void add_vector(const double *a, const double *b, double *out)
{
    out[0] = a[0] + b[0];
  405f4a:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
  405f51:	f2 0f 10 08          	movsd  (%rax),%xmm1
  405f55:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  405f5c:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405f60:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  405f64:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  405f6b:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[1] = a[1] + b[1];
  405f6f:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  405f76:	48 83 c0 08          	add    $0x8,%rax
  405f7a:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  405f81:	48 83 c2 08          	add    $0x8,%rdx
  405f85:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  405f89:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  405f90:	48 83 c2 08          	add    $0x8,%rdx
  405f94:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405f98:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  405f9c:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    out[2] = a[2] + b[2];
  405fa0:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  405fa7:	48 83 c0 10          	add    $0x10,%rax
  405fab:	48 8b 95 b8 fd ff ff 	mov    -0x248(%rbp),%rdx
  405fb2:	48 83 c2 10          	add    $0x10,%rdx
  405fb6:	f2 0f 10 0a          	movsd  (%rdx),%xmm1
  405fba:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  405fc1:	48 83 c2 10          	add    $0x10,%rdx
  405fc5:	f2 0f 10 02          	movsd  (%rdx),%xmm0
  405fc9:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  405fcd:	f2 0f 11 00          	movsd  %xmm0,(%rax)
  405fd1:	48 8b 85 a0 fc ff ff 	mov    -0x360(%rbp),%rax
  405fd8:	48 89 85 c0 fd ff ff 	mov    %rax,-0x240(%rbp)

/* @brief protect color value overflow */
static inline __attribute__((always_inline))
void protect_color_overflow(color c)
{
    if(c[0] > 1.0) c[0] = 1.0;
  405fdf:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  405fe6:	f2 0f 10 00          	movsd  (%rax),%xmm0
  405fea:	f2 0f 10 0d 0e 0a 00 	movsd  0xa0e(%rip),%xmm1        # 406a00 <_IO_stdin_used+0x20>
  405ff1:	00 
  405ff2:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  405ff6:	76 13                	jbe    40600b <ray_color+0x1085>
  405ff8:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  405fff:	f2 0f 10 05 f9 09 00 	movsd  0x9f9(%rip),%xmm0        # 406a00 <_IO_stdin_used+0x20>
  406006:	00 
  406007:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    if(c[1] > 1.0) c[1] = 1.0;
  40600b:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  406012:	48 83 c0 08          	add    $0x8,%rax
  406016:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40601a:	f2 0f 10 0d de 09 00 	movsd  0x9de(%rip),%xmm1        # 406a00 <_IO_stdin_used+0x20>
  406021:	00 
  406022:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  406026:	76 17                	jbe    40603f <ray_color+0x10b9>
  406028:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  40602f:	48 83 c0 08          	add    $0x8,%rax
  406033:	f2 0f 10 05 c5 09 00 	movsd  0x9c5(%rip),%xmm0        # 406a00 <_IO_stdin_used+0x20>
  40603a:	00 
  40603b:	f2 0f 11 00          	movsd  %xmm0,(%rax)
    if(c[2] > 1.0) c[2] = 1.0;
  40603f:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  406046:	48 83 c0 10          	add    $0x10,%rax
  40604a:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40604e:	f2 0f 10 0d aa 09 00 	movsd  0x9aa(%rip),%xmm1        # 406a00 <_IO_stdin_used+0x20>
  406055:	00 
  406056:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  40605a:	76 17                	jbe    406073 <ray_color+0x10ed>
  40605c:	48 8b 85 c0 fd ff ff 	mov    -0x240(%rbp),%rax
  406063:	48 83 c0 10          	add    $0x10,%rax
  406067:	f2 0f 10 05 91 09 00 	movsd  0x991(%rip),%xmm0        # 406a00 <_IO_stdin_used+0x20>
  40606e:	00 
  40606f:	f2 0f 11 00          	movsd  %xmm0,(%rax)
                       object_color);
        }
    }

    protect_color_overflow(object_color);
    return 1;
  406073:	b8 01 00 00 00       	mov    $0x1,%eax
}
  406078:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  40607c:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  406083:	00 00 
  406085:	74 05                	je     40608c <ray_color+0x1106>
  406087:	e8 74 a9 ff ff       	callq  400a00 <__stack_chk_fail@plt>
  40608c:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  406090:	5b                   	pop    %rbx
  406091:	41 5c                	pop    %r12
  406093:	41 5d                	pop    %r13
  406095:	41 5e                	pop    %r14
  406097:	41 5f                	pop    %r15
  406099:	5d                   	pop    %rbp
  40609a:	c3                   	retq   

000000000040609b <thread_ray>:

pthread_mutex_t m;

//int tk = 0;
void *thread_ray(void* argument)
{
  40609b:	55                   	push   %rbp
  40609c:	48 89 e5             	mov    %rsp,%rbp
  40609f:	48 81 ec 00 02 00 00 	sub    $0x200,%rsp
  4060a6:	48 89 bd 08 fe ff ff 	mov    %rdi,-0x1f8(%rbp)
  4060ad:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4060b4:	00 00 
  4060b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4060ba:	31 c0                	xor    %eax,%eax
    static int tk  = 0;
    int step = PSIZE, start;
  4060bc:	c7 85 1c fe ff ff 04 	movl   $0x4,-0x1e4(%rbp)
  4060c3:	00 00 00 
    
    pthread_mutex_lock(&m);
  4060c6:	bf 00 81 60 00       	mov    $0x608100,%edi
  4060cb:	e8 30 aa ff ff       	callq  400b00 <pthread_mutex_lock@plt>
    start = tk++;
  4060d0:	8b 05 0e 20 20 00    	mov    0x20200e(%rip),%eax        # 6080e4 <tk.22643>
  4060d6:	8d 50 01             	lea    0x1(%rax),%edx
  4060d9:	89 15 05 20 20 00    	mov    %edx,0x202005(%rip)        # 6080e4 <tk.22643>
  4060df:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%rbp)
    pthread_mutex_unlock(&m);
  4060e5:	bf 00 81 60 00       	mov    $0x608100,%edi
  4060ea:	e8 81 a9 ff ff       	callq  400a70 <pthread_mutex_unlock@plt>
    point3 u, v, w, d;
    color object_color = { 0.0, 0.0, 0.0 };
  4060ef:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4060f3:	f2 0f 11 85 d0 fe ff 	movsd  %xmm0,-0x130(%rbp)
  4060fa:	ff 
  4060fb:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4060ff:	f2 0f 11 85 d8 fe ff 	movsd  %xmm0,-0x128(%rbp)
  406106:	ff 
  406107:	66 0f ef c0          	pxor   %xmm0,%xmm0
  40610b:	f2 0f 11 85 e0 fe ff 	movsd  %xmm0,-0x120(%rbp)
  406112:	ff 

    struct thread_args *args = argument;
  406113:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
  40611a:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
    /* calculate u, v, w */
    calculateBasisVectors(u, v, w, args->view);
  406121:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  406128:	48 8b 48 28          	mov    0x28(%rax),%rcx
  40612c:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
  406133:	48 8d b5 70 fe ff ff 	lea    -0x190(%rbp),%rsi
  40613a:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  406141:	48 89 c7             	mov    %rax,%rdi
  406144:	e8 00 ea ff ff       	callq  404b49 <calculateBasisVectors>

    idx_stack stk;
    int factor = sqrt(SAMPLES);
  406149:	c7 85 24 fe ff ff 02 	movl   $0x2,-0x1dc(%rbp)
  406150:	00 00 00 
    
    for (int j = start; j < args->height; j+=step) {
  406153:	8b 85 20 fe ff ff    	mov    -0x1e0(%rbp),%eax
  406159:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%rbp)
  40615f:	e9 7b 03 00 00       	jmpq   4064df <thread_ray+0x444>
        for (int i = 0 ; i < args->width; i++) {
  406164:	c7 85 14 fe ff ff 00 	movl   $0x0,-0x1ec(%rbp)
  40616b:	00 00 00 
  40616e:	e9 4a 03 00 00       	jmpq   4064bd <thread_ray+0x422>
            // MSAA
            double r = 0, g = 0, b = 0;
  406173:	66 0f ef c0          	pxor   %xmm0,%xmm0
  406177:	f2 0f 11 85 28 fe ff 	movsd  %xmm0,-0x1d8(%rbp)
  40617e:	ff 
  40617f:	66 0f ef c0          	pxor   %xmm0,%xmm0
  406183:	f2 0f 11 85 30 fe ff 	movsd  %xmm0,-0x1d0(%rbp)
  40618a:	ff 
  40618b:	66 0f ef c0          	pxor   %xmm0,%xmm0
  40618f:	f2 0f 11 85 38 fe ff 	movsd  %xmm0,-0x1c8(%rbp)
  406196:	ff 

            for(int s = 0; s < SAMPLES; s++) {
  406197:	c7 85 18 fe ff ff 00 	movl   $0x0,-0x1e8(%rbp)
  40619e:	00 00 00 
  4061a1:	e9 03 03 00 00       	jmpq   4064a9 <thread_ray+0x40e>
  4061a6:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  4061ad:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)


static inline __attribute__((always_inline))
void idx_stack_init(idx_stack *stk)
{
    stk->top = 0;
  4061b4:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  4061bb:	c7 80 00 01 00 00 00 	movl   $0x0,0x100(%rax)
  4061c2:	00 00 00 
                idx_stack_init(&stk);
                rayConstruction(d, u, v, w,
                                i * factor + s / factor,
                                j * factor + s % factor,
                                args->view,
                                args->width * factor, args->height * factor);
  4061c5:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  4061cc:	8b 40 34             	mov    0x34(%rax),%eax
  4061cf:	0f af 85 24 fe ff ff 	imul   -0x1dc(%rbp),%eax
            // MSAA
            double r = 0, g = 0, b = 0;

            for(int s = 0; s < SAMPLES; s++) {
                idx_stack_init(&stk);
                rayConstruction(d, u, v, w,
  4061d6:	41 89 c1             	mov    %eax,%r9d
                                i * factor + s / factor,
                                j * factor + s % factor,
                                args->view,
                                args->width * factor, args->height * factor);
  4061d9:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  4061e0:	8b 40 30             	mov    0x30(%rax),%eax
  4061e3:	0f af 85 24 fe ff ff 	imul   -0x1dc(%rbp),%eax
            // MSAA
            double r = 0, g = 0, b = 0;

            for(int s = 0; s < SAMPLES; s++) {
                idx_stack_init(&stk);
                rayConstruction(d, u, v, w,
  4061ea:	41 89 c0             	mov    %eax,%r8d
  4061ed:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  4061f4:	48 8b 78 28          	mov    0x28(%rax),%rdi
                                i * factor + s / factor,
                                j * factor + s % factor,
  4061f8:	8b 85 10 fe ff ff    	mov    -0x1f0(%rbp),%eax
  4061fe:	0f af 85 24 fe ff ff 	imul   -0x1dc(%rbp),%eax
  406205:	89 c1                	mov    %eax,%ecx
  406207:	8b 85 18 fe ff ff    	mov    -0x1e8(%rbp),%eax
  40620d:	99                   	cltd   
  40620e:	f7 bd 24 fe ff ff    	idivl  -0x1dc(%rbp)
  406214:	89 d0                	mov    %edx,%eax
  406216:	01 c8                	add    %ecx,%eax
            // MSAA
            double r = 0, g = 0, b = 0;

            for(int s = 0; s < SAMPLES; s++) {
                idx_stack_init(&stk);
                rayConstruction(d, u, v, w,
  406218:	41 89 c3             	mov    %eax,%r11d
                                i * factor + s / factor,
  40621b:	8b 85 14 fe ff ff    	mov    -0x1ec(%rbp),%eax
  406221:	0f af 85 24 fe ff ff 	imul   -0x1dc(%rbp),%eax
  406228:	89 c1                	mov    %eax,%ecx
  40622a:	8b 85 18 fe ff ff    	mov    -0x1e8(%rbp),%eax
  406230:	99                   	cltd   
  406231:	f7 bd 24 fe ff ff    	idivl  -0x1dc(%rbp)
  406237:	01 c8                	add    %ecx,%eax
            // MSAA
            double r = 0, g = 0, b = 0;

            for(int s = 0; s < SAMPLES; s++) {
                idx_stack_init(&stk);
                rayConstruction(d, u, v, w,
  406239:	41 89 c2             	mov    %eax,%r10d
  40623c:	48 8d 8d 90 fe ff ff 	lea    -0x170(%rbp),%rcx
  406243:	48 8d 95 70 fe ff ff 	lea    -0x190(%rbp),%rdx
  40624a:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi
  406251:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
  406258:	48 83 ec 08          	sub    $0x8,%rsp
  40625c:	41 51                	push   %r9
  40625e:	41 50                	push   %r8
  406260:	57                   	push   %rdi
  406261:	45 89 d9             	mov    %r11d,%r9d
  406264:	45 89 d0             	mov    %r10d,%r8d
  406267:	48 89 c7             	mov    %rax,%rdi
  40626a:	e8 9b e1 ff ff       	callq  40440a <rayConstruction>
  40626f:	48 83 c4 20          	add    $0x20,%rsp
                                i * factor + s / factor,
                                j * factor + s % factor,
                                args->view,
                                args->width * factor, args->height * factor);

                if (ray_color(args->view->vrp, 0.0, d, &stk, args->rectangulars, args->spheres,
  406273:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  40627a:	4c 8b 40 08          	mov    0x8(%rax),%r8
  40627e:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  406285:	48 8b 78 18          	mov    0x18(%rax),%rdi
  406289:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  406290:	48 8b 48 10          	mov    0x10(%rax),%rcx
  406294:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  40629b:	48 8b 40 28          	mov    0x28(%rax),%rax
  40629f:	49 89 c2             	mov    %rax,%r10
  4062a2:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  4062a9:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
  4062b0:	6a 03                	pushq  $0x3
  4062b2:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
  4062b9:	56                   	push   %rsi
  4062ba:	4d 89 c1             	mov    %r8,%r9
  4062bd:	49 89 f8             	mov    %rdi,%r8
  4062c0:	48 89 c6             	mov    %rax,%rsi
  4062c3:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4062c7:	4c 89 d7             	mov    %r10,%rdi
  4062ca:	e8 b7 ec ff ff       	callq  404f86 <ray_color>
  4062cf:	48 83 c4 10          	add    $0x10,%rsp
  4062d3:	85 c0                	test   %eax,%eax
  4062d5:	74 56                	je     40632d <thread_ray+0x292>
                              args->lights, object_color,
                              MAX_REFLECTION_BOUNCES)) {
                    r += object_color[0];
  4062d7:	f2 0f 10 85 d0 fe ff 	movsd  -0x130(%rbp),%xmm0
  4062de:	ff 
  4062df:	f2 0f 10 8d 28 fe ff 	movsd  -0x1d8(%rbp),%xmm1
  4062e6:	ff 
  4062e7:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  4062eb:	f2 0f 11 85 28 fe ff 	movsd  %xmm0,-0x1d8(%rbp)
  4062f2:	ff 
                    g += object_color[1];
  4062f3:	f2 0f 10 85 d8 fe ff 	movsd  -0x128(%rbp),%xmm0
  4062fa:	ff 
  4062fb:	f2 0f 10 8d 30 fe ff 	movsd  -0x1d0(%rbp),%xmm1
  406302:	ff 
  406303:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  406307:	f2 0f 11 85 30 fe ff 	movsd  %xmm0,-0x1d0(%rbp)
  40630e:	ff 
                    b += object_color[2];
  40630f:	f2 0f 10 85 e0 fe ff 	movsd  -0x120(%rbp),%xmm0
  406316:	ff 
  406317:	f2 0f 10 8d 38 fe ff 	movsd  -0x1c8(%rbp),%xmm1
  40631e:	ff 
  40631f:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  406323:	f2 0f 11 85 38 fe ff 	movsd  %xmm0,-0x1c8(%rbp)
  40632a:	ff 
  40632b:	eb 6b                	jmp    406398 <thread_ray+0x2fd>
                } else {
                    r += (*args->background_color)[0];
  40632d:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  406334:	48 8b 40 20          	mov    0x20(%rax),%rax
  406338:	f2 0f 10 00          	movsd  (%rax),%xmm0
  40633c:	f2 0f 10 8d 28 fe ff 	movsd  -0x1d8(%rbp),%xmm1
  406343:	ff 
  406344:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  406348:	f2 0f 11 85 28 fe ff 	movsd  %xmm0,-0x1d8(%rbp)
  40634f:	ff 
                    g += (*args->background_color)[1];
  406350:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  406357:	48 8b 40 20          	mov    0x20(%rax),%rax
  40635b:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
  406360:	f2 0f 10 8d 30 fe ff 	movsd  -0x1d0(%rbp),%xmm1
  406367:	ff 
  406368:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  40636c:	f2 0f 11 85 30 fe ff 	movsd  %xmm0,-0x1d0(%rbp)
  406373:	ff 
                    b += (*args->background_color)[2];
  406374:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  40637b:	48 8b 40 20          	mov    0x20(%rax),%rax
  40637f:	f2 0f 10 40 10       	movsd  0x10(%rax),%xmm0
  406384:	f2 0f 10 8d 38 fe ff 	movsd  -0x1c8(%rbp),%xmm1
  40638b:	ff 
  40638c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  406390:	f2 0f 11 85 38 fe ff 	movsd  %xmm0,-0x1c8(%rbp)
  406397:	ff 
                }
                args->pixels[((i + (j * args->width)) * 3) + 0] = r * 255/ SAMPLES;
  406398:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  40639f:	48 8b 08             	mov    (%rax),%rcx
  4063a2:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  4063a9:	8b 40 30             	mov    0x30(%rax),%eax
  4063ac:	0f af 85 10 fe ff ff 	imul   -0x1f0(%rbp),%eax
  4063b3:	89 c2                	mov    %eax,%edx
  4063b5:	8b 85 14 fe ff ff    	mov    -0x1ec(%rbp),%eax
  4063bb:	01 c2                	add    %eax,%edx
  4063bd:	89 d0                	mov    %edx,%eax
  4063bf:	01 c0                	add    %eax,%eax
  4063c1:	01 d0                	add    %edx,%eax
  4063c3:	48 98                	cltq   
  4063c5:	48 01 c8             	add    %rcx,%rax
  4063c8:	f2 0f 10 8d 28 fe ff 	movsd  -0x1d8(%rbp),%xmm1
  4063cf:	ff 
  4063d0:	f2 0f 10 05 88 06 00 	movsd  0x688(%rip),%xmm0        # 406a60 <_IO_stdin_used+0x80>
  4063d7:	00 
  4063d8:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  4063dc:	f2 0f 10 0d 84 06 00 	movsd  0x684(%rip),%xmm1        # 406a68 <_IO_stdin_used+0x88>
  4063e3:	00 
  4063e4:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  4063e8:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  4063ec:	88 10                	mov    %dl,(%rax)
                args->pixels[((i + (j * args->width)) * 3) + 1] = g * 255/ SAMPLES;
  4063ee:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  4063f5:	48 8b 08             	mov    (%rax),%rcx
  4063f8:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  4063ff:	8b 40 30             	mov    0x30(%rax),%eax
  406402:	0f af 85 10 fe ff ff 	imul   -0x1f0(%rbp),%eax
  406409:	89 c2                	mov    %eax,%edx
  40640b:	8b 85 14 fe ff ff    	mov    -0x1ec(%rbp),%eax
  406411:	01 c2                	add    %eax,%edx
  406413:	89 d0                	mov    %edx,%eax
  406415:	01 c0                	add    %eax,%eax
  406417:	01 d0                	add    %edx,%eax
  406419:	48 98                	cltq   
  40641b:	48 83 c0 01          	add    $0x1,%rax
  40641f:	48 01 c8             	add    %rcx,%rax
  406422:	f2 0f 10 8d 30 fe ff 	movsd  -0x1d0(%rbp),%xmm1
  406429:	ff 
  40642a:	f2 0f 10 05 2e 06 00 	movsd  0x62e(%rip),%xmm0        # 406a60 <_IO_stdin_used+0x80>
  406431:	00 
  406432:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  406436:	f2 0f 10 0d 2a 06 00 	movsd  0x62a(%rip),%xmm1        # 406a68 <_IO_stdin_used+0x88>
  40643d:	00 
  40643e:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  406442:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  406446:	88 10                	mov    %dl,(%rax)
                args->pixels[((i + (j * args->width)) * 3) + 2] = b * 255/ SAMPLES;
  406448:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  40644f:	48 8b 08             	mov    (%rax),%rcx
  406452:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  406459:	8b 40 30             	mov    0x30(%rax),%eax
  40645c:	0f af 85 10 fe ff ff 	imul   -0x1f0(%rbp),%eax
  406463:	89 c2                	mov    %eax,%edx
  406465:	8b 85 14 fe ff ff    	mov    -0x1ec(%rbp),%eax
  40646b:	01 c2                	add    %eax,%edx
  40646d:	89 d0                	mov    %edx,%eax
  40646f:	01 c0                	add    %eax,%eax
  406471:	01 d0                	add    %edx,%eax
  406473:	48 98                	cltq   
  406475:	48 83 c0 02          	add    $0x2,%rax
  406479:	48 01 c8             	add    %rcx,%rax
  40647c:	f2 0f 10 8d 38 fe ff 	movsd  -0x1c8(%rbp),%xmm1
  406483:	ff 
  406484:	f2 0f 10 05 d4 05 00 	movsd  0x5d4(%rip),%xmm0        # 406a60 <_IO_stdin_used+0x80>
  40648b:	00 
  40648c:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
  406490:	f2 0f 10 0d d0 05 00 	movsd  0x5d0(%rip),%xmm1        # 406a68 <_IO_stdin_used+0x88>
  406497:	00 
  406498:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  40649c:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  4064a0:	88 10                	mov    %dl,(%rax)
    for (int j = start; j < args->height; j+=step) {
        for (int i = 0 ; i < args->width; i++) {
            // MSAA
            double r = 0, g = 0, b = 0;

            for(int s = 0; s < SAMPLES; s++) {
  4064a2:	83 85 18 fe ff ff 01 	addl   $0x1,-0x1e8(%rbp)
  4064a9:	83 bd 18 fe ff ff 03 	cmpl   $0x3,-0x1e8(%rbp)
  4064b0:	0f 8e f0 fc ff ff    	jle    4061a6 <thread_ray+0x10b>

    idx_stack stk;
    int factor = sqrt(SAMPLES);
    
    for (int j = start; j < args->height; j+=step) {
        for (int i = 0 ; i < args->width; i++) {
  4064b6:	83 85 14 fe ff ff 01 	addl   $0x1,-0x1ec(%rbp)
  4064bd:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  4064c4:	8b 40 30             	mov    0x30(%rax),%eax
  4064c7:	3b 85 14 fe ff ff    	cmp    -0x1ec(%rbp),%eax
  4064cd:	0f 8f a0 fc ff ff    	jg     406173 <thread_ray+0xd8>
    calculateBasisVectors(u, v, w, args->view);

    idx_stack stk;
    int factor = sqrt(SAMPLES);
    
    for (int j = start; j < args->height; j+=step) {
  4064d3:	8b 85 1c fe ff ff    	mov    -0x1e4(%rbp),%eax
  4064d9:	01 85 10 fe ff ff    	add    %eax,-0x1f0(%rbp)
  4064df:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  4064e6:	8b 40 34             	mov    0x34(%rax),%eax
  4064e9:	3b 85 10 fe ff ff    	cmp    -0x1f0(%rbp),%eax
  4064ef:	0f 8f 6f fc ff ff    	jg     406164 <thread_ray+0xc9>
                args->pixels[((i + (j * args->width)) * 3) + 2] = b * 255/ SAMPLES;
            }
        }
    }

    pthread_exit(NULL);
  4064f5:	bf 00 00 00 00       	mov    $0x0,%edi
  4064fa:	e8 81 a5 ff ff       	callq  400a80 <pthread_exit@plt>

00000000004064ff <raytracing>:

void raytracing(uint8_t *pixels, color background_color,
                rectangular_node rectangulars, sphere_node spheres,
                light_node lights, const viewpoint *view,
                int width, int height)
{
  4064ff:	55                   	push   %rbp
  406500:	48 89 e5             	mov    %rsp,%rbp
  406503:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  40650a:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  406511:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
  406518:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  40651f:	48 89 8d 60 ff ff ff 	mov    %rcx,-0xa0(%rbp)
  406526:	4c 89 85 58 ff ff ff 	mov    %r8,-0xa8(%rbp)
  40652d:	4c 89 8d 50 ff ff ff 	mov    %r9,-0xb0(%rbp)
  406534:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  40653b:	00 00 
  40653d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406541:	31 c0                	xor    %eax,%eax
    pt_struct pt_threads;
    struct thread_args argument;
    //settting pthread argument
    argument.background_color = (color*)background_color;
  406543:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40654a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    argument.pixels = pixels;
  40654e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  406555:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    argument.rectangulars = rectangulars;
  406559:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  406560:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    argument.spheres = spheres;
  406564:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  40656b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    argument.lights = lights;
  40656f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  406576:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    argument.view = view;
  40657a:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  406581:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    argument.width = width;
  406585:	8b 45 10             	mov    0x10(%rbp),%eax
  406588:	89 45 c0             	mov    %eax,-0x40(%rbp)
    argument.height = height;
  40658b:	8b 45 18             	mov    0x18(%rbp),%eax
  40658e:	89 45 c4             	mov    %eax,-0x3c(%rbp)

    pthread_mutex_init(&m, NULL);
  406591:	be 00 00 00 00       	mov    $0x0,%esi
  406596:	bf 00 81 60 00       	mov    $0x608100,%edi
  40659b:	e8 50 a5 ff ff       	callq  400af0 <pthread_mutex_init@plt>

    
    for (int i = 0; i < PSIZE; i++) {
  4065a0:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
  4065a7:	eb 2c                	jmp    4065d5 <raytracing+0xd6>
        pthread_create(&pt_threads.p[i], NULL, thread_ray, &argument);
  4065a9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4065ad:	8b 55 88             	mov    -0x78(%rbp),%edx
  4065b0:	48 63 d2             	movslq %edx,%rdx
  4065b3:	48 c1 e2 03          	shl    $0x3,%rdx
  4065b7:	48 8d 3c 10          	lea    (%rax,%rdx,1),%rdi
  4065bb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  4065bf:	48 89 c1             	mov    %rax,%rcx
  4065c2:	ba 9b 60 40 00       	mov    $0x40609b,%edx
  4065c7:	be 00 00 00 00       	mov    $0x0,%esi
  4065cc:	e8 ef a3 ff ff       	callq  4009c0 <pthread_create@plt>
    argument.height = height;

    pthread_mutex_init(&m, NULL);

    
    for (int i = 0; i < PSIZE; i++) {
  4065d1:	83 45 88 01          	addl   $0x1,-0x78(%rbp)
  4065d5:	83 7d 88 03          	cmpl   $0x3,-0x78(%rbp)
  4065d9:	7e ce                	jle    4065a9 <raytracing+0xaa>
        pthread_create(&pt_threads.p[i], NULL, thread_ray, &argument);
    }
    for(int i = 0; i < PSIZE; i++) {
  4065db:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)
  4065e2:	eb 1b                	jmp    4065ff <raytracing+0x100>
        pthread_join(pt_threads.p[i], NULL);
  4065e4:	8b 45 8c             	mov    -0x74(%rbp),%eax
  4065e7:	48 98                	cltq   
  4065e9:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
  4065ee:	be 00 00 00 00       	mov    $0x0,%esi
  4065f3:	48 89 c7             	mov    %rax,%rdi
  4065f6:	e8 b5 a4 ff ff       	callq  400ab0 <pthread_join@plt>

    
    for (int i = 0; i < PSIZE; i++) {
        pthread_create(&pt_threads.p[i], NULL, thread_ray, &argument);
    }
    for(int i = 0; i < PSIZE; i++) {
  4065fb:	83 45 8c 01          	addl   $0x1,-0x74(%rbp)
  4065ff:	83 7d 8c 03          	cmpl   $0x3,-0x74(%rbp)
  406603:	7e df                	jle    4065e4 <raytracing+0xe5>
        pthread_join(pt_threads.p[i], NULL);
    }

}
  406605:	90                   	nop
  406606:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40660a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  406611:	00 00 
  406613:	74 05                	je     40661a <raytracing+0x11b>
  406615:	e8 e6 a3 ff ff       	callq  400a00 <__stack_chk_fail@plt>
  40661a:	c9                   	leaveq 
  40661b:	c3                   	retq   

000000000040661c <write_to_ppm>:
#define ROWS 512
#define COLS 512

static void write_to_ppm(FILE *outfile, uint8_t *pixels,
                         int width, int height)
{
  40661c:	55                   	push   %rbp
  40661d:	48 89 e5             	mov    %rsp,%rbp
  406620:	48 83 ec 20          	sub    $0x20,%rsp
  406624:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  406628:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  40662c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  40662f:	89 4d e8             	mov    %ecx,-0x18(%rbp)
    fprintf(outfile, "P6\n%d %d\n%d\n", width, height, 255);
  406632:	8b 4d e8             	mov    -0x18(%rbp),%ecx
  406635:	8b 55 ec             	mov    -0x14(%rbp),%edx
  406638:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40663c:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
  406642:	be 80 6a 40 00       	mov    $0x406a80,%esi
  406647:	48 89 c7             	mov    %rax,%rdi
  40664a:	b8 00 00 00 00       	mov    $0x0,%eax
  40664f:	e8 fc a3 ff ff       	callq  400a50 <fprintf@plt>
    fwrite(pixels, 1, height * width * 3, outfile);
  406654:	8b 45 e8             	mov    -0x18(%rbp),%eax
  406657:	0f af 45 ec          	imul   -0x14(%rbp),%eax
  40665b:	89 c2                	mov    %eax,%edx
  40665d:	89 d0                	mov    %edx,%eax
  40665f:	01 c0                	add    %eax,%eax
  406661:	01 d0                	add    %edx,%eax
  406663:	48 63 d0             	movslq %eax,%rdx
  406666:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40666a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40666e:	be 01 00 00 00       	mov    $0x1,%esi
  406673:	48 89 c7             	mov    %rax,%rdi
  406676:	e8 55 a4 ff ff       	callq  400ad0 <fwrite@plt>
}
  40667b:	90                   	nop
  40667c:	c9                   	leaveq 
  40667d:	c3                   	retq   

000000000040667e <diff_in_second>:

static double diff_in_second(struct timespec t1, struct timespec t2)
{
  40667e:	55                   	push   %rbp
  40667f:	48 89 e5             	mov    %rsp,%rbp
  406682:	48 89 f8             	mov    %rdi,%rax
  406685:	49 89 f0             	mov    %rsi,%r8
  406688:	48 89 c6             	mov    %rax,%rsi
  40668b:	48 89 d7             	mov    %rdx,%rdi
  40668e:	4c 89 c7             	mov    %r8,%rdi
  406691:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  406695:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  406699:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  40669d:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    struct timespec diff;
    if (t2.tv_nsec-t1.tv_nsec < 0) {
  4066a1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4066a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4066a9:	48 29 c2             	sub    %rax,%rdx
  4066ac:	48 89 d0             	mov    %rdx,%rax
  4066af:	48 85 c0             	test   %rax,%rax
  4066b2:	79 30                	jns    4066e4 <diff_in_second+0x66>
        diff.tv_sec  = t2.tv_sec - t1.tv_sec - 1;
  4066b4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4066b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4066bc:	48 29 c2             	sub    %rax,%rdx
  4066bf:	48 89 d0             	mov    %rdx,%rax
  4066c2:	48 83 e8 01          	sub    $0x1,%rax
  4066c6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        diff.tv_nsec = t2.tv_nsec - t1.tv_nsec + 1000000000;
  4066ca:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4066ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4066d2:	48 29 c2             	sub    %rax,%rdx
  4066d5:	48 89 d0             	mov    %rdx,%rax
  4066d8:	48 05 00 ca 9a 3b    	add    $0x3b9aca00,%rax
  4066de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4066e2:	eb 24                	jmp    406708 <diff_in_second+0x8a>
    } else {
        diff.tv_sec  = t2.tv_sec - t1.tv_sec;
  4066e4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4066e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4066ec:	48 29 c2             	sub    %rax,%rdx
  4066ef:	48 89 d0             	mov    %rdx,%rax
  4066f2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        diff.tv_nsec = t2.tv_nsec - t1.tv_nsec;
  4066f6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4066fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4066fe:	48 29 c2             	sub    %rax,%rdx
  406701:	48 89 d0             	mov    %rdx,%rax
  406704:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    }
    return (diff.tv_sec + diff.tv_nsec / 1000000000.0);
  406708:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40670c:	66 0f ef c9          	pxor   %xmm1,%xmm1
  406710:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
  406715:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  406719:	66 0f ef c0          	pxor   %xmm0,%xmm0
  40671d:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  406722:	f2 0f 10 15 3e 08 00 	movsd  0x83e(%rip),%xmm2        # 406f68 <view.3045+0x48>
  406729:	00 
  40672a:	f2 0f 5e c2          	divsd  %xmm2,%xmm0
  40672e:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
}
  406732:	5d                   	pop    %rbp
  406733:	c3                   	retq   

0000000000406734 <main>:

int main()
{
  406734:	55                   	push   %rbp
  406735:	48 89 e5             	mov    %rsp,%rbp
  406738:	48 83 ec 70          	sub    $0x70,%rsp
  40673c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  406743:	00 00 
  406745:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  406749:	31 c0                	xor    %eax,%eax
    uint8_t *pixels;
    light_node lights = NULL;
  40674b:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  406752:	00 
    rectangular_node rectangulars = NULL;
  406753:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  40675a:	00 
    sphere_node spheres = NULL;
  40675b:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  406762:	00 
    color background = { 0.0, 0.1, 0.1 };
  406763:	66 0f ef c0          	pxor   %xmm0,%xmm0
  406767:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
  40676c:	f2 0f 10 05 fc 07 00 	movsd  0x7fc(%rip),%xmm0        # 406f70 <view.3045+0x50>
  406773:	00 
  406774:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
  406779:	f2 0f 10 05 ef 07 00 	movsd  0x7ef(%rip),%xmm0        # 406f70 <view.3045+0x50>
  406780:	00 
  406781:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
#include "models.inc"
append_light(&light1, &lights);
  406786:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  40678a:	48 89 c6             	mov    %rax,%rsi
  40678d:	bf e0 6a 40 00       	mov    $0x406ae0,%edi
  406792:	e8 6f a4 ff ff       	callq  400c06 <append_light>
append_light(&light2, &lights);
  406797:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  40679b:	48 89 c6             	mov    %rax,%rsi
  40679e:	bf 20 6b 40 00       	mov    $0x406b20,%edi
  4067a3:	e8 5e a4 ff ff       	callq  400c06 <append_light>
append_sphere(&sphere1, &spheres);
  4067a8:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  4067ac:	48 89 c6             	mov    %rax,%rsi
  4067af:	bf 60 6b 40 00       	mov    $0x406b60,%edi
  4067b4:	e8 4a a8 ff ff       	callq  401003 <append_sphere>
append_sphere(&sphere2, &spheres);
  4067b9:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  4067bd:	48 89 c6             	mov    %rax,%rsi
  4067c0:	bf e0 6b 40 00       	mov    $0x406be0,%edi
  4067c5:	e8 39 a8 ff ff       	callq  401003 <append_sphere>
append_sphere(&sphere3, &spheres);
  4067ca:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  4067ce:	48 89 c6             	mov    %rax,%rsi
  4067d1:	bf 60 6c 40 00       	mov    $0x406c60,%edi
  4067d6:	e8 28 a8 ff ff       	callq  401003 <append_sphere>
append_rectangular(&rectangular1, &rectangulars);
  4067db:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4067df:	48 89 c6             	mov    %rax,%rsi
  4067e2:	bf e0 6c 40 00       	mov    $0x406ce0,%edi
  4067e7:	e8 5c a5 ff ff       	callq  400d48 <append_rectangular>
append_rectangular(&rectangular2, &rectangulars);
  4067ec:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4067f0:	48 89 c6             	mov    %rax,%rsi
  4067f3:	bf a0 6d 40 00       	mov    $0x406da0,%edi
  4067f8:	e8 4b a5 ff ff       	callq  400d48 <append_rectangular>
append_rectangular(&rectangular3, &rectangulars);
  4067fd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  406801:	48 89 c6             	mov    %rax,%rsi
  406804:	bf 60 6e 40 00       	mov    $0x406e60,%edi
  406809:	e8 3a a5 ff ff       	callq  400d48 <append_rectangular>
    struct timespec start, end;

#include "use-models.h"

    /* allocate by the given resolution */
    pixels = calloc(sizeof(unsigned char),ROWS * COLS * 3);
  40680e:	be 00 00 0c 00       	mov    $0xc0000,%esi
  406813:	bf 01 00 00 00       	mov    $0x1,%edi
  406818:	e8 23 a2 ff ff       	callq  400a40 <calloc@plt>
  40681d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    if (!pixels) exit(-1);
  406821:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  406826:	75 0a                	jne    406832 <main+0xfe>
  406828:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40682d:	e8 8e a2 ff ff       	callq  400ac0 <exit@plt>

    printf("# Rendering scene\n");
  406832:	bf 8d 6a 40 00       	mov    $0x406a8d,%edi
  406837:	e8 94 a1 ff ff       	callq  4009d0 <puts@plt>
    /* do the ray tracing with the given geometry */
    clock_gettime(CLOCK_REALTIME, &start);
  40683c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  406840:	48 89 c6             	mov    %rax,%rsi
  406843:	bf 00 00 00 00       	mov    $0x0,%edi
  406848:	e8 93 a1 ff ff       	callq  4009e0 <clock_gettime@plt>
    raytracing(pixels, background,
  40684d:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  406851:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  406855:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  406859:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  40685d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  406861:	68 00 02 00 00       	pushq  $0x200
  406866:	68 00 02 00 00       	pushq  $0x200
  40686b:	41 b9 20 6f 40 00    	mov    $0x406f20,%r9d
  406871:	49 89 f8             	mov    %rdi,%r8
  406874:	48 89 c7             	mov    %rax,%rdi
  406877:	e8 83 fc ff ff       	callq  4064ff <raytracing>
  40687c:	48 83 c4 10          	add    $0x10,%rsp
               rectangulars, spheres, lights, &view, ROWS, COLS);
    clock_gettime(CLOCK_REALTIME, &end);
  406880:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  406884:	48 89 c6             	mov    %rax,%rsi
  406887:	bf 00 00 00 00       	mov    $0x0,%edi
  40688c:	e8 4f a1 ff ff       	callq  4009e0 <clock_gettime@plt>
    {
        FILE *outfile = fopen(OUT_FILENAME, "wb");
  406891:	be 9f 6a 40 00       	mov    $0x406a9f,%esi
  406896:	bf a2 6a 40 00       	mov    $0x406aa2,%edi
  40689b:	e8 00 a2 ff ff       	callq  400aa0 <fopen@plt>
  4068a0:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        write_to_ppm(outfile, pixels, ROWS, COLS);
  4068a4:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  4068a8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4068ac:	b9 00 02 00 00       	mov    $0x200,%ecx
  4068b1:	ba 00 02 00 00       	mov    $0x200,%edx
  4068b6:	48 89 c7             	mov    %rax,%rdi
  4068b9:	e8 5e fd ff ff       	callq  40661c <write_to_ppm>
        fclose(outfile);
  4068be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4068c2:	48 89 c7             	mov    %rax,%rdi
  4068c5:	e8 26 a1 ff ff       	callq  4009f0 <fclose@plt>
    }
    delete_rectangular_list(&rectangulars);
  4068ca:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  4068ce:	48 89 c7             	mov    %rax,%rdi
  4068d1:	e8 dc a6 ff ff       	callq  400fb2 <delete_rectangular_list>
    delete_sphere_list(&spheres);
  4068d6:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
  4068da:	48 89 c7             	mov    %rax,%rdi
  4068dd:	e8 81 a8 ff ff       	callq  401163 <delete_sphere_list>
    delete_light_list(&lights);
  4068e2:	48 8d 45 98          	lea    -0x68(%rbp),%rax
  4068e6:	48 89 c7             	mov    %rax,%rdi
  4068e9:	e8 0c a4 ff ff       	callq  400cfa <delete_light_list>
    free(pixels);
  4068ee:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4068f2:	48 89 c7             	mov    %rax,%rdi
  4068f5:	e8 b6 a0 ff ff       	callq  4009b0 <free@plt>
    printf("Done!\n");
  4068fa:	bf aa 6a 40 00       	mov    $0x406aaa,%edi
  4068ff:	e8 cc a0 ff ff       	callq  4009d0 <puts@plt>
    printf("Execution time of raytracing() : %lf sec\n", diff_in_second(start, end));
  406904:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  406908:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40690c:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  406910:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  406914:	48 89 d1             	mov    %rdx,%rcx
  406917:	48 89 c2             	mov    %rax,%rdx
  40691a:	e8 5f fd ff ff       	callq  40667e <diff_in_second>
  40691f:	bf b0 6a 40 00       	mov    $0x406ab0,%edi
  406924:	b8 01 00 00 00       	mov    $0x1,%eax
  406929:	e8 e2 a0 ff ff       	callq  400a10 <printf@plt>
    return 0;
  40692e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  406933:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  406937:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  40693e:	00 00 
  406940:	74 05                	je     406947 <main+0x213>
  406942:	e8 b9 a0 ff ff       	callq  400a00 <__stack_chk_fail@plt>
  406947:	c9                   	leaveq 
  406948:	c3                   	retq   
  406949:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000406950 <__libc_csu_init>:
  406950:	41 57                	push   %r15
  406952:	41 56                	push   %r14
  406954:	41 89 ff             	mov    %edi,%r15d
  406957:	41 55                	push   %r13
  406959:	41 54                	push   %r12
  40695b:	4c 8d 25 8e 14 20 00 	lea    0x20148e(%rip),%r12        # 607df0 <__frame_dummy_init_array_entry>
  406962:	55                   	push   %rbp
  406963:	48 8d 2d 8e 14 20 00 	lea    0x20148e(%rip),%rbp        # 607df8 <__init_array_end>
  40696a:	53                   	push   %rbx
  40696b:	49 89 f6             	mov    %rsi,%r14
  40696e:	49 89 d5             	mov    %rdx,%r13
  406971:	31 db                	xor    %ebx,%ebx
  406973:	4c 29 e5             	sub    %r12,%rbp
  406976:	48 83 ec 08          	sub    $0x8,%rsp
  40697a:	48 c1 fd 03          	sar    $0x3,%rbp
  40697e:	e8 f5 9f ff ff       	callq  400978 <_init>
  406983:	48 85 ed             	test   %rbp,%rbp
  406986:	74 1e                	je     4069a6 <__libc_csu_init+0x56>
  406988:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40698f:	00 
  406990:	4c 89 ea             	mov    %r13,%rdx
  406993:	4c 89 f6             	mov    %r14,%rsi
  406996:	44 89 ff             	mov    %r15d,%edi
  406999:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  40699d:	48 83 c3 01          	add    $0x1,%rbx
  4069a1:	48 39 eb             	cmp    %rbp,%rbx
  4069a4:	75 ea                	jne    406990 <__libc_csu_init+0x40>
  4069a6:	48 83 c4 08          	add    $0x8,%rsp
  4069aa:	5b                   	pop    %rbx
  4069ab:	5d                   	pop    %rbp
  4069ac:	41 5c                	pop    %r12
  4069ae:	41 5d                	pop    %r13
  4069b0:	41 5e                	pop    %r14
  4069b2:	41 5f                	pop    %r15
  4069b4:	c3                   	retq   
  4069b5:	90                   	nop
  4069b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4069bd:	00 00 00 

00000000004069c0 <__libc_csu_fini>:
  4069c0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000004069c4 <_fini>:
  4069c4:	48 83 ec 08          	sub    $0x8,%rsp
  4069c8:	48 83 c4 08          	add    $0x8,%rsp
  4069cc:	c3                   	retq   
